
Project_Blank_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020c8  080020c8  000030c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d8  080020d8  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080020d8  080020d8  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080020d8  080020d8  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d8  080020d8  000030d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020dc  080020dc  000030dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080020e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  080020f0  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  080020f0  00004030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f65  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015fb  00000000  00000000  0000bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000532  00000000  00000000  0000dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d74f  00000000  00000000  0000e1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad6  00000000  00000000  0004b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018d036  00000000  00000000  0005440f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001adc  00000000  00000000  001e1488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001e2f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080020b0 	.word	0x080020b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080020b0 	.word	0x080020b0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	@ 0x28
 8000468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b33      	ldr	r3, [pc, #204]	@ (8000548 <MX_GPIO_Init+0xe4>)
 800047c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000480:	4a31      	ldr	r2, [pc, #196]	@ (8000548 <MX_GPIO_Init+0xe4>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800048a:	4b2f      	ldr	r3, [pc, #188]	@ (8000548 <MX_GPIO_Init+0xe4>)
 800048c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <MX_GPIO_Init+0xe4>)
 800049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800049e:	4a2a      	ldr	r2, [pc, #168]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004a8:	4b27      	ldr	r3, [pc, #156]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004b6:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004bc:	4a22      	ldr	r2, [pc, #136]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004c6:	4b20      	ldr	r3, [pc, #128]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004da:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_GPIO_Init+0xe4>)
 80004e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004f8:	4814      	ldr	r0, [pc, #80]	@ (800054c <MX_GPIO_Init+0xe8>)
 80004fa:	f000 fcfd 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80004fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	480d      	ldr	r0, [pc, #52]	@ (8000550 <MX_GPIO_Init+0xec>)
 800051c:	f000 fb3c 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000520:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <MX_GPIO_Init+0xe8>)
 800053a:	f000 fb2d 	bl	8000b98 <HAL_GPIO_Init>

}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	@ 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	58024400 	.word	0x58024400
 800054c:	58022000 	.word	0x58022000
 8000550:	58020000 	.word	0x58020000

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800055a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800055e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000560:	bf00      	nop
 8000562:	4b3f      	ldr	r3, [pc, #252]	@ (8000660 <main+0x10c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <main+0x24>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dcf4      	bgt.n	8000562 <main+0xe>
  if ( timeout < 0 )
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	da01      	bge.n	8000582 <main+0x2e>
  {
  Error_Handler();
 800057e:	f000 f8e9 	bl	8000754 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 f963 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f86f 	bl	8000668 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800058a:	4b35      	ldr	r3, [pc, #212]	@ (8000660 <main+0x10c>)
 800058c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000590:	4a33      	ldr	r2, [pc, #204]	@ (8000660 <main+0x10c>)
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800059a:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <main+0x10c>)
 800059c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fcd9 	bl	8000f60 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fcef 	bl	8000f94 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005bc:	bf00      	nop
 80005be:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <main+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d104      	bne.n	80005d4 <main+0x80>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dcf4      	bgt.n	80005be <main+0x6a>
if ( timeout < 0 )
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	da01      	bge.n	80005de <main+0x8a>
{
Error_Handler();
 80005da:	f000 f8bb 	bl	8000754 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff41 	bl	8000464 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	/* Set default output values */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e8:	481e      	ldr	r0, [pc, #120]	@ (8000664 <main+0x110>)
 80005ea:	f000 fc85 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f4:	481b      	ldr	r0, [pc, #108]	@ (8000664 <main+0x110>)
 80005f6:	f000 fc7f 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <main+0x110>)
 8000602:	f000 fc79 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060c:	4815      	ldr	r0, [pc, #84]	@ (8000664 <main+0x110>)
 800060e:	f000 fc73 	bl	8000ef8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000612:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000616:	f000 f9ab 	bl	8000970 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800061a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <main+0x110>)
 8000620:	f000 fc83 	bl	8000f2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000624:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000628:	f000 f9a2 	bl	8000970 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <main+0x110>)
 8000632:	f000 fc7a 	bl	8000f2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063a:	f000 f999 	bl	8000970 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800063e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000642:	4808      	ldr	r0, [pc, #32]	@ (8000664 <main+0x110>)
 8000644:	f000 fc71 	bl	8000f2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000648:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800064c:	f000 f990 	bl	8000970 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000654:	4803      	ldr	r0, [pc, #12]	@ (8000664 <main+0x110>)
 8000656:	f000 fc68 	bl	8000f2a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800065a:	bf00      	nop
 800065c:	e7d9      	b.n	8000612 <main+0xbe>
 800065e:	bf00      	nop
 8000660:	58024400 	.word	0x58024400
 8000664:	58022000 	.word	0x58022000

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09c      	sub	sp, #112	@ 0x70
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000672:	224c      	movs	r2, #76	@ 0x4c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fcee 	bl	8002058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2220      	movs	r2, #32
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fce8 	bl	8002058 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000688:	2004      	movs	r0, #4
 800068a:	f000 fc97 	bl	8000fbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <SystemClock_Config+0xe0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemClock_Config+0xe0>)
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800069e:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <SystemClock_Config+0xe0>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xe4>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xe4>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xe4>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c0:	bf00      	nop
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <SystemClock_Config+0xe4>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ce:	d1f8      	bne.n	80006c2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xe8>)
 80006d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <SystemClock_Config+0xe8>)
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2340      	movs	r3, #64	@ 0x40
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fcbd 	bl	8001070 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 f82a 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	233f      	movs	r3, #63	@ 0x3f
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f8fd 	bl	8001924 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000730:	f000 f810 	bl	8000754 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000734:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000738:	2100      	movs	r1, #0
 800073a:	2000      	movs	r0, #0
 800073c:	f001 faa8 	bl	8001c90 <HAL_RCC_MCOConfig>
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	@ 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58000400 	.word	0x58000400
 800074c:	58024800 	.word	0x58024800
 8000750:	58024400 	.word	0x58024400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_MspInit+0x30>)
 8000768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800076c:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x30>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x30>)
 8000778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58024400 	.word	0x58024400

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <NMI_Handler+0x4>

0800079c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f8a1 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000830 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80007f8:	f7ff fe1c 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fc:	f7ff fd6c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 fc1f 	bl	8002068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe93 	bl	8000554 <main>
  bx  lr
 800082e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000830:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000838:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800083c:	080020e0 	.word	0x080020e0
  ldr r2, =_sbss
 8000840:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000844:	24000030 	.word	0x24000030

08000848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC3_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000852:	2003      	movs	r0, #3
 8000854:	f000 f96e 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000858:	f001 fa84 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800085c:	4602      	mov	r2, r0
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_Init+0x68>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	f003 030f 	and.w	r3, r3, #15
 8000868:	4913      	ldr	r1, [pc, #76]	@ (80008b8 <HAL_Init+0x6c>)
 800086a:	5ccb      	ldrb	r3, [r1, r3]
 800086c:	f003 031f 	and.w	r3, r3, #31
 8000870:	fa22 f303 	lsr.w	r3, r2, r3
 8000874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_Init+0x68>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <HAL_Init+0x6c>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	fa22 f303 	lsr.w	r3, r2, r3
 800088c:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <HAL_Init+0x70>)
 800088e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000890:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <HAL_Init+0x74>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f814 	bl	80008c4 <HAL_InitTick>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e002      	b.n	80008ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008a6:	f7ff ff5b 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58024400 	.word	0x58024400
 80008b8:	080020c8 	.word	0x080020c8
 80008bc:	24000004 	.word	0x24000004
 80008c0:	24000000 	.word	0x24000000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_InitTick+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e021      	b.n	800091c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_InitTick+0x64>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_InitTick+0x60>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f945 	bl	8000b7e <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f91d 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_InitTick+0x68>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400000c 	.word	0x2400000c
 8000928:	24000000 	.word	0x24000000
 800092c:	24000008 	.word	0x24000008

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2400000c 	.word	0x2400000c
 8000954:	2400002c 	.word	0x2400002c

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2400002c 	.word	0x2400002c

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400000c 	.word	0x2400000c

080009b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_GetREVID+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	0c1b      	lsrs	r3, r3, #16
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	5c001000 	.word	0x5c001000

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x40>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x40>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	05fa0000 	.word	0x05fa0000

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff47 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5e 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb2 	bl	8000af0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ba6:	4b89      	ldr	r3, [pc, #548]	@ (8000dcc <HAL_GPIO_Init+0x234>)
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000baa:	e194      	b.n	8000ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8186 	beq.w	8000ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x44>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	69b9      	ldr	r1, [r7, #24]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80e0 	beq.w	8000ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_GPIO_Init+0x238>)
 8000d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d16:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <HAL_GPIO_Init+0x238>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <HAL_GPIO_Init+0x238>)
 8000d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2e:	4a29      	ldr	r2, [pc, #164]	@ (8000dd4 <HAL_GPIO_Init+0x23c>)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a20      	ldr	r2, [pc, #128]	@ (8000dd8 <HAL_GPIO_Init+0x240>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d052      	beq.n	8000e00 <HAL_GPIO_Init+0x268>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ddc <HAL_GPIO_Init+0x244>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d031      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <HAL_GPIO_Init+0x248>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_GPIO_Init+0x24c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d025      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <HAL_GPIO_Init+0x250>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01f      	beq.n	8000dba <HAL_GPIO_Init+0x222>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <HAL_GPIO_Init+0x254>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x21e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1a      	ldr	r2, [pc, #104]	@ (8000df0 <HAL_GPIO_Init+0x258>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x21a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_GPIO_Init+0x25c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x216>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <HAL_GPIO_Init+0x260>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x212>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_GPIO_Init+0x264>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x20e>
 8000da2:	2309      	movs	r3, #9
 8000da4:	e02d      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000da6:	230a      	movs	r3, #10
 8000da8:	e02b      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000daa:	2308      	movs	r3, #8
 8000dac:	e029      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e027      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000db2:	2306      	movs	r3, #6
 8000db4:	e025      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e023      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e021      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e01f      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e01d      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e01b      	b.n	8000e02 <HAL_GPIO_Init+0x26a>
 8000dca:	bf00      	nop
 8000dcc:	58000080 	.word	0x58000080
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58000400 	.word	0x58000400
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58020800 	.word	0x58020800
 8000de4:	58020c00 	.word	0x58020c00
 8000de8:	58021000 	.word	0x58021000
 8000dec:	58021400 	.word	0x58021400
 8000df0:	58021800 	.word	0x58021800
 8000df4:	58021c00 	.word	0x58021c00
 8000df8:	58022000 	.word	0x58022000
 8000dfc:	58022400 	.word	0x58022400
 8000e00:	2300      	movs	r3, #0
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e12:	4938      	ldr	r1, [pc, #224]	@ (8000ef4 <HAL_GPIO_Init+0x35c>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f47f ae63 	bne.w	8000bac <HAL_GPIO_Init+0x14>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3724      	adds	r7, #36	@ 0x24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58000400 	.word	0x58000400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	619a      	str	r2, [r3, #24]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f3c:	887a      	ldrh	r2, [r7, #2]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4013      	ands	r3, r2
 8000f42:	041a      	lsls	r2, r3, #16
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f68:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_HSEM_FastTake+0x2c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3320      	adds	r3, #32
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <HAL_HSEM_FastTake+0x30>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	58026400 	.word	0x58026400
 8000f90:	80000300 	.word	0x80000300

08000f94 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f9e:	4906      	ldr	r1, [pc, #24]	@ (8000fb8 <HAL_HSEM_Release+0x24>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	58026400 	.word	0x58026400

08000fbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	d00a      	beq.n	8000fe6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d001      	beq.n	8000fe2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e040      	b.n	8001064 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e03e      	b.n	8001064 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000fee:	491f      	ldr	r1, [pc, #124]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ff6:	f7ff fcaf 	bl	8000958 <HAL_GetTick>
 8000ffa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ffc:	e009      	b.n	8001012 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ffe:	f7ff fcab 	bl	8000958 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800100c:	d901      	bls.n	8001012 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e028      	b.n	8001064 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800101a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800101e:	d1ee      	bne.n	8000ffe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b1e      	cmp	r3, #30
 8001024:	d008      	beq.n	8001038 <HAL_PWREx_ConfigSupply+0x7c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b2e      	cmp	r3, #46	@ 0x2e
 800102a:	d005      	beq.n	8001038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b1d      	cmp	r3, #29
 8001030:	d002      	beq.n	8001038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b2d      	cmp	r3, #45	@ 0x2d
 8001036:	d114      	bne.n	8001062 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001038:	f7ff fc8e 	bl	8000958 <HAL_GetTick>
 800103c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800103e:	e009      	b.n	8001054 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001040:	f7ff fc8a 	bl	8000958 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800104e:	d901      	bls.n	8001054 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e007      	b.n	8001064 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_PWREx_ConfigSupply+0xb0>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001060:	d1ee      	bne.n	8001040 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024800 	.word	0x58024800

08001070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	f000 bc48 	b.w	8001914 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8088 	beq.w	80011a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001092:	4b99      	ldr	r3, [pc, #612]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800109c:	4b96      	ldr	r3, [pc, #600]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d007      	beq.n	80010b8 <HAL_RCC_OscConfig+0x48>
 80010a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010aa:	2b18      	cmp	r3, #24
 80010ac:	d111      	bne.n	80010d2 <HAL_RCC_OscConfig+0x62>
 80010ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	4b8f      	ldr	r3, [pc, #572]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d06d      	beq.n	80011a0 <HAL_RCC_OscConfig+0x130>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d169      	bne.n	80011a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f000 bc21 	b.w	8001914 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x7a>
 80010dc:	4b86      	ldr	r3, [pc, #536]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a85      	ldr	r2, [pc, #532]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e02e      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x9c>
 80010f2:	4b81      	ldr	r3, [pc, #516]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a80      	ldr	r2, [pc, #512]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80010f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b7e      	ldr	r3, [pc, #504]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7d      	ldr	r2, [pc, #500]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0xc0>
 8001116:	4b78      	ldr	r3, [pc, #480]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a77      	ldr	r2, [pc, #476]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b75      	ldr	r3, [pc, #468]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a74      	ldr	r2, [pc, #464]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 8001130:	4b71      	ldr	r3, [pc, #452]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a70      	ldr	r2, [pc, #448]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b6e      	ldr	r3, [pc, #440]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6d      	ldr	r2, [pc, #436]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc02 	bl	8000958 <HAL_GetTick>
 8001154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fbfe 	bl	8000958 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e3d4      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800116a:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fbee 	bl	8000958 <HAL_GetTick>
 800117c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fbea 	bl	8000958 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e3c0      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001192:	4b59      	ldr	r3, [pc, #356]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x110>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80ca 	beq.w	8001344 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b0:	4b51      	ldr	r3, [pc, #324]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ba:	4b4f      	ldr	r3, [pc, #316]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80011bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_RCC_OscConfig+0x166>
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	2b18      	cmp	r3, #24
 80011ca:	d156      	bne.n	800127a <HAL_RCC_OscConfig+0x20a>
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d151      	bne.n	800127a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d6:	4b48      	ldr	r3, [pc, #288]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e392      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0219 	bic.w	r2, r3, #25
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	493f      	ldr	r1, [pc, #252]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbaa 	bl	8000958 <HAL_GetTick>
 8001204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001208:	f7ff fba6 	bl	8000958 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e37c      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	f7ff fbc7 	bl	80009b8 <HAL_GetREVID>
 800122a:	4603      	mov	r3, r0
 800122c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001230:	4293      	cmp	r3, r2
 8001232:	d817      	bhi.n	8001264 <HAL_RCC_OscConfig+0x1f4>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b40      	cmp	r3, #64	@ 0x40
 800123a:	d108      	bne.n	800124e <HAL_RCC_OscConfig+0x1de>
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001244:	4a2c      	ldr	r2, [pc, #176]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	e07a      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	031b      	lsls	r3, r3, #12
 800125c:	4926      	ldr	r1, [pc, #152]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001262:	e06f      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	061b      	lsls	r3, r3, #24
 8001272:	4921      	ldr	r1, [pc, #132]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001278:	e064      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d047      	beq.n	8001312 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0219 	bic.w	r2, r3, #25
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	491a      	ldr	r1, [pc, #104]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fb60 	bl	8000958 <HAL_GetTick>
 8001298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fb5c 	bl	8000958 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e332      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	f7ff fb7d 	bl	80009b8 <HAL_GetREVID>
 80012be:	4603      	mov	r3, r0
 80012c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d819      	bhi.n	80012fc <HAL_RCC_OscConfig+0x28c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b40      	cmp	r3, #64	@ 0x40
 80012ce:	d108      	bne.n	80012e2 <HAL_RCC_OscConfig+0x272>
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012d8:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80012da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012de:	6053      	str	r3, [r2, #4]
 80012e0:	e030      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	031b      	lsls	r3, r3, #12
 80012f0:	4901      	ldr	r1, [pc, #4]	@ (80012f8 <HAL_RCC_OscConfig+0x288>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
 80012f6:	e025      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
 80012f8:	58024400 	.word	0x58024400
 80012fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	4997      	ldr	r1, [pc, #604]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e018      	b.n	8001344 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b95      	ldr	r3, [pc, #596]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a94      	ldr	r2, [pc, #592]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff fb1b 	bl	8000958 <HAL_GetTick>
 8001322:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fb17 	bl	8000958 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e2ed      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001338:	4b8b      	ldr	r3, [pc, #556]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a9 	beq.w	80014a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001352:	4b85      	ldr	r3, [pc, #532]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800135a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800135c:	4b82      	ldr	r3, [pc, #520]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x308>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b18      	cmp	r3, #24
 800136c:	d13a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x374>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d135      	bne.n	80013e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001378:	4b7b      	ldr	r3, [pc, #492]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x320>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b80      	cmp	r3, #128	@ 0x80
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e2c1      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001390:	f7ff fb12 	bl	80009b8 <HAL_GetREVID>
 8001394:	4603      	mov	r3, r0
 8001396:	f241 0203 	movw	r2, #4099	@ 0x1003
 800139a:	4293      	cmp	r3, r2
 800139c:	d817      	bhi.n	80013ce <HAL_RCC_OscConfig+0x35e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_OscConfig+0x348>
 80013a6:	4b70      	ldr	r3, [pc, #448]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b6:	e075      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	069b      	lsls	r3, r3, #26
 80013c6:	4968      	ldr	r1, [pc, #416]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013cc:	e06a      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ce:	4b66      	ldr	r3, [pc, #408]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	061b      	lsls	r3, r3, #24
 80013dc:	4962      	ldr	r1, [pc, #392]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e2:	e05f      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d042      	beq.n	8001472 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80013f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff faae 	bl	8000958 <HAL_GetTick>
 80013fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001400:	f7ff faaa 	bl	8000958 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e280      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001412:	4b55      	ldr	r3, [pc, #340]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800141e:	f7ff facb 	bl	80009b8 <HAL_GetREVID>
 8001422:	4603      	mov	r3, r0
 8001424:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001428:	4293      	cmp	r3, r2
 800142a:	d817      	bhi.n	800145c <HAL_RCC_OscConfig+0x3ec>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	2b20      	cmp	r3, #32
 8001432:	d108      	bne.n	8001446 <HAL_RCC_OscConfig+0x3d6>
 8001434:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800143c:	4a4a      	ldr	r2, [pc, #296]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800143e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001442:	6053      	str	r3, [r2, #4]
 8001444:	e02e      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
 8001446:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	069b      	lsls	r3, r3, #26
 8001454:	4944      	ldr	r1, [pc, #272]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e023      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
 800145c:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	493f      	ldr	r1, [pc, #252]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800146c:	4313      	orrs	r3, r2
 800146e:	60cb      	str	r3, [r1, #12]
 8001470:	e018      	b.n	80014a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3c      	ldr	r2, [pc, #240]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800147c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fa6b 	bl	8000958 <HAL_GetTick>
 8001482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001486:	f7ff fa67 	bl	8000958 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e23d      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001498:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d036      	beq.n	800151e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d019      	beq.n	80014ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fa48 	bl	8000958 <HAL_GetTick>
 80014c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fa44 	bl	8000958 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e21a      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014de:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x45c>
 80014ea:	e018      	b.n	800151e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fa2e 	bl	8000958 <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fa2a 	bl	8000958 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e200      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d039      	beq.n	800159e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01c      	beq.n	800156c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0c      	ldr	r2, [pc, #48]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800153c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800153e:	f7ff fa0b 	bl	8000958 <HAL_GetTick>
 8001542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001546:	f7ff fa07 	bl	8000958 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1dd      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x4d6>
 8001564:	e01b      	b.n	800159e <HAL_RCC_OscConfig+0x52e>
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800156c:	4b9b      	ldr	r3, [pc, #620]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a9a      	ldr	r2, [pc, #616]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001572:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001576:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001578:	f7ff f9ee 	bl	8000958 <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f7ff f9ea 	bl	8000958 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1c0      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001592:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8081 	beq.w	80016ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015ac:	4b8c      	ldr	r3, [pc, #560]	@ (80017e0 <HAL_RCC_OscConfig+0x770>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a8b      	ldr	r2, [pc, #556]	@ (80017e0 <HAL_RCC_OscConfig+0x770>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015b8:	f7ff f9ce 	bl	8000958 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c0:	f7ff f9ca 	bl	8000958 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1a0      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015d2:	4b83      	ldr	r3, [pc, #524]	@ (80017e0 <HAL_RCC_OscConfig+0x770>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x584>
 80015e6:	4b7d      	ldr	r3, [pc, #500]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ea:	4a7c      	ldr	r2, [pc, #496]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f2:	e02d      	b.n	8001650 <HAL_RCC_OscConfig+0x5e0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x5a6>
 80015fc:	4b77      	ldr	r3, [pc, #476]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a76      	ldr	r2, [pc, #472]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
 8001608:	4b74      	ldr	r3, [pc, #464]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160c:	4a73      	ldr	r2, [pc, #460]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6713      	str	r3, [r2, #112]	@ 0x70
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x5e0>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c8>
 800161e:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	@ 0x70
 800162a:	4b6c      	ldr	r3, [pc, #432]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162e:	4a6b      	ldr	r2, [pc, #428]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	@ 0x70
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x5e0>
 8001638:	4b68      	ldr	r3, [pc, #416]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163c:	4a67      	ldr	r2, [pc, #412]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	@ 0x70
 8001644:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	4a64      	ldr	r2, [pc, #400]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800164a:	f023 0304 	bic.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d015      	beq.n	8001684 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff f97e 	bl	8000958 <HAL_GetTick>
 800165c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff f97a 	bl	8000958 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e14e      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001676:	4b59      	ldr	r3, [pc, #356]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ee      	beq.n	8001660 <HAL_RCC_OscConfig+0x5f0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff f968 	bl	8000958 <HAL_GetTick>
 8001688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f964 	bl	8000958 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e138      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016a2:	4b4e      	ldr	r3, [pc, #312]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 812d 	beq.w	8001912 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016b8:	4b48      	ldr	r3, [pc, #288]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016c0:	2b18      	cmp	r3, #24
 80016c2:	f000 80bd 	beq.w	8001840 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	f040 809e 	bne.w	800180c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b42      	ldr	r3, [pc, #264]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a41      	ldr	r2, [pc, #260]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff f93c 	bl	8000958 <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f938 	bl	8000958 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e10e      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016f6:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <HAL_RCC_OscConfig+0x774>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	430a      	orrs	r2, r1
 8001716:	4931      	ldr	r1, [pc, #196]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001718:	4313      	orrs	r3, r2
 800171a:	628b      	str	r3, [r1, #40]	@ 0x28
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	3b01      	subs	r3, #1
 8001722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172a:	3b01      	subs	r3, #1
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	b29b      	uxth	r3, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001736:	3b01      	subs	r3, #1
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001744:	3b01      	subs	r3, #1
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800174c:	4923      	ldr	r1, [pc, #140]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800174e:	4313      	orrs	r3, r2
 8001750:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800175e:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_RCC_OscConfig+0x778>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800176a:	00d2      	lsls	r2, r2, #3
 800176c:	491b      	ldr	r1, [pc, #108]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	f023 020c 	bic.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4917      	ldr	r1, [pc, #92]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001780:	4313      	orrs	r3, r2
 8001782:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	f023 0202 	bic.w	r2, r3, #2
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	4912      	ldr	r1, [pc, #72]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001792:	4313      	orrs	r3, r2
 8001794:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	4a10      	ldr	r2, [pc, #64]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_RCC_OscConfig+0x76c>)
 80017cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f8c1 	bl	8000958 <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d8:	e011      	b.n	80017fe <HAL_RCC_OscConfig+0x78e>
 80017da:	bf00      	nop
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58024800 	.word	0x58024800
 80017e4:	fffffc0c 	.word	0xfffffc0c
 80017e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f8b4 	bl	8000958 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e08a      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x77c>
 800180a:	e082      	b.n	8001912 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b43      	ldr	r3, [pc, #268]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a42      	ldr	r2, [pc, #264]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f89e 	bl	8000958 <HAL_GetTick>
 800181c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f89a 	bl	8000958 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e070      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x7b0>
 800183e:	e068      	b.n	8001912 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001840:	4b36      	ldr	r3, [pc, #216]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	2b01      	cmp	r3, #1
 8001852:	d031      	beq.n	80018b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0203 	and.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d12a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d122      	bne.n	80018b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0a5b      	lsrs	r3, r3, #9
 8001886:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d111      	bne.n	80018b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	0e1b      	lsrs	r3, r3, #24
 80018aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e02b      	b.n	8001914 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d01f      	beq.n	8001912 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018de:	f7ff f83b 	bl	8000958 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018e4:	bf00      	nop
 80018e6:	f7ff f837 	bl	8000958 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d0f9      	beq.n	80018e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_RCC_OscConfig+0x8b0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018fe:	00d2      	lsls	r2, r2, #3
 8001900:	4906      	ldr	r1, [pc, #24]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001902:	4313      	orrs	r3, r2
 8001904:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_RCC_OscConfig+0x8ac>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3730      	adds	r7, #48	@ 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	58024400 	.word	0x58024400
 8001920:	ffff0007 	.word	0xffff0007

08001924 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e19c      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b8a      	ldr	r3, [pc, #552]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d910      	bls.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b87      	ldr	r3, [pc, #540]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 020f 	bic.w	r2, r3, #15
 800194e:	4985      	ldr	r1, [pc, #532]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b83      	ldr	r3, [pc, #524]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e184      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	4b7b      	ldr	r3, [pc, #492]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001980:	429a      	cmp	r2, r3
 8001982:	d908      	bls.n	8001996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001984:	4b78      	ldr	r3, [pc, #480]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4975      	ldr	r1, [pc, #468]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001992:	4313      	orrs	r3, r2
 8001994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	4b70      	ldr	r3, [pc, #448]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d908      	bls.n	80019c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	496a      	ldr	r1, [pc, #424]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	4b64      	ldr	r3, [pc, #400]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019dc:	429a      	cmp	r2, r3
 80019de:	d908      	bls.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019e0:	4b61      	ldr	r3, [pc, #388]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	495e      	ldr	r1, [pc, #376]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d908      	bls.n	8001a20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a0e:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4953      	ldr	r1, [pc, #332]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	4b4d      	ldr	r3, [pc, #308]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d908      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f023 020f 	bic.w	r2, r3, #15
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4947      	ldr	r1, [pc, #284]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d055      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a5a:	4b43      	ldr	r3, [pc, #268]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4940      	ldr	r1, [pc, #256]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a74:	4b3c      	ldr	r3, [pc, #240]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d121      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0f6      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a8c:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0ea      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa4:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0de      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0d6      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f023 0207 	bic.w	r2, r3, #7
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4925      	ldr	r1, [pc, #148]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad6:	f7fe ff3f 	bl	8000958 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7fe ff3b 	bl	8000958 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0be      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d1eb      	bne.n	8001ade <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d208      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f023 020f 	bic.w	r2, r3, #15
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	490e      	ldr	r1, [pc, #56]	@ (8001b68 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d214      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	4906      	ldr	r1, [pc, #24]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <HAL_RCC_ClockConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e086      	b.n	8001c72 <HAL_RCC_ClockConfig+0x34e>
 8001b64:	52002000 	.word	0x52002000
 8001b68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d208      	bcs.n	8001b9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b88:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4939      	ldr	r1, [pc, #228]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d208      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bb6:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	492e      	ldr	r1, [pc, #184]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d010      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d208      	bcs.n	8001bf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4922      	ldr	r1, [pc, #136]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d208      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4917      	ldr	r1, [pc, #92]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c24:	f000 f89e 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	4912      	ldr	r1, [pc, #72]	@ (8001c80 <HAL_RCC_ClockConfig+0x35c>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_RCC_ClockConfig+0x358>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <HAL_RCC_ClockConfig+0x35c>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_RCC_ClockConfig+0x360>)
 8001c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x364>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_RCC_ClockConfig+0x368>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fe2c 	bl	80008c4 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	080020c8 	.word	0x080020c8
 8001c84:	24000004 	.word	0x24000004
 8001c88:	24000000 	.word	0x24000000
 8001c8c:	24000008 	.word	0x24000008

08001c90 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	@ 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d12a      	bne.n	8001cf8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481f      	ldr	r0, [pc, #124]	@ (8001d5c <HAL_RCC_MCOConfig+0xcc>)
 8001cde:	f7fe ff5b 	bl	8000b98 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	4919      	ldr	r1, [pc, #100]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001cf6:	e02a      	b.n	8001d4e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <HAL_RCC_MCOConfig+0xd0>)
 8001d34:	f7fe ff30 	bl	8000b98 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	01d9      	lsls	r1, r3, #7
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_MCOConfig+0xc8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	610b      	str	r3, [r1, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	3730      	adds	r7, #48	@ 0x30
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	58020000 	.word	0x58020000
 8001d60:	58020800 	.word	0x58020800

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	f200 8155 	bhi.w	8002022 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d78:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001de5 	.word	0x08001de5
 8001d84:	08002023 	.word	0x08002023
 8001d88:	08002023 	.word	0x08002023
 8001d8c:	08002023 	.word	0x08002023
 8001d90:	08002023 	.word	0x08002023
 8001d94:	08002023 	.word	0x08002023
 8001d98:	08002023 	.word	0x08002023
 8001d9c:	08002023 	.word	0x08002023
 8001da0:	08001e0b 	.word	0x08001e0b
 8001da4:	08002023 	.word	0x08002023
 8001da8:	08002023 	.word	0x08002023
 8001dac:	08002023 	.word	0x08002023
 8001db0:	08002023 	.word	0x08002023
 8001db4:	08002023 	.word	0x08002023
 8001db8:	08002023 	.word	0x08002023
 8001dbc:	08002023 	.word	0x08002023
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08002023 	.word	0x08002023
 8001dc8:	08002023 	.word	0x08002023
 8001dcc:	08002023 	.word	0x08002023
 8001dd0:	08002023 	.word	0x08002023
 8001dd4:	08002023 	.word	0x08002023
 8001dd8:	08002023 	.word	0x08002023
 8001ddc:	08002023 	.word	0x08002023
 8001de0:	08001e17 	.word	0x08001e17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de4:	4b94      	ldr	r3, [pc, #592]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001df0:	4b91      	ldr	r3, [pc, #580]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	4a90      	ldr	r2, [pc, #576]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e02:	e111      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e04:	4b8d      	ldr	r3, [pc, #564]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e06:	61bb      	str	r3, [r7, #24]
      break;
 8001e08:	e10e      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e0c:	61bb      	str	r3, [r7, #24]
      break;
 8001e0e:	e10b      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e10:	4b8c      	ldr	r3, [pc, #560]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e12:	61bb      	str	r3, [r7, #24]
      break;
 8001e14:	e108      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e20:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e2c:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e36:	4b80      	ldr	r3, [pc, #512]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80e1 	beq.w	800201c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	f000 8083 	beq.w	8001f68 <HAL_RCC_GetSysClockFreq+0x204>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f200 80a1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x248>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x114>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d056      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e76:	e099      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e84:	4b6c      	ldr	r3, [pc, #432]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eae:	4b62      	ldr	r3, [pc, #392]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ede:	e087      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800204c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef2:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f22:	e065      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f36:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f66:	e043      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002054 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001faa:	e021      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fd2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	edd7 6a07 	vldr	s13, [r7, #28]
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002024:	61bb      	str	r3, [r7, #24]
      break;
 8002026:	bf00      	nop
  }

  return sysclockfreq;
 8002028:	69bb      	ldr	r3, [r7, #24]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	58024400 	.word	0x58024400
 800203c:	03d09000 	.word	0x03d09000
 8002040:	003d0900 	.word	0x003d0900
 8002044:	017d7840 	.word	0x017d7840
 8002048:	46000000 	.word	0x46000000
 800204c:	4c742400 	.word	0x4c742400
 8002050:	4a742400 	.word	0x4a742400
 8002054:	4bbebc20 	.word	0x4bbebc20

08002058 <memset>:
 8002058:	4402      	add	r2, r0
 800205a:	4603      	mov	r3, r0
 800205c:	4293      	cmp	r3, r2
 800205e:	d100      	bne.n	8002062 <memset+0xa>
 8002060:	4770      	bx	lr
 8002062:	f803 1b01 	strb.w	r1, [r3], #1
 8002066:	e7f9      	b.n	800205c <memset+0x4>

08002068 <__libc_init_array>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	4d0d      	ldr	r5, [pc, #52]	@ (80020a0 <__libc_init_array+0x38>)
 800206c:	4c0d      	ldr	r4, [pc, #52]	@ (80020a4 <__libc_init_array+0x3c>)
 800206e:	1b64      	subs	r4, r4, r5
 8002070:	10a4      	asrs	r4, r4, #2
 8002072:	2600      	movs	r6, #0
 8002074:	42a6      	cmp	r6, r4
 8002076:	d109      	bne.n	800208c <__libc_init_array+0x24>
 8002078:	4d0b      	ldr	r5, [pc, #44]	@ (80020a8 <__libc_init_array+0x40>)
 800207a:	4c0c      	ldr	r4, [pc, #48]	@ (80020ac <__libc_init_array+0x44>)
 800207c:	f000 f818 	bl	80020b0 <_init>
 8002080:	1b64      	subs	r4, r4, r5
 8002082:	10a4      	asrs	r4, r4, #2
 8002084:	2600      	movs	r6, #0
 8002086:	42a6      	cmp	r6, r4
 8002088:	d105      	bne.n	8002096 <__libc_init_array+0x2e>
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002090:	4798      	blx	r3
 8002092:	3601      	adds	r6, #1
 8002094:	e7ee      	b.n	8002074 <__libc_init_array+0xc>
 8002096:	f855 3b04 	ldr.w	r3, [r5], #4
 800209a:	4798      	blx	r3
 800209c:	3601      	adds	r6, #1
 800209e:	e7f2      	b.n	8002086 <__libc_init_array+0x1e>
 80020a0:	080020d8 	.word	0x080020d8
 80020a4:	080020d8 	.word	0x080020d8
 80020a8:	080020d8 	.word	0x080020d8
 80020ac:	080020dc 	.word	0x080020dc

080020b0 <_init>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	bf00      	nop
 80020b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b6:	bc08      	pop	{r3}
 80020b8:	469e      	mov	lr, r3
 80020ba:	4770      	bx	lr

080020bc <_fini>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr
