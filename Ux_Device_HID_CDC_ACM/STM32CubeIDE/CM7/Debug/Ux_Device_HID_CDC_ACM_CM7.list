
Ux_Device_HID_CDC_ACM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08018a8c  08018a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c94  08018c94  0001a138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018c94  08018c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c9c  08018c9c  0001a138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c9c  08018c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018ca0  08018ca0  00019ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  24000000  08018ca4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  24000138  08018ddc  0001a138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001efc  08018ddc  0001aefc  2**0
                  ALLOC
 11 .usbx_data    000004e4  24035000  24035000  0001b000  2**2
                  ALLOC
 12 .uart_bss     00000800  24036000  24036000  0001b000  2**2
                  ALLOC
 13 .usbx_bss     00004400  24046000  24046000  0001b000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0001a138  2**0
                  CONTENTS, READONLY
 15 .debug_info   0007bd89  00000000  00000000  0001a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00011825  00000000  00000000  00095eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b90  00000000  00000000  000a7718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e4f  00000000  00000000  000aa2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00059903  00000000  00000000  000ac0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0006df95  00000000  00000000  001059fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bfd5f  00000000  00000000  0017398f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  003336ee  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008b7c  00000000  00000000  00333734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000015e  00000000  00000000  0033c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018a74 	.word	0x08018a74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08018a74 	.word	0x08018a74

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	@ (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	@ (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	@ (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	@ (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	@ (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	@ (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	2400179c 	.word	0x2400179c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	@ (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	@ (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	@ (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	@ (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	@ (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24001838 	.word	0x24001838
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240017a0 	.word	0x240017a0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240017a4 	.word	0x240017a4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24001da4 	.word	0x24001da4

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	@ (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	@ (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	@ (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	@ (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f012 fa51 	bl	8012960 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f012 f9be 	bl	8012844 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	@ (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	@ (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	@ (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24001844 	.word	0x24001844
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24001da4 	.word	0x24001da4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24001848 	.word	0x24001848
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	240018d4 	.word	0x240018d4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	240018d8 	.word	0x240018d8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	240018d0 	.word	0x240018d0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	240018cc 	.word	0x240018cc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24001838 	.word	0x24001838
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240017a0 	.word	0x240017a0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240017a4 	.word	0x240017a4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <strlen>:
 8000518:	4603      	mov	r3, r0
 800051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800051e:	2a00      	cmp	r2, #0
 8000520:	d1fb      	bne.n	800051a <strlen+0x2>
 8000522:	1a18      	subs	r0, r3, r0
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr

08000528 <__aeabi_uldivmod>:
 8000528:	b953      	cbnz	r3, 8000540 <__aeabi_uldivmod+0x18>
 800052a:	b94a      	cbnz	r2, 8000540 <__aeabi_uldivmod+0x18>
 800052c:	2900      	cmp	r1, #0
 800052e:	bf08      	it	eq
 8000530:	2800      	cmpeq	r0, #0
 8000532:	bf1c      	itt	ne
 8000534:	f04f 31ff 	movne.w	r1, #4294967295
 8000538:	f04f 30ff 	movne.w	r0, #4294967295
 800053c:	f000 b988 	b.w	8000850 <__aeabi_idiv0>
 8000540:	f1ad 0c08 	sub.w	ip, sp, #8
 8000544:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000554:	b004      	add	sp, #16
 8000556:	4770      	bx	lr

08000558 <__udivmoddi4>:
 8000558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800055c:	9d08      	ldr	r5, [sp, #32]
 800055e:	468e      	mov	lr, r1
 8000560:	4604      	mov	r4, r0
 8000562:	4688      	mov	r8, r1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d14a      	bne.n	80005fe <__udivmoddi4+0xa6>
 8000568:	428a      	cmp	r2, r1
 800056a:	4617      	mov	r7, r2
 800056c:	d962      	bls.n	8000634 <__udivmoddi4+0xdc>
 800056e:	fab2 f682 	clz	r6, r2
 8000572:	b14e      	cbz	r6, 8000588 <__udivmoddi4+0x30>
 8000574:	f1c6 0320 	rsb	r3, r6, #32
 8000578:	fa01 f806 	lsl.w	r8, r1, r6
 800057c:	fa20 f303 	lsr.w	r3, r0, r3
 8000580:	40b7      	lsls	r7, r6
 8000582:	ea43 0808 	orr.w	r8, r3, r8
 8000586:	40b4      	lsls	r4, r6
 8000588:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058c:	fa1f fc87 	uxth.w	ip, r7
 8000590:	fbb8 f1fe 	udiv	r1, r8, lr
 8000594:	0c23      	lsrs	r3, r4, #16
 8000596:	fb0e 8811 	mls	r8, lr, r1, r8
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fb01 f20c 	mul.w	r2, r1, ip
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d909      	bls.n	80005ba <__udivmoddi4+0x62>
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80005ac:	f080 80ea 	bcs.w	8000784 <__udivmoddi4+0x22c>
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f240 80e7 	bls.w	8000784 <__udivmoddi4+0x22c>
 80005b6:	3902      	subs	r1, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	1a9a      	subs	r2, r3, r2
 80005bc:	b2a3      	uxth	r3, r4
 80005be:	fbb2 f0fe 	udiv	r0, r2, lr
 80005c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80005c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80005ce:	459c      	cmp	ip, r3
 80005d0:	d909      	bls.n	80005e6 <__udivmoddi4+0x8e>
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80005d8:	f080 80d6 	bcs.w	8000788 <__udivmoddi4+0x230>
 80005dc:	459c      	cmp	ip, r3
 80005de:	f240 80d3 	bls.w	8000788 <__udivmoddi4+0x230>
 80005e2:	443b      	add	r3, r7
 80005e4:	3802      	subs	r0, #2
 80005e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005ea:	eba3 030c 	sub.w	r3, r3, ip
 80005ee:	2100      	movs	r1, #0
 80005f0:	b11d      	cbz	r5, 80005fa <__udivmoddi4+0xa2>
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	2200      	movs	r2, #0
 80005f6:	e9c5 3200 	strd	r3, r2, [r5]
 80005fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fe:	428b      	cmp	r3, r1
 8000600:	d905      	bls.n	800060e <__udivmoddi4+0xb6>
 8000602:	b10d      	cbz	r5, 8000608 <__udivmoddi4+0xb0>
 8000604:	e9c5 0100 	strd	r0, r1, [r5]
 8000608:	2100      	movs	r1, #0
 800060a:	4608      	mov	r0, r1
 800060c:	e7f5      	b.n	80005fa <__udivmoddi4+0xa2>
 800060e:	fab3 f183 	clz	r1, r3
 8000612:	2900      	cmp	r1, #0
 8000614:	d146      	bne.n	80006a4 <__udivmoddi4+0x14c>
 8000616:	4573      	cmp	r3, lr
 8000618:	d302      	bcc.n	8000620 <__udivmoddi4+0xc8>
 800061a:	4282      	cmp	r2, r0
 800061c:	f200 8105 	bhi.w	800082a <__udivmoddi4+0x2d2>
 8000620:	1a84      	subs	r4, r0, r2
 8000622:	eb6e 0203 	sbc.w	r2, lr, r3
 8000626:	2001      	movs	r0, #1
 8000628:	4690      	mov	r8, r2
 800062a:	2d00      	cmp	r5, #0
 800062c:	d0e5      	beq.n	80005fa <__udivmoddi4+0xa2>
 800062e:	e9c5 4800 	strd	r4, r8, [r5]
 8000632:	e7e2      	b.n	80005fa <__udivmoddi4+0xa2>
 8000634:	2a00      	cmp	r2, #0
 8000636:	f000 8090 	beq.w	800075a <__udivmoddi4+0x202>
 800063a:	fab2 f682 	clz	r6, r2
 800063e:	2e00      	cmp	r6, #0
 8000640:	f040 80a4 	bne.w	800078c <__udivmoddi4+0x234>
 8000644:	1a8a      	subs	r2, r1, r2
 8000646:	0c03      	lsrs	r3, r0, #16
 8000648:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800064c:	b280      	uxth	r0, r0
 800064e:	b2bc      	uxth	r4, r7
 8000650:	2101      	movs	r1, #1
 8000652:	fbb2 fcfe 	udiv	ip, r2, lr
 8000656:	fb0e 221c 	mls	r2, lr, ip, r2
 800065a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800065e:	fb04 f20c 	mul.w	r2, r4, ip
 8000662:	429a      	cmp	r2, r3
 8000664:	d907      	bls.n	8000676 <__udivmoddi4+0x11e>
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	f10c 38ff 	add.w	r8, ip, #4294967295
 800066c:	d202      	bcs.n	8000674 <__udivmoddi4+0x11c>
 800066e:	429a      	cmp	r2, r3
 8000670:	f200 80e0 	bhi.w	8000834 <__udivmoddi4+0x2dc>
 8000674:	46c4      	mov	ip, r8
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	fbb3 f2fe 	udiv	r2, r3, lr
 800067c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000680:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000684:	fb02 f404 	mul.w	r4, r2, r4
 8000688:	429c      	cmp	r4, r3
 800068a:	d907      	bls.n	800069c <__udivmoddi4+0x144>
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000692:	d202      	bcs.n	800069a <__udivmoddi4+0x142>
 8000694:	429c      	cmp	r4, r3
 8000696:	f200 80ca 	bhi.w	800082e <__udivmoddi4+0x2d6>
 800069a:	4602      	mov	r2, r0
 800069c:	1b1b      	subs	r3, r3, r4
 800069e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80006a2:	e7a5      	b.n	80005f0 <__udivmoddi4+0x98>
 80006a4:	f1c1 0620 	rsb	r6, r1, #32
 80006a8:	408b      	lsls	r3, r1
 80006aa:	fa22 f706 	lsr.w	r7, r2, r6
 80006ae:	431f      	orrs	r7, r3
 80006b0:	fa0e f401 	lsl.w	r4, lr, r1
 80006b4:	fa20 f306 	lsr.w	r3, r0, r6
 80006b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80006bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80006c0:	4323      	orrs	r3, r4
 80006c2:	fa00 f801 	lsl.w	r8, r0, r1
 80006c6:	fa1f fc87 	uxth.w	ip, r7
 80006ca:	fbbe f0f9 	udiv	r0, lr, r9
 80006ce:	0c1c      	lsrs	r4, r3, #16
 80006d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80006d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80006d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80006dc:	45a6      	cmp	lr, r4
 80006de:	fa02 f201 	lsl.w	r2, r2, r1
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x1a0>
 80006e4:	193c      	adds	r4, r7, r4
 80006e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80006ea:	f080 809c 	bcs.w	8000826 <__udivmoddi4+0x2ce>
 80006ee:	45a6      	cmp	lr, r4
 80006f0:	f240 8099 	bls.w	8000826 <__udivmoddi4+0x2ce>
 80006f4:	3802      	subs	r0, #2
 80006f6:	443c      	add	r4, r7
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	fa1f fe83 	uxth.w	lr, r3
 8000700:	fbb4 f3f9 	udiv	r3, r4, r9
 8000704:	fb09 4413 	mls	r4, r9, r3, r4
 8000708:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800070c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000710:	45a4      	cmp	ip, r4
 8000712:	d908      	bls.n	8000726 <__udivmoddi4+0x1ce>
 8000714:	193c      	adds	r4, r7, r4
 8000716:	f103 3eff 	add.w	lr, r3, #4294967295
 800071a:	f080 8082 	bcs.w	8000822 <__udivmoddi4+0x2ca>
 800071e:	45a4      	cmp	ip, r4
 8000720:	d97f      	bls.n	8000822 <__udivmoddi4+0x2ca>
 8000722:	3b02      	subs	r3, #2
 8000724:	443c      	add	r4, r7
 8000726:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800072a:	eba4 040c 	sub.w	r4, r4, ip
 800072e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000732:	4564      	cmp	r4, ip
 8000734:	4673      	mov	r3, lr
 8000736:	46e1      	mov	r9, ip
 8000738:	d362      	bcc.n	8000800 <__udivmoddi4+0x2a8>
 800073a:	d05f      	beq.n	80007fc <__udivmoddi4+0x2a4>
 800073c:	b15d      	cbz	r5, 8000756 <__udivmoddi4+0x1fe>
 800073e:	ebb8 0203 	subs.w	r2, r8, r3
 8000742:	eb64 0409 	sbc.w	r4, r4, r9
 8000746:	fa04 f606 	lsl.w	r6, r4, r6
 800074a:	fa22 f301 	lsr.w	r3, r2, r1
 800074e:	431e      	orrs	r6, r3
 8000750:	40cc      	lsrs	r4, r1
 8000752:	e9c5 6400 	strd	r6, r4, [r5]
 8000756:	2100      	movs	r1, #0
 8000758:	e74f      	b.n	80005fa <__udivmoddi4+0xa2>
 800075a:	fbb1 fcf2 	udiv	ip, r1, r2
 800075e:	0c01      	lsrs	r1, r0, #16
 8000760:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000764:	b280      	uxth	r0, r0
 8000766:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800076a:	463b      	mov	r3, r7
 800076c:	4638      	mov	r0, r7
 800076e:	463c      	mov	r4, r7
 8000770:	46b8      	mov	r8, r7
 8000772:	46be      	mov	lr, r7
 8000774:	2620      	movs	r6, #32
 8000776:	fbb1 f1f7 	udiv	r1, r1, r7
 800077a:	eba2 0208 	sub.w	r2, r2, r8
 800077e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000782:	e766      	b.n	8000652 <__udivmoddi4+0xfa>
 8000784:	4601      	mov	r1, r0
 8000786:	e718      	b.n	80005ba <__udivmoddi4+0x62>
 8000788:	4610      	mov	r0, r2
 800078a:	e72c      	b.n	80005e6 <__udivmoddi4+0x8e>
 800078c:	f1c6 0220 	rsb	r2, r6, #32
 8000790:	fa2e f302 	lsr.w	r3, lr, r2
 8000794:	40b7      	lsls	r7, r6
 8000796:	40b1      	lsls	r1, r6
 8000798:	fa20 f202 	lsr.w	r2, r0, r2
 800079c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007a0:	430a      	orrs	r2, r1
 80007a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80007a6:	b2bc      	uxth	r4, r7
 80007a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80007ac:	0c11      	lsrs	r1, r2, #16
 80007ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007b2:	fb08 f904 	mul.w	r9, r8, r4
 80007b6:	40b0      	lsls	r0, r6
 80007b8:	4589      	cmp	r9, r1
 80007ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80007be:	b280      	uxth	r0, r0
 80007c0:	d93e      	bls.n	8000840 <__udivmoddi4+0x2e8>
 80007c2:	1879      	adds	r1, r7, r1
 80007c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80007c8:	d201      	bcs.n	80007ce <__udivmoddi4+0x276>
 80007ca:	4589      	cmp	r9, r1
 80007cc:	d81f      	bhi.n	800080e <__udivmoddi4+0x2b6>
 80007ce:	eba1 0109 	sub.w	r1, r1, r9
 80007d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80007d6:	fb09 f804 	mul.w	r8, r9, r4
 80007da:	fb0e 1119 	mls	r1, lr, r9, r1
 80007de:	b292      	uxth	r2, r2
 80007e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007e4:	4542      	cmp	r2, r8
 80007e6:	d229      	bcs.n	800083c <__udivmoddi4+0x2e4>
 80007e8:	18ba      	adds	r2, r7, r2
 80007ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80007ee:	d2c4      	bcs.n	800077a <__udivmoddi4+0x222>
 80007f0:	4542      	cmp	r2, r8
 80007f2:	d2c2      	bcs.n	800077a <__udivmoddi4+0x222>
 80007f4:	f1a9 0102 	sub.w	r1, r9, #2
 80007f8:	443a      	add	r2, r7
 80007fa:	e7be      	b.n	800077a <__udivmoddi4+0x222>
 80007fc:	45f0      	cmp	r8, lr
 80007fe:	d29d      	bcs.n	800073c <__udivmoddi4+0x1e4>
 8000800:	ebbe 0302 	subs.w	r3, lr, r2
 8000804:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000808:	3801      	subs	r0, #1
 800080a:	46e1      	mov	r9, ip
 800080c:	e796      	b.n	800073c <__udivmoddi4+0x1e4>
 800080e:	eba7 0909 	sub.w	r9, r7, r9
 8000812:	4449      	add	r1, r9
 8000814:	f1a8 0c02 	sub.w	ip, r8, #2
 8000818:	fbb1 f9fe 	udiv	r9, r1, lr
 800081c:	fb09 f804 	mul.w	r8, r9, r4
 8000820:	e7db      	b.n	80007da <__udivmoddi4+0x282>
 8000822:	4673      	mov	r3, lr
 8000824:	e77f      	b.n	8000726 <__udivmoddi4+0x1ce>
 8000826:	4650      	mov	r0, sl
 8000828:	e766      	b.n	80006f8 <__udivmoddi4+0x1a0>
 800082a:	4608      	mov	r0, r1
 800082c:	e6fd      	b.n	800062a <__udivmoddi4+0xd2>
 800082e:	443b      	add	r3, r7
 8000830:	3a02      	subs	r2, #2
 8000832:	e733      	b.n	800069c <__udivmoddi4+0x144>
 8000834:	f1ac 0c02 	sub.w	ip, ip, #2
 8000838:	443b      	add	r3, r7
 800083a:	e71c      	b.n	8000676 <__udivmoddi4+0x11e>
 800083c:	4649      	mov	r1, r9
 800083e:	e79c      	b.n	800077a <__udivmoddi4+0x222>
 8000840:	eba1 0109 	sub.w	r1, r1, r9
 8000844:	46c4      	mov	ip, r8
 8000846:	fbb1 f9fe 	udiv	r9, r1, lr
 800084a:	fb09 f804 	mul.w	r8, r9, r4
 800084e:	e7c4      	b.n	80007da <__udivmoddi4+0x282>

08000850 <__aeabi_idiv0>:
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af02      	add	r7, sp, #8
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000860:	2334      	movs	r3, #52	@ 0x34
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000868:	4a19      	ldr	r2, [pc, #100]	@ (80008d0 <tx_application_define+0x7c>)
 800086a:	491a      	ldr	r1, [pc, #104]	@ (80008d4 <tx_application_define+0x80>)
 800086c:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <tx_application_define+0x84>)
 800086e:	f012 fb21 	bl	8012eb4 <_txe_byte_pool_create>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <tx_application_define+0x84>)
 800087a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f000 f835 	bl	80008ec <App_ThreadX_Init>
 8000882:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800088a:	bf00      	nop
 800088c:	e7fd      	b.n	800088a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800088e:	2334      	movs	r3, #52	@ 0x34
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000896:	4a11      	ldr	r2, [pc, #68]	@ (80008dc <tx_application_define+0x88>)
 8000898:	4911      	ldr	r1, [pc, #68]	@ (80008e0 <tx_application_define+0x8c>)
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <tx_application_define+0x90>)
 800089c:	f012 fb0a 	bl	8012eb4 <_txe_byte_pool_create>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <tx_application_define+0x5c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Error */
    printf("Ux byte pool creation failed: \n");
 80008a6:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <tx_application_define+0x94>)
 80008a8:	f017 fd50 	bl	801834c <puts>
    while(1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <tx_application_define+0x58>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <tx_application_define+0x90>)
 80008b2:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 80008b4:	68b8      	ldr	r0, [r7, #8]
 80008b6:	f000 fee7 	bl	8001688 <MX_USBX_Device_Init>
 80008ba:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <tx_application_define+0x72>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 80008c2:	bf00      	nop
 80008c4:	e7fd      	b.n	80008c2 <tx_application_define+0x6e>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000154 	.word	0x24000154
 80008d4:	08018a8c 	.word	0x08018a8c
 80008d8:	24000554 	.word	0x24000554
 80008dc:	24046000 	.word	0x24046000
 80008e0:	08018aa0 	.word	0x08018aa0
 80008e4:	24000588 	.word	0x24000588
 80008e8:	08018ab4 	.word	0x08018ab4

080008ec <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008f8:	68fb      	ldr	r3, [r7, #12]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800090a:	f00f ff57 	bl	80107bc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <MX_DMA_Init+0x3c>)
 800091c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <MX_DMA_Init+0x3c>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_DMA_Init+0x3c>)
 800092c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	200b      	movs	r0, #11
 800093e:	f002 fddb 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000942:	200b      	movs	r0, #11
 8000944:	f002 fdf2 	bl	800352c <HAL_NVIC_EnableIRQ>

}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024400 	.word	0x58024400

08000954 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	4a3b      	ldr	r2, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097a:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	4a34      	ldr	r2, [pc, #208]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a25      	ldr	r2, [pc, #148]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_GPIO_Init+0x10c>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a06:	4817      	ldr	r0, [pc, #92]	@ (8000a64 <MX_GPIO_Init+0x110>)
 8000a08:	f006 f8d0 	bl	8006bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a12:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <MX_GPIO_Init+0x114>)
 8000a24:	f005 fe08 	bl	8006638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <MX_GPIO_Init+0x110>)
 8000a42:	f005 fdf9 	bl	8006638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2107      	movs	r1, #7
 8000a4a:	2028      	movs	r0, #40	@ 0x28
 8000a4c:	f002 fd54 	bl	80034f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a50:	2028      	movs	r0, #40	@ 0x28
 8000a52:	f002 fd6b 	bl	800352c <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58022000 	.word	0x58022000
 8000a68:	58020800 	.word	0x58020800

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a72:	f000 f961 	bl	8000d38 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a76:	4b56      	ldr	r3, [pc, #344]	@ (8000bd0 <main+0x164>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d11b      	bne.n	8000aba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a82:	f3bf 8f4f 	dsb	sy
}
 8000a86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a88:	f3bf 8f6f 	isb	sy
}
 8000a8c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a8e:	4b50      	ldr	r3, [pc, #320]	@ (8000bd0 <main+0x164>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a96:	f3bf 8f4f 	dsb	sy
}
 8000a9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9c:	f3bf 8f6f 	isb	sy
}
 8000aa0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd0 <main+0x164>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd0 <main+0x164>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aae:	f3bf 8f4f 	dsb	sy
}
 8000ab2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab4:	f3bf 8f6f 	isb	sy
}
 8000ab8:	e000      	b.n	8000abc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000aba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000abc:	4b44      	ldr	r3, [pc, #272]	@ (8000bd0 <main+0x164>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d138      	bne.n	8000b3a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ac8:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <main+0x164>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad0:	f3bf 8f4f 	dsb	sy
}
 8000ad4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <main+0x164>)
 8000ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000adc:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	0b5b      	lsrs	r3, r3, #13
 8000ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000af0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	015a      	lsls	r2, r3, #5
 8000af6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000afa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b00:	4933      	ldr	r1, [pc, #204]	@ (8000bd0 <main+0x164>)
 8000b02:	4313      	orrs	r3, r2
 8000b04:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ef      	bne.n	8000af2 <main+0x86>
    } while(sets-- != 0U);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60fa      	str	r2, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1e5      	bne.n	8000ae8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <main+0x164>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd0 <main+0x164>)
 8000b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2e:	f3bf 8f4f 	dsb	sy
}
 8000b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b34:	f3bf 8f6f 	isb	sy
}
 8000b38:	e000      	b.n	8000b3c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b3a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b40:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b42:	bf00      	nop
 8000b44:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <main+0x168>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d004      	beq.n	8000b5a <main+0xee>
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	617a      	str	r2, [r7, #20]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dcf4      	bgt.n	8000b44 <main+0xd8>
  if ( timeout < 0 )
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da01      	bge.n	8000b64 <main+0xf8>
  {
  Error_Handler();
 8000b60:	f000 f94a 	bl	8000df8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f002 fb60 	bl	8003228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f836 	bl	8000bd8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <main+0x168>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a18      	ldr	r2, [pc, #96]	@ (8000bd4 <main+0x168>)
 8000b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <main+0x168>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f006 f85c 	bl	8006c48 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2000      	movs	r0, #0
 8000b94:	f006 f872 	bl	8006c7c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b9e:	bf00      	nop
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <main+0x168>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <main+0x14a>
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	617a      	str	r2, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dcf4      	bgt.n	8000ba0 <main+0x134>
if ( timeout < 0 )
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da01      	bge.n	8000bc0 <main+0x154>
{
Error_Handler();
 8000bbc:	f000 f91c 	bl	8000df8 <Error_Handler>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000bc0:	f7ff fea8 	bl	8000914 <MX_DMA_Init>
  MX_GPIO_Init();
 8000bc4:	f7ff fec6 	bl	8000954 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000bc8:	f7ff fe9d 	bl	8000906 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <main+0x160>
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0a4      	sub	sp, #144	@ 0x90
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000be2:	224c      	movs	r2, #76	@ 0x4c
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f017 fc90 	bl	801850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f017 fc89 	bl	801850c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f007 fb8d 	bl	800832c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b45      	ldr	r3, [pc, #276]	@ (8000d2c <SystemClock_Config+0x154>)
 8000c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1a:	4a44      	ldr	r2, [pc, #272]	@ (8000d2c <SystemClock_Config+0x154>)
 8000c1c:	f023 0301 	bic.w	r3, r3, #1
 8000c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c22:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <SystemClock_Config+0x154>)
 8000c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <SystemClock_Config+0x158>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a3f      	ldr	r2, [pc, #252]	@ (8000d30 <SystemClock_Config+0x158>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <SystemClock_Config+0x158>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c44:	bf00      	nop
 8000c46:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <SystemClock_Config+0x158>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c52:	d1f8      	bne.n	8000c46 <SystemClock_Config+0x6e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c54:	2321      	movs	r3, #33	@ 0x21
 8000c56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	2302      	movs	r3, #2
 8000c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c6e:	23a0      	movs	r3, #160	@ 0xa0
 8000c70:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c80:	2308      	movs	r3, #8
 8000c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c96:	4618      	mov	r0, r3
 8000c98:	f007 fbb2 	bl	8008400 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ca2:	f000 f8a9 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	233f      	movs	r3, #63	@ 0x3f
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb6:	2340      	movs	r3, #64	@ 0x40
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc4:	2340      	movs	r3, #64	@ 0x40
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 fff0 	bl	8008cb4 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000cda:	f000 f88d 	bl	8000df8 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <SystemClock_Config+0x15c>)
 8000ce0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ce4:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <SystemClock_Config+0x15c>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <SystemClock_Config+0x15c>)
 8000cf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB1;
 8000d00:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000d0a:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8000d0e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000d10:	2322      	movs	r3, #34	@ 0x22
 8000d12:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000d14:	2320      	movs	r3, #32
 8000d16:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a f89f 	bl	800ae60 <HAL_RCCEx_CRSConfig>
}
 8000d22:	bf00      	nop
 8000d24:	3790      	adds	r7, #144	@ 0x90
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58000400 	.word	0x58000400
 8000d30:	58024800 	.word	0x58024800
 8000d34:	58024400 	.word	0x58024400

08000d38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d4a:	f002 fc0b 	bl	8003564 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d5a:	231f      	movs	r3, #31
 8000d5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d5e:	2387      	movs	r3, #135	@ 0x87
 8000d60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d66:	2300      	movs	r3, #0
 8000d68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fc29 	bl	80035d4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24035000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MPU_Config+0x94>)
 8000d88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d96:	2303      	movs	r3, #3
 8000d98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000da2:	463b      	mov	r3, r7
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fc15 	bl	80035d4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24046000;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MPU_Config+0x98>)
 8000db0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000db2:	230c      	movs	r3, #12
 8000db4:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fc0b 	bl	80035d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000dbe:	2006      	movs	r0, #6
 8000dc0:	f002 fbe8 	bl	8003594 <HAL_MPU_Enable>

}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24035000 	.word	0x24035000
 8000dd0:	24046000 	.word	0x24046000

08000dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000de6:	f002 fa5b 	bl	80032a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40001000 	.word	0x40001000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000dfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <Error_Handler+0x18>)
 8000e02:	f005 feec 	bl	8006bde <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000e06:	20c8      	movs	r0, #200	@ 0xc8
 8000e08:	f002 fa6a 	bl	80032e0 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000e0c:	bf00      	nop
 8000e0e:	e7f5      	b.n	8000dfc <Error_Handler+0x4>
 8000e10:	58022000 	.word	0x58022000

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58024400 	.word	0x58024400

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b090      	sub	sp, #64	@ 0x40
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	d827      	bhi.n	8000ea6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	2036      	movs	r0, #54	@ 0x36
 8000e5c:	f002 fb4c 	bl	80034f8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e60:	2036      	movs	r0, #54	@ 0x36
 8000e62:	f002 fb63 	bl	800352c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000e66:	4a29      	ldr	r2, [pc, #164]	@ (8000f0c <HAL_InitTick+0xc4>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <HAL_InitTick+0xc8>)
 8000e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e72:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <HAL_InitTick+0xc8>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <HAL_InitTick+0xc8>)
 8000e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8a:	f107 0210 	add.w	r2, r7, #16
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f008 fa99 	bl	80093cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d106      	bne.n	8000eb2 <HAL_InitTick+0x6a>
 8000ea4:	e001      	b.n	8000eaa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e02b      	b.n	8000f02 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eaa:	f008 fa63 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 8000eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000eb0:	e004      	b.n	8000ebc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb2:	f008 fa5f 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ebe:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <HAL_InitTick+0xcc>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000ecc:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <HAL_InitTick+0xd4>)
 8000ece:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000ed2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000edc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000eec:	f00a f972 	bl	800b1d4 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <HAL_InitTick+0xd0>)
 8000ef8:	f00a f9ce 	bl	800b298 <HAL_TIM_Base_Start_IT>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e000      	b.n	8000f02 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000074 	.word	0x24000074
 8000f10:	58024400 	.word	0x58024400
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	240005bc 	.word	0x240005bc
 8000f1c:	40001000 	.word	0x40001000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA1_Stream0_IRQHandler+0x10>)
 8000f5e:	f004 f859 	bl	8005014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	240006a0 	.word	0x240006a0

08000f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART1_IRQHandler+0x10>)
 8000f72:	f00a fd53 	bl	800ba1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2400060c 	.word	0x2400060c

08000f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8000f84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f88:	f005 fe43 	bl	8006c12 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <TIM6_DAC_IRQHandler+0x10>)
 8000f96:	f00a f9f7 	bl	800b388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	240005bc 	.word	0x240005bc

08000fa4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <OTG_HS_IRQHandler+0x10>)
 8000faa:	f006 f81b 	bl	8006fe4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24035000 	.word	0x24035000

08000fb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e00a      	b.n	8000fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fca:	f3af 8000 	nop.w
 8000fce:	4601      	mov	r1, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf0      	blt.n	8000fca <_read+0x12>
  }

  return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
  }
  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001052:	605a      	str	r2, [r3, #4]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f017 fa70 	bl	80185a8 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24080000 	.word	0x24080000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	24000608 	.word	0x24000608
 80010fc:	24001f00 	.word	0x24001f00

08001100 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	@ (8001194 <MX_USART1_UART_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800114a:	f00a fb0b 	bl	800b764 <HAL_UART_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001154:	f7ff fe50 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800115c:	f00c ff83 	bl	800e066 <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001166:	f7ff fe47 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800116e:	f00c ffb8 	bl	800e0e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001178:	f7ff fe3e 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_USART1_UART_Init+0x90>)
 800117e:	f00c ff39 	bl	800dff4 <HAL_UARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001188:	f7ff fe36 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2400060c 	.word	0x2400060c
 8001194:	40011000 	.word	0x40011000

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0bc      	sub	sp, #240	@ 0xf0
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	22c8      	movs	r2, #200	@ 0xc8
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f017 f9a7 	bl	801850c <memset>
  if(uartHandle->Instance==USART1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a4b      	ldr	r2, [pc, #300]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	f040 808f 	bne.w	80012e8 <HAL_UART_MspInit+0x150>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ca:	f04f 0201 	mov.w	r2, #1
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 160;
 80011da:	23a0      	movs	r3, #160	@ 0xa0
 80011dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80011e2:	2308      	movs	r3, #8
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 80011f6:	2308      	movs	r3, #8
 80011f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f008 f925 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 800120c:	f7ff fdf4 	bl	8000df8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001210:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001216:	4a37      	ldr	r2, [pc, #220]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001220:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800124c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001250:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001266:	2307      	movs	r3, #7
 8001268:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001270:	4619      	mov	r1, r3
 8001272:	4821      	ldr	r0, [pc, #132]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001274:	f005 f9e0 	bl	8006638 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB7_FMP);
 8001278:	2020      	movs	r0, #32
 800127a:	f005 fd13 	bl	8006ca4 <HAL_I2CEx_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <HAL_UART_MspInit+0x164>)
 8001280:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <HAL_UART_MspInit+0x168>)
 8001282:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_UART_MspInit+0x164>)
 8001286:	222a      	movs	r2, #42	@ 0x2a
 8001288:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <HAL_UART_MspInit+0x164>)
 800128c:	2240      	movs	r2, #64	@ 0x40
 800128e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_UART_MspInit+0x164>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_UART_MspInit+0x164>)
 8001298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012bc:	480f      	ldr	r0, [pc, #60]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012be:	f002 f9c9 	bl	8003654 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80012c8:	f7ff fd96 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <HAL_UART_MspInit+0x164>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2105      	movs	r1, #5
 80012dc:	2025      	movs	r0, #37	@ 0x25
 80012de:	f002 f90b 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012e2:	2025      	movs	r0, #37	@ 0x25
 80012e4:	f002 f922 	bl	800352c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	37f0      	adds	r7, #240	@ 0xf0
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40011000 	.word	0x40011000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020000 	.word	0x58020000
 80012fc:	240006a0 	.word	0x240006a0
 8001300:	40020010 	.word	0x40020010

08001304 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <HAL_UART_MspDeInit+0x44>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_UART_MspDeInit+0x48>)
 8001318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800131c:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_UART_MspDeInit+0x48>)
 800131e:	f023 0310 	bic.w	r3, r3, #16
 8001322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 8001326:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <HAL_UART_MspDeInit+0x4c>)
 800132c:	f005 fb34 	bl	8006998 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fce9 	bl	8003d0c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800133a:	2025      	movs	r0, #37	@ 0x25
 800133c:	f002 f904 	bl	8003548 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40011000 	.word	0x40011000
 800134c:	58024400 	.word	0x58024400
 8001350:	58020000 	.word	0x58020000

08001354 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  memset(&hpcd_USB_OTG_HS, 0x0, sizeof(PCD_HandleTypeDef));
 8001358:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 800135c:	2100      	movs	r1, #0
 800135e:	4817      	ldr	r0, [pc, #92]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001360:	f017 f8d4 	bl	801850c <memset>

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <MX_USB_OTG_HS_PCD_Init+0x6c>)
 8001368:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 800136c:	2209      	movs	r2, #9
 800136e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 800137e:	2201      	movs	r2, #1
 8001380:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001384:	2200      	movs	r2, #0
 8001386:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 800138a:	2200      	movs	r2, #0
 800138c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001390:	2200      	movs	r2, #0
 8001392:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 8001396:	2200      	movs	r2, #0
 8001398:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 800139c:	2200      	movs	r2, #0
 800139e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x68>)
 80013a8:	f005 fca0 	bl	8006cec <HAL_PCD_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USB_OTG_HS_PCD_Init+0x62>
  {
    Error_Handler();
 80013b2:	f7ff fd21 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	24035000 	.word	0x24035000
 80013c0:	40040000 	.word	0x40040000

080013c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0c2      	sub	sp, #264	@ 0x108
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013d2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e8:	22c8      	movs	r2, #200	@ 0xc8
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f017 f88d 	bl	801850c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80013f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a85      	ldr	r2, [pc, #532]	@ (8001614 <HAL_PCD_MspInit+0x250>)
 8001400:	4293      	cmp	r3, r2
 8001402:	f040 8102 	bne.w	800160a <HAL_PCD_MspInit+0x246>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001406:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001412:	2319      	movs	r3, #25
 8001414:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 240;
 8001416:	23f0      	movs	r3, #240	@ 0xf0
 8001418:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 5;
 800141e:	2305      	movs	r3, #5
 8001420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001426:	2300      	movs	r3, #0
 8001428:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800142a:	2300      	movs	r3, #0
 800142c:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001432:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143e:	4618      	mov	r0, r3
 8001440:	f008 f806 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_PCD_MspInit+0x8a>
    {
      Error_Handler();
 800144a:	f7ff fcd5 	bl	8000df8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800144e:	f006 ffc7 	bl	80083e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001458:	4a6f      	ldr	r2, [pc, #444]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001462:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001470:	4b69      	ldr	r3, [pc, #420]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001476:	4a68      	ldr	r2, [pc, #416]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001480:	4b65      	ldr	r3, [pc, #404]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b62      	ldr	r3, [pc, #392]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001494:	4a60      	ldr	r2, [pc, #384]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149e:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	4a59      	ldr	r2, [pc, #356]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014bc:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d0:	4a51      	ldr	r2, [pc, #324]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014da:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_1
 80014e8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80014ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001502:	230a      	movs	r3, #10
 8001504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800150c:	4619      	mov	r1, r3
 800150e:	4843      	ldr	r0, [pc, #268]	@ (800161c <HAL_PCD_MspInit+0x258>)
 8001510:	f005 f892 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001518:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800152e:	230a      	movs	r3, #10
 8001530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001534:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001538:	4619      	mov	r1, r3
 800153a:	4839      	ldr	r0, [pc, #228]	@ (8001620 <HAL_PCD_MspInit+0x25c>)
 800153c:	f005 f87c 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001540:	2301      	movs	r3, #1
 8001542:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001558:	230a      	movs	r3, #10
 800155a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001562:	4619      	mov	r1, r3
 8001564:	482f      	ldr	r0, [pc, #188]	@ (8001624 <HAL_PCD_MspInit+0x260>)
 8001566:	f005 f867 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800156a:	2310      	movs	r3, #16
 800156c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001582:	230a      	movs	r3, #10
 8001584:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001588:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800158c:	4619      	mov	r1, r3
 800158e:	4826      	ldr	r0, [pc, #152]	@ (8001628 <HAL_PCD_MspInit+0x264>)
 8001590:	f005 f852 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001594:	2328      	movs	r3, #40	@ 0x28
 8001596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80015ac:	230a      	movs	r3, #10
 80015ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80015b6:	4619      	mov	r1, r3
 80015b8:	481c      	ldr	r0, [pc, #112]	@ (800162c <HAL_PCD_MspInit+0x268>)
 80015ba:	f005 f83d 	bl	8006638 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015e8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_PCD_MspInit+0x254>)
 80015ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2106      	movs	r1, #6
 80015fe:	204d      	movs	r0, #77	@ 0x4d
 8001600:	f001 ff7a 	bl	80034f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001604:	204d      	movs	r0, #77	@ 0x4d
 8001606:	f001 ff91 	bl	800352c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800160a:	bf00      	nop
 800160c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40040000 	.word	0x40040000
 8001618:	58024400 	.word	0x58024400
 800161c:	58020400 	.word	0x58020400
 8001620:	58022000 	.word	0x58022000
 8001624:	58020800 	.word	0x58020800
 8001628:	58021c00 	.word	0x58021c00
 800162c:	58020000 	.word	0x58020000

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800166c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001634:	f001 fde0 	bl	80031f8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001638:	f001 fd48 	bl	80030cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f016 ffa7 	bl	80185b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fa01 	bl	8000a6c <main>
  bx  lr
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001670:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001674:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8001678:	08018ca4 	.word	0x08018ca4
  ldr r2, =_sbss
 800167c:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001680:	24001efc 	.word	0x24001efc

08001684 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC3_IRQHandler>
	...

08001688 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b097      	sub	sp, #92	@ 0x5c
 800168c:	af08      	add	r7, sp, #32
 800168e:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
  ULONG string_framework_length;
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;
  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */

  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	2300      	movs	r3, #0
 800169e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80016a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016a4:	f011 fb92 	bl	8012dcc <_txe_byte_allocate>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 80016ae:	2302      	movs	r3, #2
 80016b0:	e145      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80016bc:	f012 fb0c 	bl	8013cd8 <_uxe_system_initialize>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	e139      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 fc17 	bl	8001f04 <USBD_Get_Device_Framework_Speed>
 80016d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4619      	mov	r1, r3
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 fc10 	bl	8001f04 <USBD_Get_Device_Framework_Speed>
 80016e4:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fc4c 	bl	8001f88 <USBD_Get_String_Framework>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fcca 	bl	8002090 <USBD_Get_Language_Id_Framework>
 80016fc:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80016fe:	69f9      	ldr	r1, [r7, #28]
 8001700:	69b8      	ldr	r0, [r7, #24]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	2400      	movs	r4, #0
 8001708:	9404      	str	r4, [sp, #16]
 800170a:	9203      	str	r2, [sp, #12]
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4603      	mov	r3, r0
 8001718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800171a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800171c:	f016 f872 	bl	8017804 <_ux_device_stack_initialize>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
    return UX_ERROR;
 8001726:	23ff      	movs	r3, #255	@ 0xff
 8001728:	e109      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the hid mouse class parameters for the device */
  hid_mouse_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Mouse_Activate;
 800172a:	4b87      	ldr	r3, [pc, #540]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 800172c:	4a87      	ldr	r2, [pc, #540]	@ (800194c <MX_USBX_Device_Init+0x2c4>)
 800172e:	601a      	str	r2, [r3, #0]
  hid_mouse_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Mouse_Deactivate;
 8001730:	4b85      	ldr	r3, [pc, #532]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 8001732:	4a87      	ldr	r2, [pc, #540]	@ (8001950 <MX_USBX_Device_Init+0x2c8>)
 8001734:	605a      	str	r2, [r3, #4]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_MOUSE);
 8001736:	2002      	movs	r0, #2
 8001738:	f000 fd1c 	bl	8002174 <USBD_HID_ReportDesc>
 800173c:	4603      	mov	r3, r0
 800173e:	4a82      	ldr	r2, [pc, #520]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 8001740:	6093      	str	r3, [r2, #8]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 8001742:	2002      	movs	r0, #2
 8001744:	f000 fd2e 	bl	80021a4 <USBD_HID_ReportDesc_length>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b7e      	ldr	r3, [pc, #504]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 800174e:	611a      	str	r2, [r3, #16]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8001750:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hid_mouse_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Mouse_SetReport;
 8001756:	4b7c      	ldr	r3, [pc, #496]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 8001758:	4a7e      	ldr	r2, [pc, #504]	@ (8001954 <MX_USBX_Device_Init+0x2cc>)
 800175a:	615a      	str	r2, [r3, #20]
  hid_mouse_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Mouse_GetReport;
 800175c:	4b7a      	ldr	r3, [pc, #488]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 800175e:	4a7e      	ldr	r2, [pc, #504]	@ (8001958 <MX_USBX_Device_Init+0x2d0>)
 8001760:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN HID_MOUSE_PARAMETER */

  /* USER CODE END HID_MOUSE_PARAMETER */

  /* Get hid mouse configuration number */
  hid_mouse_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8001762:	2102      	movs	r1, #2
 8001764:	2001      	movs	r0, #1
 8001766:	f000 fcf3 	bl	8002150 <USBD_Get_Configuration_Number>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b7b      	ldr	r3, [pc, #492]	@ (800195c <MX_USBX_Device_Init+0x2d4>)
 8001770:	601a      	str	r2, [r3, #0]

  /* Find hid mouse interface number */
  hid_mouse_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8001772:	2102      	movs	r1, #2
 8001774:	2001      	movs	r0, #1
 8001776:	f000 fcad 	bl	80020d4 <USBD_Get_Interface_Number>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <MX_USBX_Device_Init+0x2d8>)
 8001780:	601a      	str	r2, [r3, #0]

  /* Initialize the device hid Mouse class */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <MX_USBX_Device_Init+0x2d4>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <MX_USBX_Device_Init+0x2d8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	496f      	ldr	r1, [pc, #444]	@ (8001948 <MX_USBX_Device_Init+0x2c0>)
 800178c:	9100      	str	r1, [sp, #0]
 800178e:	4975      	ldr	r1, [pc, #468]	@ (8001964 <MX_USBX_Device_Init+0x2dc>)
 8001790:	4875      	ldr	r0, [pc, #468]	@ (8001968 <MX_USBX_Device_Init+0x2e0>)
 8001792:	f015 f937 	bl	8016a04 <_ux_device_stack_class_register>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USBX_Device_Init+0x118>
                                     hid_mouse_configuration_number,
                                     hid_mouse_interface_number,
                                     &hid_mouse_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_HID_MOUSE_REGISTER_ERROR */
    return UX_ERROR;
 800179c:	23ff      	movs	r3, #255	@ 0xff
 800179e:	e0ce      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END USBX_DEVICE_HID_MOUSE_REGISTER_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 80017a0:	4b72      	ldr	r3, [pc, #456]	@ (800196c <MX_USBX_Device_Init+0x2e4>)
 80017a2:	4a73      	ldr	r2, [pc, #460]	@ (8001970 <MX_USBX_Device_Init+0x2e8>)
 80017a4:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 80017a6:	4b71      	ldr	r3, [pc, #452]	@ (800196c <MX_USBX_Device_Init+0x2e4>)
 80017a8:	4a72      	ldr	r2, [pc, #456]	@ (8001974 <MX_USBX_Device_Init+0x2ec>)
 80017aa:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 80017ac:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <MX_USBX_Device_Init+0x2e4>)
 80017ae:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <MX_USBX_Device_Init+0x2f0>)
 80017b0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	2002      	movs	r0, #2
 80017b6:	f000 fccb 	bl	8002150 <USBD_Get_Configuration_Number>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <MX_USBX_Device_Init+0x2f4>)
 80017c0:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 80017c2:	2100      	movs	r1, #0
 80017c4:	2002      	movs	r0, #2
 80017c6:	f000 fc85 	bl	80020d4 <USBD_Get_Interface_Number>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001980 <MX_USBX_Device_Init+0x2f8>)
 80017d0:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <MX_USBX_Device_Init+0x2f4>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <MX_USBX_Device_Init+0x2f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4964      	ldr	r1, [pc, #400]	@ (800196c <MX_USBX_Device_Init+0x2e4>)
 80017dc:	9100      	str	r1, [sp, #0]
 80017de:	4969      	ldr	r1, [pc, #420]	@ (8001984 <MX_USBX_Device_Init+0x2fc>)
 80017e0:	4869      	ldr	r0, [pc, #420]	@ (8001988 <MX_USBX_Device_Init+0x300>)
 80017e2:	f015 f90f 	bl	8016a04 <_ux_device_stack_class_register>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USBX_Device_Init+0x168>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 80017ec:	23ff      	movs	r3, #255	@ 0xff
 80017ee:	e0a6      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	2300      	movs	r3, #0
 80017f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80017fc:	f011 fae6 	bl	8012dcc <_txe_byte_allocate>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USBX_Device_Init+0x182>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 8001806:	2302      	movs	r3, #2
 8001808:	e099      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	22b0      	movs	r2, #176	@ 0xb0
 800180e:	9206      	str	r2, [sp, #24]
 8001810:	2201      	movs	r2, #1
 8001812:	9205      	str	r2, [sp, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	9204      	str	r2, [sp, #16]
 8001818:	220a      	movs	r2, #10
 800181a:	9203      	str	r2, [sp, #12]
 800181c:	220a      	movs	r2, #10
 800181e:	9202      	str	r2, [sp, #8]
 8001820:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001824:	9201      	str	r2, [sp, #4]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	4a58      	ldr	r2, [pc, #352]	@ (800198c <MX_USBX_Device_Init+0x304>)
 800182c:	4958      	ldr	r1, [pc, #352]	@ (8001990 <MX_USBX_Device_Init+0x308>)
 800182e:	4859      	ldr	r0, [pc, #356]	@ (8001994 <MX_USBX_Device_Init+0x30c>)
 8001830:	f011 ffd8 	bl	80137e4 <_txe_thread_create>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USBX_Device_Init+0x1b6>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERROR */
    return TX_THREAD_ERROR;
 800183a:	230e      	movs	r3, #14
 800183c:	e07f      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* Allocate the stack for hid mouse thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	2300      	movs	r3, #0
 8001844:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800184a:	f011 fabf 	bl	8012dcc <_txe_byte_allocate>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USBX_Device_Init+0x1d0>
  {
    return TX_POOL_ERROR;
 8001854:	2302      	movs	r3, #2
 8001856:	e072      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Create the hid mouse thread. */
  if (tx_thread_create(&ux_hid_thread, "hid_usbx_app_thread_entry",
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	22b0      	movs	r2, #176	@ 0xb0
 800185c:	9206      	str	r2, [sp, #24]
 800185e:	2201      	movs	r2, #1
 8001860:	9205      	str	r2, [sp, #20]
 8001862:	2201      	movs	r2, #1
 8001864:	9204      	str	r2, [sp, #16]
 8001866:	2214      	movs	r2, #20
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	2214      	movs	r2, #20
 800186c:	9202      	str	r2, [sp, #8]
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	4a47      	ldr	r2, [pc, #284]	@ (8001998 <MX_USBX_Device_Init+0x310>)
 800187a:	4948      	ldr	r1, [pc, #288]	@ (800199c <MX_USBX_Device_Init+0x314>)
 800187c:	4848      	ldr	r0, [pc, #288]	@ (80019a0 <MX_USBX_Device_Init+0x318>)
 800187e:	f011 ffb1 	bl	80137e4 <_txe_thread_create>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_USBX_Device_Init+0x204>
                       usbx_hid_thread_entry, 1, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, 20, 20,
                       1, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8001888:	230e      	movs	r3, #14
 800188a:	e058      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Allocate the stack for usbx cdc acm read thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800188c:	f107 010c 	add.w	r1, r7, #12
 8001890:	2300      	movs	r3, #0
 8001892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001898:	f011 fa98 	bl	8012dcc <_txe_byte_allocate>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USBX_Device_Init+0x21e>
  {
    return TX_POOL_ERROR;
 80018a2:	2302      	movs	r3, #2
 80018a4:	e04b      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Create the usbx cdc acm read thread */
  if (tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry",
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	22b0      	movs	r2, #176	@ 0xb0
 80018aa:	9206      	str	r2, [sp, #24]
 80018ac:	2201      	movs	r2, #1
 80018ae:	9205      	str	r2, [sp, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	9204      	str	r2, [sp, #16]
 80018b4:	2214      	movs	r2, #20
 80018b6:	9203      	str	r2, [sp, #12]
 80018b8:	2214      	movs	r2, #20
 80018ba:	9202      	str	r2, [sp, #8]
 80018bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	4a37      	ldr	r2, [pc, #220]	@ (80019a4 <MX_USBX_Device_Init+0x31c>)
 80018c8:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <MX_USBX_Device_Init+0x320>)
 80018ca:	4838      	ldr	r0, [pc, #224]	@ (80019ac <MX_USBX_Device_Init+0x324>)
 80018cc:	f011 ff8a 	bl	80137e4 <_txe_thread_create>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USBX_Device_Init+0x252>
                       usbx_cdc_acm_read_thread_entry, 1, pointer,
                       UX_DEVICE_APP_THREAD_STACK_SIZE, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 80018d6:	230e      	movs	r3, #14
 80018d8:	e031      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Allocate the stack for usbx cdc acm write thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80018da:	f107 010c 	add.w	r1, r7, #12
 80018de:	2300      	movs	r3, #0
 80018e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018e6:	f011 fa71 	bl	8012dcc <_txe_byte_allocate>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USBX_Device_Init+0x26c>
  {
    return TX_POOL_ERROR;
 80018f0:	2302      	movs	r3, #2
 80018f2:	e024      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Create the usbx_cdc_acm_write_thread_entry thread */
  if (tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry",
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	22b0      	movs	r2, #176	@ 0xb0
 80018f8:	9206      	str	r2, [sp, #24]
 80018fa:	2201      	movs	r2, #1
 80018fc:	9205      	str	r2, [sp, #20]
 80018fe:	2200      	movs	r2, #0
 8001900:	9204      	str	r2, [sp, #16]
 8001902:	2214      	movs	r2, #20
 8001904:	9203      	str	r2, [sp, #12]
 8001906:	2214      	movs	r2, #20
 8001908:	9202      	str	r2, [sp, #8]
 800190a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190e:	9201      	str	r2, [sp, #4]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <MX_USBX_Device_Init+0x328>)
 8001916:	4927      	ldr	r1, [pc, #156]	@ (80019b4 <MX_USBX_Device_Init+0x32c>)
 8001918:	4827      	ldr	r0, [pc, #156]	@ (80019b8 <MX_USBX_Device_Init+0x330>)
 800191a:	f011 ff63 	bl	80137e4 <_txe_thread_create>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USBX_Device_Init+0x2a0>
                       usbx_cdc_acm_write_thread_entry, 1, pointer,
                       UX_DEVICE_APP_THREAD_STACK_SIZE, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8001924:	230e      	movs	r3, #14
 8001926:	e00a      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* Create the event flags group */
  if (tx_event_flags_create(&EventFlag, "Event Flag") != TX_SUCCESS)
 8001928:	2224      	movs	r2, #36	@ 0x24
 800192a:	4924      	ldr	r1, [pc, #144]	@ (80019bc <MX_USBX_Device_Init+0x334>)
 800192c:	4824      	ldr	r0, [pc, #144]	@ (80019c0 <MX_USBX_Device_Init+0x338>)
 800192e:	f011 fb61 	bl	8012ff4 <_txe_event_flags_create>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USBX_Device_Init+0x2b4>
  {
    return TX_GROUP_ERROR;
 8001938:	2306      	movs	r3, #6
 800193a:	e000      	b.n	800193e <MX_USBX_Device_Init+0x2b6>
  }

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800193e:	4618      	mov	r0, r3
 8001940:	373c      	adds	r7, #60	@ 0x3c
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	24000728 	.word	0x24000728
 800194c:	08002f01 	.word	0x08002f01
 8001950:	08002f21 	.word	0x08002f21
 8001954:	08002f41 	.word	0x08002f41
 8001958:	08002f5d 	.word	0x08002f5d
 800195c:	2400071c 	.word	0x2400071c
 8001960:	24000718 	.word	0x24000718
 8001964:	080152ad 	.word	0x080152ad
 8001968:	240000c8 	.word	0x240000c8
 800196c:	24000744 	.word	0x24000744
 8001970:	08001a81 	.word	0x08001a81
 8001974:	08001b2d 	.word	0x08001b2d
 8001978:	08001b55 	.word	0x08001b55
 800197c:	24000724 	.word	0x24000724
 8001980:	24000720 	.word	0x24000720
 8001984:	08014959 	.word	0x08014959
 8001988:	240000b0 	.word	0x240000b0
 800198c:	080019c5 	.word	0x080019c5
 8001990:	08018ad4 	.word	0x08018ad4
 8001994:	24000750 	.word	0x24000750
 8001998:	08002f79 	.word	0x08002f79
 800199c:	08018af0 	.word	0x08018af0
 80019a0:	24000800 	.word	0x24000800
 80019a4:	08001be9 	.word	0x08001be9
 80019a8:	08018b0c 	.word	0x08018b0c
 80019ac:	240008b0 	.word	0x240008b0
 80019b0:	08001c85 	.word	0x08001c85
 80019b4:	08018b30 	.word	0x08018b30
 80019b8:	24000960 	.word	0x24000960
 80019bc:	08018b54 	.word	0x08018b54
 80019c0:	24000a10 	.word	0x24000a10

080019c4 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */

  /* Initialization of USB device */
  USBX_APP_Device_Init();
 80019cc:	f000 f804 	bl	80019d8 <USBX_APP_Device_Init>

  /* USER CODE END app_ux_device_thread_entry */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <USBX_APP_Device_Init>:
  *         Initialization of USB device.
  * @param  none
  * @retval none
  */
VOID USBX_APP_Device_Init(VOID)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */

  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  /* USB_OTG_HS init function */
  MX_USB_OTG_HS_PCD_Init();
 80019dc:	f7ff fcba 	bl	8001354 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */

  /* Set Rx FIFO */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80019e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e4:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 80019e6:	f006 fc60 	bl	80082aa <HAL_PCDEx_SetRxFiFo>
  /* Set Tx FIFO 0 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x10);
 80019ea:	2210      	movs	r2, #16
 80019ec:	2100      	movs	r1, #0
 80019ee:	480e      	ldr	r0, [pc, #56]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 80019f0:	f006 fc14 	bl	800821c <HAL_PCDEx_SetTxFiFo>
  /* Set Tx FIFO 2 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x10);
 80019f4:	2210      	movs	r2, #16
 80019f6:	2101      	movs	r1, #1
 80019f8:	480b      	ldr	r0, [pc, #44]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 80019fa:	f006 fc0f 	bl	800821c <HAL_PCDEx_SetTxFiFo>
  /* Set Tx FIFO 3 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x80);
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	2102      	movs	r1, #2
 8001a02:	4809      	ldr	r0, [pc, #36]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 8001a04:	f006 fc0a 	bl	800821c <HAL_PCDEx_SetTxFiFo>
  /* Set Tx FIFO 4 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x20);
 8001a08:	2220      	movs	r2, #32
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 8001a0e:	f006 fc05 	bl	800821c <HAL_PCDEx_SetTxFiFo>

  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* Initialize the device controller driver */
  ux_dcd_stm32_initialize((ULONG)USB_OTG_HS, (ULONG)&hpcd_USB_OTG_HS);
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <USBX_APP_Device_Init+0x54>)
 8001a18:	f014 fc30 	bl	801627c <_ux_dcd_stm32_initialize>

  /* Start the USB device */
  HAL_PCD_Start(&hpcd_USB_OTG_HS);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <USBX_APP_Device_Init+0x50>)
 8001a1e:	f005 fa71 	bl	8006f04 <HAL_PCD_Start>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24035000 	.word	0x24035000
 8001a2c:	40040000 	.word	0x40040000

08001a30 <USBX_APP_UART_Init>:
  *         Initialization of UART.
  * @param  huart: Pointer to UART handler
  * @retval none
  */
VOID USBX_APP_UART_Init(UART_HandleTypeDef **huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBX_APP_UART_Init */

  MX_USART1_UART_Init();
 8001a38:	f7ff fb62 	bl	8001100 <MX_USART1_UART_Init>

  *huart = &huart1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a03      	ldr	r2, [pc, #12]	@ (8001a4c <USBX_APP_UART_Init+0x1c>)
 8001a40:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBX_APP_UART_Init */
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2400060c 	.word	0x2400060c

08001a50 <HAL_GPIO_EXTI_Callback>:
  *         EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]

  /* Check if EXTI from User Button */
  if (GPIO_Pin == BUTTON_USER_Pin)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a60:	d106      	bne.n	8001a70 <HAL_GPIO_EXTI_Callback+0x20>
  {
    User_Button_State ^= 1U;
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f083 0301 	eor.w	r3, r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a6e:	701a      	strb	r2, [r3, #0]
  }
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	24001760 	.word	0x24001760

08001a80 <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */

  /* Save the CDC instance */
  cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 8001a88:	4a24      	ldr	r2, [pc, #144]	@ (8001b1c <USBD_CDC_ACM_Activate+0x9c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the UART peripheral */
  USBX_APP_UART_Init(&uart_handler);
 8001a8e:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001a90:	f7ff ffce 	bl	8001a30 <USBX_APP_UART_Init>

  /* Get default UART parameters */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = uart_handler->Init.BaudRate;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a22      	ldr	r2, [pc, #136]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Set the UART data type : only 8bits and 9bits are supported */
  switch (uart_handler->Init.WordLength)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <USBD_CDC_ACM_Activate+0x30>
 8001aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aac:	d004      	beq.n	8001ab8 <USBD_CDC_ACM_Activate+0x38>
 8001aae:	e007      	b.n	8001ac0 <USBD_CDC_ACM_Activate+0x40>
  {
    case UART_WORDLENGTH_8B:
    {
      /* Set UART data bit to 8 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	719a      	strb	r2, [r3, #6]
      break;
 8001ab6:	e007      	b.n	8001ac8 <USBD_CDC_ACM_Activate+0x48>
    }

    case UART_WORDLENGTH_9B:
    {
      /* Set UART data bit to 9 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH9;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001aba:	2209      	movs	r2, #9
 8001abc:	719a      	strb	r2, [r3, #6]
      break;
 8001abe:	e003      	b.n	8001ac8 <USBD_CDC_ACM_Activate+0x48>
    }

    default :
    {
      /* By default set UART data bit to 8 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	719a      	strb	r2, [r3, #6]
      break;
 8001ac6:	bf00      	nop
    }
  }

  /* Get UART Parity */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_parity = uart_handler->Init.Parity;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001ad2:	715a      	strb	r2, [r3, #5]

  /* Get UART StopBits */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_stop_bit = uart_handler->Init.StopBits;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001ade:	711a      	strb	r2, [r3, #4]

  /* Set device class_cdc_acm with default parameters */
  if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <USBD_CDC_ACM_Activate+0x9c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b24 <USBD_CDC_ACM_Activate+0xa4>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f012 ffdb 	bl	8014aa4 <_ux_device_class_cdc_acm_ioctl>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <USBD_CDC_ACM_Activate+0x78>
                                    &CDC_VCP_LineCoding) != UX_SUCCESS)
  {
    Error_Handler();
 8001af4:	f7ff f980 	bl	8000df8 <Error_Handler>
  }

  /* Receive an amount of data in interrupt mode */
  if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <USBD_CDC_ACM_Activate+0xa0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <USBD_CDC_ACM_Activate+0xa8>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f009 febf 	bl	800b884 <HAL_UART_Receive_IT>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <USBD_CDC_ACM_Activate+0x92>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001b0c:	f7ff f974 	bl	8000df8 <Error_Handler>
  }

  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
}
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	24000a34 	.word	0x24000a34
 8001b20:	24001240 	.word	0x24001240
 8001b24:	24000000 	.word	0x24000000
 8001b28:	24000a38 	.word	0x24000a38

08001b2c <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);

  /* Reset the cdc acm instance */
  cdc_acm = UX_NULL;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <USBD_CDC_ACM_Deactivate+0x20>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

  /* DeInitialize the UART peripheral */
  HAL_UART_DeInit(uart_handler);
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <USBD_CDC_ACM_Deactivate+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f009 fe60 	bl	800b804 <HAL_UART_DeInit>

  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 8001b44:	bf00      	nop
}
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	24000a34 	.word	0x24000a34
 8001b50:	24001240 	.word	0x24001240

08001b54 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  ULONG request;
  UX_SLAVE_TRANSFER *transfer_request;
  UX_SLAVE_DEVICE *device;

  /* Get the pointer to the device.  */
  device = &_ux_system_slave -> ux_system_slave_device;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <USBD_CDC_ACM_ParameterChange+0x88>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3320      	adds	r3, #32
 8001b62:	617b      	str	r3, [r7, #20]

  /* Get the pointer to the transfer request associated with the control endpoint. */
  transfer_request = &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3338      	adds	r3, #56	@ 0x38
 8001b68:	613b      	str	r3, [r7, #16]

  request = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b70:	60fb      	str	r3, [r7, #12]

  switch (request)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d003      	beq.n	8001b80 <USBD_CDC_ACM_ParameterChange+0x2c>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b21      	cmp	r3, #33	@ 0x21
 8001b7c:	d01d      	beq.n	8001bba <USBD_CDC_ACM_ParameterChange+0x66>

      break;

    case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE :
    default :
      break;
 8001b7e:	e029      	b.n	8001bd4 <USBD_CDC_ACM_ParameterChange+0x80>
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING,
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <USBD_CDC_ACM_ParameterChange+0x8c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f012 ff8b 	bl	8014aa4 <_ux_device_class_cdc_acm_ioctl>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <USBD_CDC_ACM_ParameterChange+0x44>
        Error_Handler();
 8001b94:	f7ff f930 	bl	8000df8 <Error_Handler>
      if (CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate < MIN_BAUDRATE)
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8001ba0:	d207      	bcs.n	8001bb2 <USBD_CDC_ACM_ParameterChange+0x5e>
        CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = MIN_BAUDRATE;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001ba4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ba8:	601a      	str	r2, [r3, #0]
        USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 8001baa:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001bac:	f000 f914 	bl	8001dd8 <USBD_CDC_VCP_Config>
      break;
 8001bb0:	e010      	b.n	8001bd4 <USBD_CDC_ACM_ParameterChange+0x80>
        USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001bb4:	f000 f910 	bl	8001dd8 <USBD_CDC_VCP_Config>
      break;
 8001bb8:	e00c      	b.n	8001bd4 <USBD_CDC_ACM_ParameterChange+0x80>
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <USBD_CDC_ACM_ParameterChange+0x8c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <USBD_CDC_ACM_ParameterChange+0x90>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f012 ff6e 	bl	8014aa4 <_ux_device_class_cdc_acm_ioctl>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <USBD_CDC_ACM_ParameterChange+0x7e>
        Error_Handler();
 8001bce:	f7ff f913 	bl	8000df8 <Error_Handler>
      break;
 8001bd2:	bf00      	nop
  }

  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24001dac 	.word	0x24001dac
 8001be0:	24000a34 	.word	0x24000a34
 8001be4:	24000000 	.word	0x24000000

08001be8 <usbx_cdc_acm_read_thread_entry>:
  * @brief  Function implementing usbx_cdc_acm_thread_entry.
  * @param  thread_input: Not used
  * @retval none
  */
VOID usbx_cdc_acm_read_thread_entry(ULONG thread_input)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
  ULONG actual_length;
  ULONG senddataflag = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  UX_SLAVE_DEVICE *device;

  UX_PARAMETER_NOT_USED(thread_input);

  device = &_ux_system_slave->ux_system_slave_device;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <usbx_cdc_acm_read_thread_entry+0x88>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3320      	adds	r3, #32
 8001bfa:	617b      	str	r3, [r7, #20]

  while (1)
  {
    /* Check if device is configured */
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d12f      	bne.n	8001c64 <usbx_cdc_acm_read_thread_entry+0x7c>
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <usbx_cdc_acm_read_thread_entry+0x8c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02b      	beq.n	8001c64 <usbx_cdc_acm_read_thread_entry+0x7c>
      cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;

#endif /* UX_DEVICE_CLASS_CDC_ACM_TRANSMISSION_DISABLE */

      /* Read the received data in blocking mode */
      ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBufferFS, 64,
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <usbx_cdc_acm_read_thread_entry+0x8c>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	4918      	ldr	r1, [pc, #96]	@ (8001c78 <usbx_cdc_acm_read_thread_entry+0x90>)
 8001c18:	f013 f80e 	bl	8014c38 <_ux_device_class_cdc_acm_read>
                                   &actual_length);
      if (actual_length != 0)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01c      	beq.n	8001c5c <usbx_cdc_acm_read_thread_entry+0x74>
      {
        /* Send the data via UART */
        if (HAL_UART_Transmit_DMA(uart_handler, (uint8_t *)UserRxBufferFS, actual_length) != HAL_OK)
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <usbx_cdc_acm_read_thread_entry+0x94>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	4913      	ldr	r1, [pc, #76]	@ (8001c78 <usbx_cdc_acm_read_thread_entry+0x90>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f009 fe75 	bl	800b91c <HAL_UART_Transmit_DMA>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <usbx_cdc_acm_read_thread_entry+0x54>
        {
          Error_Handler();
 8001c38:	f7ff f8de 	bl	8000df8 <Error_Handler>
        }

        /* Wait until the requested flag TX_NEW_TRANSMITTED_DATA is received */
        if (tx_event_flags_get(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR_CLEAR,
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	2102      	movs	r1, #2
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <usbx_cdc_acm_read_thread_entry+0x98>)
 8001c4c:	f011 faa2 	bl	8013194 <_txe_event_flags_get>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <usbx_cdc_acm_read_thread_entry+0x84>
                               &senddataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
        {
          Error_Handler();
 8001c56:	f7ff f8cf 	bl	8000df8 <Error_Handler>
      if (actual_length != 0)
 8001c5a:	e007      	b.n	8001c6c <usbx_cdc_acm_read_thread_entry+0x84>
        }
      }
      else
      {
        /* Sleep thread for 10ms if no data received */
        tx_thread_sleep(MS_TO_TICK(10));
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f010 f92f 	bl	8011ec0 <_tx_thread_sleep>
      if (actual_length != 0)
 8001c62:	e003      	b.n	8001c6c <usbx_cdc_acm_read_thread_entry+0x84>
      }
    }
    else
    {
      /* Sleep thread for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8001c64:	2001      	movs	r0, #1
 8001c66:	f010 f92b 	bl	8011ec0 <_tx_thread_sleep>
 8001c6a:	e7c7      	b.n	8001bfc <usbx_cdc_acm_read_thread_entry+0x14>
      if (actual_length != 0)
 8001c6c:	bf00      	nop
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 8001c6e:	e7c5      	b.n	8001bfc <usbx_cdc_acm_read_thread_entry+0x14>
 8001c70:	24001dac 	.word	0x24001dac
 8001c74:	24000a34 	.word	0x24000a34
 8001c78:	24036000 	.word	0x24036000
 8001c7c:	24001240 	.word	0x24001240
 8001c80:	24000a10 	.word	0x24000a10

08001c84 <usbx_cdc_acm_write_thread_entry>:
  * @brief  Function implementing usbx_cdc_acm_write_thread_entry.
  * @param  thread_input: Not used
  * @retval none
  */
VOID usbx_cdc_acm_write_thread_entry(ULONG thread_input)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	6078      	str	r0, [r7, #4]
  ULONG receivedataflag = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  UX_PARAMETER_NOT_USED(thread_input);

  while (1)
  {
    /* Wait until the requested flag RX_NEW_RECEIVED_DATA is received */
    if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	481f      	ldr	r0, [pc, #124]	@ (8001d1c <usbx_cdc_acm_write_thread_entry+0x98>)
 8001ca0:	f011 fa78 	bl	8013194 <_txe_event_flags_get>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <usbx_cdc_acm_write_thread_entry+0x2a>
                           &receivedataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
    {
      Error_Handler();
 8001caa:	f7ff f8a5 	bl	8000df8 <Error_Handler>
    cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;

#endif

    /* Check if there is a new data to send */
    if (UserTxBufPtrOut != UserTxBufPtrIn)
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d0ea      	beq.n	8001c90 <usbx_cdc_acm_write_thread_entry+0xc>
    {
      /* Check buffer overflow and Rollback */
      if (UserTxBufPtrOut > UserTxBufPtrIn)
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d905      	bls.n	8001cd2 <usbx_cdc_acm_write_thread_entry+0x4e>
      {
        buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e005      	b.n	8001cde <usbx_cdc_acm_write_thread_entry+0x5a>
      }
      else
      {
        /* Calculate data size */
        buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
      }

      /* Copy UserTxBufPtrOut in buffptr */
      buffptr = UserTxBufPtrOut;
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]

      /* Send data over the class cdc_acm_write */
      if (ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(&UserTxBufferFS[buffptr]),
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <usbx_cdc_acm_write_thread_entry+0xa4>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <usbx_cdc_acm_write_thread_entry+0xa8>)
 8001cec:	1899      	adds	r1, r3, r2
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	f013 f852 	bl	8014d9c <_ux_device_class_cdc_acm_write>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1c8      	bne.n	8001c90 <usbx_cdc_acm_write_thread_entry+0xc>
                                        buffsize, &actual_length) == UX_SUCCESS)
      {
        /* Increment the UserTxBufPtrOut pointer */
        UserTxBufPtrOut += buffsize;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001d08:	6013      	str	r3, [r2, #0]

        /* Rollback UserTxBufPtrOut if it equal to APP_TX_DATA_SIZE */
        if (UserTxBufPtrOut == APP_TX_DATA_SIZE)
 8001d0a:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d12:	d1bd      	bne.n	8001c90 <usbx_cdc_acm_write_thread_entry+0xc>
        {
          UserTxBufPtrOut = 0;
 8001d14:	4b02      	ldr	r3, [pc, #8]	@ (8001d20 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8001d1a:	e7b9      	b.n	8001c90 <usbx_cdc_acm_write_thread_entry+0xc>
 8001d1c:	24000a10 	.word	0x24000a10
 8001d20:	2400123c 	.word	0x2400123c
 8001d24:	24001238 	.word	0x24001238
 8001d28:	24000a34 	.word	0x24000a34
 8001d2c:	24000a38 	.word	0x24000a38

08001d30 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  huart UART handle.
  * @retval none
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Set TX_NEW_TRANSMITTED_DATA flag */
  if (tx_event_flags_set(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR) != TX_SUCCESS)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_UART_TxCpltCallback+0x24>)
 8001d3e:	f011 fa7f 	bl	8013240 <_txe_event_flags_set>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_TxCpltCallback+0x1c>
  {
    Error_Handler();
 8001d48:	f7ff f856 	bl	8000df8 <Error_Handler>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	24000a10 	.word	0x24000a10

08001d58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval none
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Set RX_NEW_RECEIVED_DATA flag */
  if (tx_event_flags_set(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR) != TX_SUCCESS)
 8001d60:	2200      	movs	r2, #0
 8001d62:	2101      	movs	r1, #1
 8001d64:	4813      	ldr	r0, [pc, #76]	@ (8001db4 <HAL_UART_RxCpltCallback+0x5c>)
 8001d66:	f011 fa6b 	bl	8013240 <_txe_event_flags_set>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_RxCpltCallback+0x1c>
  {
    Error_Handler();
 8001d70:	f7ff f842 	bl	8000df8 <Error_Handler>
  }

  /* Increment the UserTxBufPtrIn pointer */
  UserTxBufPtrIn++;
 8001d74:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_UART_RxCpltCallback+0x60>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_UART_RxCpltCallback+0x60>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Rollback the UserTxBufPtrIn if it equal to APP_TX_DATA_SIZE */
  if (UserTxBufPtrIn == APP_TX_DATA_SIZE)
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_UART_RxCpltCallback+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d86:	d102      	bne.n	8001d8e <HAL_UART_RxCpltCallback+0x36>
  {
    UserTxBufPtrIn = 0;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_UART_RxCpltCallback+0x60>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS + UserTxBufPtrIn, 1) != HAL_OK)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_UART_RxCpltCallback+0x64>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_UART_RxCpltCallback+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x68>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f009 fd71 	bl	800b884 <HAL_UART_Receive_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_RxCpltCallback+0x54>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001da8:	f7ff f826 	bl	8000df8 <Error_Handler>
  }

}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	24000a10 	.word	0x24000a10
 8001db8:	24001238 	.word	0x24001238
 8001dbc:	24001240 	.word	0x24001240
 8001dc0:	24000a38 	.word	0x24000a38

08001dc4 <HAL_UART_ErrorCallback>:
            Transfer error occurred in reception and/or transmission process.
  * @param  UartHandle: UART handle
  * @retval none
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  Error_Handler();
 8001dcc:	f7ff f814 	bl	8000df8 <Error_Handler>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <USBD_CDC_VCP_Config>:
  * @param  CDC_VCP_LineCoding: CDC VCP line coding.
  * @retval none
  */
static VOID USBD_CDC_VCP_Config(UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER
                                *CDC_VCP_LineCoding)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Deinitialization UART */
  if (HAL_UART_DeInit(uart_handler) != HAL_OK)
 8001de0:	4b45      	ldr	r3, [pc, #276]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f009 fd0d 	bl	800b804 <HAL_UART_DeInit>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <USBD_CDC_VCP_Config+0x1c>
  {
    /* Deinitialization Error */
    Error_Handler();
 8001df0:	f7ff f802 	bl	8000df8 <Error_Handler>
  }

  /* Check stop bit parameter */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_stop_bit)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <USBD_CDC_VCP_Config+0x2a>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d005      	beq.n	8001e0c <USBD_CDC_VCP_Config+0x34>
 8001e00:	e00a      	b.n	8001e18 <USBD_CDC_VCP_Config+0x40>
  {
    case 0:

      /* Set the UART Stop bit to 1 */
      uart_handler->Init.StopBits = UART_STOPBITS_1;
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]

      break;
 8001e0a:	e00a      	b.n	8001e22 <USBD_CDC_VCP_Config+0x4a>

    case 2:

      /* Set the UART Stop bit to 2 */
      uart_handler->Init.StopBits = UART_STOPBITS_2;
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e14:	60da      	str	r2, [r3, #12]

      break;
 8001e16:	e004      	b.n	8001e22 <USBD_CDC_VCP_Config+0x4a>

    default :

      /* By default set the UART Stop bit to 1 */
      uart_handler->Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]

      break;
 8001e20:	bf00      	nop
  }

  /* Check parity parameter */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_parity)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	795b      	ldrb	r3, [r3, #5]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d011      	beq.n	8001e4e <USBD_CDC_VCP_Config+0x76>
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	dc15      	bgt.n	8001e5a <USBD_CDC_VCP_Config+0x82>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <USBD_CDC_VCP_Config+0x60>
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <USBD_CDC_VCP_Config+0x6a>
 8001e36:	e010      	b.n	8001e5a <USBD_CDC_VCP_Config+0x82>
  {
    case 0:

      /* Set the UART parity bit to none */
      uart_handler->Init.Parity = UART_PARITY_NONE;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]

      break;
 8001e40:	e010      	b.n	8001e64 <USBD_CDC_VCP_Config+0x8c>

    case 1:

      /* Set the UART parity bit to ODD */
      uart_handler->Init.Parity = UART_PARITY_ODD;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001e4a:	611a      	str	r2, [r3, #16]

      break;
 8001e4c:	e00a      	b.n	8001e64 <USBD_CDC_VCP_Config+0x8c>

    case 2:

      /* Set the UART parity bit to even */
      uart_handler->Init.Parity = UART_PARITY_EVEN;
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	611a      	str	r2, [r3, #16]

      break;
 8001e58:	e004      	b.n	8001e64 <USBD_CDC_VCP_Config+0x8c>

    default :

      /* By default set the UART parity bit to none */
      uart_handler->Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]

      break;
 8001e62:	bf00      	nop
  }

  /* Set the UART data type : only 8bits and 9bits is supported */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_data_bit)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	799b      	ldrb	r3, [r3, #6]
 8001e68:	2b07      	cmp	r3, #7
 8001e6a:	d002      	beq.n	8001e72 <USBD_CDC_VCP_Config+0x9a>
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d005      	beq.n	8001e7c <USBD_CDC_VCP_Config+0xa4>
 8001e70:	e014      	b.n	8001e9c <USBD_CDC_VCP_Config+0xc4>
  {
    case 0x07:

      /* With this configuration a parity (Even or Odd) must be set */
      uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]

      break;
 8001e7a:	e014      	b.n	8001ea6 <USBD_CDC_VCP_Config+0xce>

    case 0x08:

      if (uart_handler->Init.Parity == UART_PARITY_NONE)
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <USBD_CDC_VCP_Config+0xb8>
      {
        uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
      else
      {
        uart_handler->Init.WordLength = UART_WORDLENGTH_9B;
      }

      break;
 8001e8e:	e00a      	b.n	8001ea6 <USBD_CDC_VCP_Config+0xce>
        uart_handler->Init.WordLength = UART_WORDLENGTH_9B;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e98:	609a      	str	r2, [r3, #8]
      break;
 8001e9a:	e004      	b.n	8001ea6 <USBD_CDC_VCP_Config+0xce>

    default :

      uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]

      break;
 8001ea4:	bf00      	nop
  }

  /* Get the UART baudrate from vcp */
  uart_handler->Init.BaudRate = CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_baudrate;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* Set the UART Hw flow control to none */
  uart_handler->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Set the UART mode */
  uart_handler->Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	615a      	str	r2, [r3, #20]

  /* Set the UART sampling */
  uart_handler->Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]

  /* Initialization UART */
  if (HAL_UART_Init(uart_handler) != HAL_OK)
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f009 fc49 	bl	800b764 <HAL_UART_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <USBD_CDC_VCP_Config+0x104>
  {
    /* Initialization Error */
    Error_Handler();
 8001ed8:	f7fe ff8e 	bl	8000df8 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(uart_handler, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <USBD_CDC_VCP_Config+0x120>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <USBD_CDC_VCP_Config+0x124>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	@ (8001f00 <USBD_CDC_VCP_Config+0x128>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	f009 fcca 	bl	800b884 <HAL_UART_Receive_IT>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24001240 	.word	0x24001240
 8001efc:	24001238 	.word	0x24001238
 8001f00:	24000a38 	.word	0x24000a38

08001f04 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d113      	bne.n	8001f42 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <USBD_Get_Device_Framework_Speed+0x70>)
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4a15      	ldr	r2, [pc, #84]	@ (8001f78 <USBD_Get_Device_Framework_Speed+0x74>)
 8001f22:	4816      	ldr	r0, [pc, #88]	@ (8001f7c <USBD_Get_Device_Framework_Speed+0x78>)
 8001f24:	f000 f9a0 	bl	8002268 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <USBD_Get_Device_Framework_Speed+0x78>)
 8001f2a:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <USBD_Get_Device_Framework_Speed+0x78>)
 8001f30:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001f34:	441a      	add	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <USBD_Get_Device_Framework_Speed+0x70>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e012      	b.n	8001f68 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <USBD_Get_Device_Framework_Speed+0x7c>)
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <USBD_Get_Device_Framework_Speed+0x74>)
 8001f4a:	480e      	ldr	r0, [pc, #56]	@ (8001f84 <USBD_Get_Device_Framework_Speed+0x80>)
 8001f4c:	f000 f98c 	bl	8002268 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <USBD_Get_Device_Framework_Speed+0x80>)
 8001f52:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <USBD_Get_Device_Framework_Speed+0x80>)
 8001f58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001f5c:	441a      	add	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <USBD_Get_Device_Framework_Speed+0x7c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 8001f68:	68fb      	ldr	r3, [r7, #12]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24000018 	.word	0x24000018
 8001f78:	24000008 	.word	0x24000008
 8001f7c:	24001244 	.word	0x24001244
 8001f80:	2400001c 	.word	0x2400001c
 8001f84:	2400136c 	.word	0x2400136c

08001f88 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	73fa      	strb	r2, [r7, #15]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001fa2:	2109      	movs	r1, #9
 8001fa4:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	73fa      	strb	r2, [r7, #15]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	73fa      	strb	r2, [r7, #15]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f107 020c 	add.w	r2, r7, #12
 8001fcc:	4619      	mov	r1, r3
 8001fce:	482d      	ldr	r0, [pc, #180]	@ (8002084 <USBD_Get_String_Framework+0xfc>)
 8001fd0:	f000 f8fd 	bl	80021ce <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8001fd4:	89bb      	ldrh	r3, [r7, #12]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	73fa      	strb	r2, [r7, #15]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001fec:	2109      	movs	r1, #9
 8001fee:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	73fa      	strb	r2, [r7, #15]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	73fa      	strb	r2, [r7, #15]
 8002004:	461a      	mov	r2, r3
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8002008:	2102      	movs	r1, #2
 800200a:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8002010:	4413      	add	r3, r2
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	4619      	mov	r1, r3
 8002018:	481b      	ldr	r0, [pc, #108]	@ (8002088 <USBD_Get_String_Framework+0x100>)
 800201a:	f000 f8d8 	bl	80021ce <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800201e:	89bb      	ldrh	r3, [r7, #12]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	4413      	add	r3, r2
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	73fa      	strb	r2, [r7, #15]
 8002032:	461a      	mov	r2, r3
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8002036:	2109      	movs	r1, #9
 8002038:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	73fa      	strb	r2, [r7, #15]
 8002040:	461a      	mov	r2, r3
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8002044:	2104      	movs	r1, #4
 8002046:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	73fa      	strb	r2, [r7, #15]
 800204e:	461a      	mov	r2, r3
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 8002052:	2103      	movs	r1, #3
 8002054:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 800205a:	4413      	add	r3, r2
 800205c:	f107 020c 	add.w	r2, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	480a      	ldr	r0, [pc, #40]	@ (800208c <USBD_Get_String_Framework+0x104>)
 8002064:	f000 f8b3 	bl	80021ce <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8002068:	4805      	ldr	r0, [pc, #20]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
 800206a:	f7fe fa55 	bl	8000518 <strlen>
 800206e:	4602      	mov	r2, r0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8002074:	4b02      	ldr	r3, [pc, #8]	@ (8002080 <USBD_Get_String_Framework+0xf8>)
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	24001624 	.word	0x24001624
 8002084:	08018b60 	.word	0x08018b60
 8002088:	08018b74 	.word	0x08018b74
 800208c:	08018b90 	.word	0x08018b90

08002090 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	73fa      	strb	r2, [r7, #15]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <USBD_Get_Language_Id_Framework+0x40>)
 80020a6:	2109      	movs	r1, #9
 80020a8:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	73fa      	strb	r2, [r7, #15]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <USBD_Get_Language_Id_Framework+0x40>)
 80020b4:	2104      	movs	r1, #4
 80020b6:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 80020b8:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <USBD_Get_Language_Id_Framework+0x40>)
 80020ba:	f7fe fa2d 	bl	8000518 <strlen>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 80020c4:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <USBD_Get_Language_Id_Framework+0x40>)
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24001724 	.word	0x24001724

080020d4 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	460a      	mov	r2, r1
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]
 80020f0:	e021      	b.n	8002136 <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	4a15      	ldr	r2, [pc, #84]	@ (800214c <USBD_Get_Interface_Number+0x78>)
 80020f6:	215c      	movs	r1, #92	@ 0x5c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	330c      	adds	r3, #12
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d113      	bne.n	8002130 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	4a10      	ldr	r2, [pc, #64]	@ (800214c <USBD_Get_Interface_Number+0x78>)
 800210c:	215c      	movs	r1, #92	@ 0x5c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3314      	adds	r3, #20
 8002116:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8002118:	79ba      	ldrb	r2, [r7, #6]
 800211a:	429a      	cmp	r2, r3
 800211c:	d108      	bne.n	8002130 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800211e:	7bbb      	ldrb	r3, [r7, #14]
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <USBD_Get_Interface_Number+0x78>)
 8002122:	215c      	movs	r1, #92	@ 0x5c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	335a      	adds	r3, #90	@ 0x5a
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	3301      	adds	r3, #1
 8002134:	73bb      	strb	r3, [r7, #14]
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d9da      	bls.n	80020f2 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29b      	uxth	r3, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	24001244 	.word	0x24001244

08002150 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29b      	uxth	r3, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <USBD_HID_ReportDesc>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Pointer to HID Report Descriptor buffer
  */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pHidReportDesc = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN HidReportDesc0 */

  /* USER CODE END HidReportDesc0 */

  switch(hid_type)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <USBD_HID_ReportDesc+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <USBD_HID_ReportDesc+0x2c>)
 800218a:	60fb      	str	r3, [r7, #12]
      break;
 800218c:	e000      	b.n	8002190 <USBD_HID_ReportDesc+0x1c>

    default:
      break;
 800218e:	bf00      	nop

  /* USER CODE BEGIN HidReportDesc1 */

  /* USER CODE END HidReportDesc1 */

  return pHidReportDesc;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	24000020 	.word	0x24000020

080021a4 <USBD_HID_ReportDesc_length>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Size of HID Report Descriptor buffer
  */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  uint16_t ReportDesc_Size = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	81fb      	strh	r3, [r7, #14]

  /* USER CODE BEGIN ReportDesc_Size0 */

  /* USER CODE END ReportDesc_Size0 */

  switch(hid_type)
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d102      	bne.n	80021be <USBD_HID_ReportDesc_length+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      ReportDesc_Size = sizeof(USBD_HID_MOUSE_ReportDesc);
 80021b8:	234a      	movs	r3, #74	@ 0x4a
 80021ba:	81fb      	strh	r3, [r7, #14]
      break;
 80021bc:	e000      	b.n	80021c0 <USBD_HID_ReportDesc_length+0x1c>

    default:
      break;
 80021be:	bf00      	nop

  /* USER CODE BEGIN ReportDesc_Size1 */

  /* USER CODE END ReportDesc_Size1 */

  return ReportDesc_Size;
 80021c0:	89fb      	ldrh	r3, [r7, #14]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 80021e8:	6938      	ldr	r0, [r7, #16]
 80021ea:	f000 f823 	bl	8002234 <USBD_Desc_GetLen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	75fa      	strb	r2, [r7, #23]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4413      	add	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8002208:	e00b      	b.n	8002222 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	75fa      	strb	r2, [r7, #23]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3301      	adds	r3, #1
 8002220:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ef      	bne.n	800220a <USBD_Desc_GetString+0x3c>
 800222a:	e000      	b.n	800222e <USBD_Desc_GetString+0x60>
    return;
 800222c:	bf00      	nop
  }
}
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8002244:	e005      	b.n	8002252 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f5      	bne.n	8002246 <USBD_Desc_GetLen+0x12>
  }

  return len;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800228a:	4a73      	ldr	r2, [pc, #460]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8002290:	4b71      	ldr	r3, [pc, #452]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2212      	movs	r2, #18
 8002296:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8002298:	4b6f      	ldr	r3, [pc, #444]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80022a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	709a      	strb	r2, [r3, #2]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f042 0202 	orr.w	r2, r2, #2
 80022ae:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 80022b0:	4b69      	ldr	r3, [pc, #420]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80022b8:	4b67      	ldr	r3, [pc, #412]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80022c0:	4b65      	ldr	r3, [pc, #404]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80022c8:	4b63      	ldr	r3, [pc, #396]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2240      	movs	r2, #64	@ 0x40
 80022ce:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 80022d0:	4b61      	ldr	r3, [pc, #388]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 80022da:	721a      	strb	r2, [r3, #8]
 80022dc:	2200      	movs	r2, #0
 80022de:	f042 0204 	orr.w	r2, r2, #4
 80022e2:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 80022e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80022ee:	729a      	strb	r2, [r3, #10]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 80022f6:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 80022f8:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	731a      	strb	r2, [r3, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f042 0202 	orr.w	r2, r2, #2
 8002306:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8002310:	4b51      	ldr	r3, [pc, #324]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2202      	movs	r2, #2
 8002316:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8002318:	4b4f      	ldr	r3, [pc, #316]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2203      	movs	r2, #3
 800231e:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800232e:	f103 0212 	add.w	r2, r3, #18
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d162      	bne.n	8002404 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4413      	add	r3, r2
 8002348:	4a44      	ldr	r2, [pc, #272]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800234a:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800234c:	4b43      	ldr	r3, [pc, #268]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	220a      	movs	r2, #10
 8002352:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8002354:	4b41      	ldr	r3, [pc, #260]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2206      	movs	r2, #6
 800235a:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800235c:	4b3f      	ldr	r3, [pc, #252]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	709a      	strb	r2, [r3, #2]
 8002364:	2200      	movs	r2, #0
 8002366:	f042 0202 	orr.w	r2, r2, #2
 800236a:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800236c:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8002374:	4b39      	ldr	r3, [pc, #228]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800237c:	4b37      	ldr	r3, [pc, #220]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8002384:	4b35      	ldr	r3, [pc, #212]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2240      	movs	r2, #64	@ 0x40
 800238a:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800238c:	4b33      	ldr	r3, [pc, #204]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8002394:	4b31      	ldr	r3, [pc, #196]	@ (800245c <USBD_Device_Framework_Builder+0x1f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80023a2:	f103 020a 	add.w	r2, r3, #10
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80023ac:	e02a      	b.n	8002404 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d823      	bhi.n	80023fe <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d81f      	bhi.n	80023fe <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 80023d0:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4413      	add	r3, r2
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f83b 	bl	8002460 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	3301      	adds	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d9d1      	bls.n	80023ae <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d90c      	bls.n	800242c <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	22ef      	movs	r2, #239	@ 0xef
 8002418:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	719a      	strb	r2, [r3, #6]
 800242a:	e00f      	b.n	800244c <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d10b      	bne.n	800244c <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2202      	movs	r2, #2
 800243a:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2202      	movs	r2, #2
 8002442:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <USBD_Device_Framework_Builder+0x1f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800244c:	68bb      	ldr	r3, [r7, #8]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	24001728 	.word	0x24001728
 800245c:	2400172c 	.word	0x2400172c

08002460 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	70fb      	strb	r3, [r7, #3]
 8002472:	460b      	mov	r3, r1
 8002474:	70bb      	strb	r3, [r7, #2]
 8002476:	4613      	mov	r3, r2
 8002478:	707b      	strb	r3, [r7, #1]
  static uint8_t interface_idx = 0U;

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d853      	bhi.n	800252a <USBD_FrameWork_AddClass+0xca>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	215c      	movs	r1, #92	@ 0x5c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3318      	adds	r3, #24
 8002492:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	d148      	bne.n	800252a <USBD_FrameWork_AddClass+0xca>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6852      	ldr	r2, [r2, #4]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	205c      	movs	r0, #92	@ 0x5c
 80024a4:	fb00 f303 	mul.w	r3, r0, r3
 80024a8:	440b      	add	r3, r1
 80024aa:	3310      	adds	r3, #16
 80024ac:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	215c      	movs	r1, #92	@ 0x5c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3318      	adds	r3, #24
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	215c      	movs	r1, #92	@ 0x5c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	330c      	adds	r3, #12
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	701a      	strb	r2, [r3, #0]

    if (class == CLASS_TYPE_HID)
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11b      	bne.n	8002514 <USBD_FrameWork_AddClass+0xb4>
    {
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 80024dc:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <USBD_FrameWork_AddClass+0xd4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a14      	ldr	r2, [pc, #80]	@ (8002538 <USBD_FrameWork_AddClass+0xd8>)
 80024e8:	5c50      	ldrb	r0, [r2, r1]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	215c      	movs	r1, #92	@ 0x5c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3314      	adds	r3, #20
 80024f6:	4602      	mov	r2, r0
 80024f8:	701a      	strb	r2, [r3, #0]

      interface_idx++;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <USBD_FrameWork_AddClass+0xd4>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <USBD_FrameWork_AddClass+0xd4>)
 8002504:	701a      	strb	r2, [r3, #0]

      if (interface_idx == sizeof(UserHIDInterface))
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <USBD_FrameWork_AddClass+0xd4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d102      	bne.n	8002514 <USBD_FrameWork_AddClass+0xb4>
      {
        interface_idx = 0U;
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <USBD_FrameWork_AddClass+0xd4>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f80e 	bl	800253c <USBD_FrameWork_AddToConfDesc>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <USBD_FrameWork_AddClass+0xca>
    {
      return UX_ERROR;
 8002526:	23ff      	movs	r3, #255	@ 0xff
 8002528:	e000      	b.n	800252c <USBD_FrameWork_AddClass+0xcc>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	24001730 	.word	0x24001730
 8002538:	24000014 	.word	0x24000014

0800253c <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	460b      	mov	r3, r1
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	7afa      	ldrb	r2, [r7, #11]
 8002552:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 f8ed 	bl	8002746 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	215c      	movs	r1, #92	@ 0x5c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	330c      	adds	r3, #12
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <USBD_FrameWork_AddToConfDesc+0x4c>
 8002582:	2b02      	cmp	r3, #2
 8002584:	d04a      	beq.n	800261c <USBD_FrameWork_AddToConfDesc+0xe0>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 8002586:	e0ac      	b.n	80026e2 <USBD_FrameWork_AddToConfDesc+0x1a6>
      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	215c      	movs	r1, #92	@ 0x5c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3314      	adds	r3, #20
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d13c      	bne.n	8002618 <USBD_FrameWork_AddToConfDesc+0xdc>
          interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f8a4 	bl	80026ec <USBD_FrameWork_FindFreeIFNbr>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	215c      	movs	r1, #92	@ 0x5c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3320      	adds	r3, #32
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	215c      	movs	r1, #92	@ 0x5c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	335a      	adds	r3, #90	@ 0x5a
 80025cc:	7dfa      	ldrb	r2, [r7, #23]
 80025ce:	701a      	strb	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	215c      	movs	r1, #92	@ 0x5c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	331c      	adds	r3, #28
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
          if (pdev->Speed == USBD_HIGH_SPEED)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <USBD_FrameWork_AddToConfDesc+0xbe>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 80025ec:	2304      	movs	r3, #4
 80025ee:	2203      	movs	r2, #3
 80025f0:	2183      	movs	r1, #131	@ 0x83
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8d4 	bl	80027a0 <USBD_FrameWork_AssignEp>
 80025f8:	e005      	b.n	8002606 <USBD_FrameWork_AddToConfDesc+0xca>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 80025fa:	2304      	movs	r3, #4
 80025fc:	2203      	movs	r2, #3
 80025fe:	2183      	movs	r1, #131	@ 0x83
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f8cd 	bl	80027a0 <USBD_FrameWork_AssignEp>
          USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800260e:	461a      	mov	r2, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f939 	bl	8002888 <USBD_FrameWork_HID_Desc>
          break;
 8002616:	e000      	b.n	800261a <USBD_FrameWork_AddToConfDesc+0xde>
          break;
 8002618:	bf00      	nop
      break;
 800261a:	e062      	b.n	80026e2 <USBD_FrameWork_AddToConfDesc+0x1a6>
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f865 	bl	80026ec <USBD_FrameWork_FindFreeIFNbr>
 8002622:	4603      	mov	r3, r0
 8002624:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	215c      	movs	r1, #92	@ 0x5c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3320      	adds	r3, #32
 8002636:	2202      	movs	r2, #2
 8002638:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	215c      	movs	r1, #92	@ 0x5c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	335a      	adds	r3, #90	@ 0x5a
 800264a:	7dfa      	ldrb	r2, [r7, #23]
 800264c:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	7dfa      	ldrb	r2, [r7, #23]
 8002654:	3201      	adds	r2, #1
 8002656:	b2d0      	uxtb	r0, r2
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	215c      	movs	r1, #92	@ 0x5c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	335b      	adds	r3, #91	@ 0x5b
 8002664:	4602      	mov	r2, r0
 8002666:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	215c      	movs	r1, #92	@ 0x5c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	331c      	adds	r3, #28
 8002678:	2203      	movs	r2, #3
 800267a:	601a      	str	r2, [r3, #0]
      if (Speed == USBD_HIGH_SPEED)
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d114      	bne.n	80026ac <USBD_FrameWork_AddToConfDesc+0x170>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8002682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002686:	2202      	movs	r2, #2
 8002688:	2101      	movs	r1, #1
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f888 	bl	80027a0 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8002690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002694:	2202      	movs	r2, #2
 8002696:	2181      	movs	r1, #129	@ 0x81
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f881 	bl	80027a0 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800269e:	2308      	movs	r3, #8
 80026a0:	2203      	movs	r2, #3
 80026a2:	2182      	movs	r1, #130	@ 0x82
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f87b 	bl	80027a0 <USBD_FrameWork_AssignEp>
 80026aa:	e011      	b.n	80026d0 <USBD_FrameWork_AddToConfDesc+0x194>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 80026ac:	2340      	movs	r3, #64	@ 0x40
 80026ae:	2202      	movs	r2, #2
 80026b0:	2101      	movs	r1, #1
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f874 	bl	80027a0 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 80026b8:	2340      	movs	r3, #64	@ 0x40
 80026ba:	2202      	movs	r2, #2
 80026bc:	2181      	movs	r1, #129	@ 0x81
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f86e 	bl	80027a0 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 80026c4:	2308      	movs	r3, #8
 80026c6:	2203      	movs	r2, #3
 80026c8:	2182      	movs	r1, #130	@ 0x82
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f868 	bl	80027a0 <USBD_FrameWork_AssignEp>
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80026d8:	461a      	mov	r2, r3
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f9f2 	bl	8002ac4 <USBD_FrameWork_CDCDesc>
      break;
 80026e0:	bf00      	nop
  }

  return UX_SUCCESS;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e016      	b.n	800272c <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e005      	b.n	8002710 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	215c      	movs	r1, #92	@ 0x5c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3320      	adds	r3, #32
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3ee      	bcc.n	8002704 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	429a      	cmp	r2, r3
 8002734:	d3e3      	bcc.n	80026fe <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	b2db      	uxtb	r3, r3
}
 800273a:	4618      	mov	r0, r3
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2209      	movs	r2, #9
 8002758:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	709a      	strb	r2, [r3, #2]
 8002766:	2200      	movs	r2, #0
 8002768:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22c0      	movs	r2, #192	@ 0xc0
 8002780:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2219      	movs	r2, #25
 8002786:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f103 0209 	add.w	r2, r3, #9
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	601a      	str	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 80027a0:	b490      	push	{r4, r7}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	72fb      	strb	r3, [r7, #11]
 80027ae:	4613      	mov	r3, r2
 80027b0:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80027b6:	e002      	b.n	80027be <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3301      	adds	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	215c      	movs	r1, #92	@ 0x5c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	331c      	adds	r3, #28
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6858      	ldr	r0, [r3, #4]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	225c      	movs	r2, #92	@ 0x5c
 80027e8:	fb00 f202 	mul.w	r2, r0, r2
 80027ec:	4413      	add	r3, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	3328      	adds	r3, #40	@ 0x28
 80027f2:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1df      	bne.n	80027b8 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6858      	ldr	r0, [r3, #4]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	225c      	movs	r2, #92	@ 0x5c
 800280a:	fb00 f202 	mul.w	r2, r0, r2
 800280e:	4413      	add	r3, r2
 8002810:	440b      	add	r3, r1
 8002812:	3324      	adds	r3, #36	@ 0x24
 8002814:	7afa      	ldrb	r2, [r7, #11]
 8002816:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6858      	ldr	r0, [r3, #4]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	225c      	movs	r2, #92	@ 0x5c
 800282a:	fb00 f202 	mul.w	r2, r0, r2
 800282e:	4413      	add	r3, r2
 8002830:	440b      	add	r3, r1
 8002832:	3325      	adds	r3, #37	@ 0x25
 8002834:	7aba      	ldrb	r2, [r7, #10]
 8002836:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6858      	ldr	r0, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	b29c      	uxth	r4, r3
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	225c      	movs	r2, #92	@ 0x5c
 800284e:	fb00 f202 	mul.w	r2, r0, r2
 8002852:	4413      	add	r3, r2
 8002854:	440b      	add	r3, r1
 8002856:	3326      	adds	r3, #38	@ 0x26
 8002858:	4622      	mov	r2, r4
 800285a:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6858      	ldr	r0, [r3, #4]
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	225c      	movs	r2, #92	@ 0x5c
 800286e:	fb00 f202 	mul.w	r2, r0, r2
 8002872:	4413      	add	r3, r2
 8002874:	440b      	add	r3, r1
 8002876:	3328      	adds	r3, #40	@ 0x28
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bc90      	pop	{r4, r7}
 8002884:	4770      	bx	lr
	...

08002888 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidDesc;

  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	215c      	movs	r1, #92	@ 0x5c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3314      	adds	r3, #20
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f040 80f5 	bne.w	8002a96 <USBD_FrameWork_HID_Desc+0x20e>

#if USBD_HID_MOUSE_ACTIVATED == 1U
    case INTERFACE_HID_MOUSE:

      /* Append HID Interface descriptor to Configuration descriptor */
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4413      	add	r3, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b80      	ldr	r3, [pc, #512]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2209      	movs	r2, #9
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2204      	movs	r2, #4
 80028c8:	705a      	strb	r2, [r3, #1]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	205c      	movs	r0, #92	@ 0x5c
 80028d6:	fb00 f202 	mul.w	r2, r0, r2
 80028da:	440a      	add	r2, r1
 80028dc:	325a      	adds	r2, #90	@ 0x5a
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	709a      	strb	r2, [r3, #2]
 80028e2:	4b75      	ldr	r3, [pc, #468]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	70da      	strb	r2, [r3, #3]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	215c      	movs	r1, #92	@ 0x5c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	331c      	adds	r3, #28
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	711a      	strb	r2, [r3, #4]
 8002904:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2203      	movs	r2, #3
 800290a:	715a      	strb	r2, [r3, #5]
 800290c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	719a      	strb	r2, [r3, #6]
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	71da      	strb	r2, [r3, #7]
 800291c:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <USBD_FrameWork_HID_Desc+0x230>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	721a      	strb	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f103 0209 	add.w	r2, r3, #9
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	601a      	str	r2, [r3, #0]
                              (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                              UX_DEVICE_CLASS_HID_CLASS,
                              0x01U, INTERFACE_HID_MOUSE, 0U);

      /* Append HID Functional descriptor to Configuration descriptor */
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4b60      	ldr	r3, [pc, #384]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 800293c:	601a      	str	r2, [r3, #0]
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 800293e:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2209      	movs	r2, #9
 8002944:	701a      	strb	r2, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 8002946:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2221      	movs	r2, #33	@ 0x21
 800294c:	705a      	strb	r2, [r3, #1]
      pHidDesc->bcdHID = 0x0111U;
 800294e:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	f042 0211 	orr.w	r2, r2, #17
 8002958:	709a      	strb	r2, [r3, #2]
 800295a:	2200      	movs	r2, #0
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	70da      	strb	r2, [r3, #3]
      pHidDesc->bCountryCode = 0x00U;
 8002962:	4b56      	ldr	r3, [pc, #344]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	711a      	strb	r2, [r3, #4]
      pHidDesc->bNumDescriptors = 0x01U;
 800296a:	4b54      	ldr	r3, [pc, #336]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	715a      	strb	r2, [r3, #5]
      pHidDesc->bHIDDescriptorType = 0x22U;
 8002972:	4b52      	ldr	r3, [pc, #328]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2222      	movs	r2, #34	@ 0x22
 8002978:	719a      	strb	r2, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 800297a:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <USBD_FrameWork_HID_Desc+0x234>)
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	2002      	movs	r0, #2
 8002980:	f7ff fc10 	bl	80021a4 <USBD_HID_ReportDesc_length>
 8002984:	4603      	mov	r3, r0
 8002986:	f8a4 3007 	strh.w	r3, [r4, #7]
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f103 0209 	add.w	r2, r3, #9
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]

      if (pdev->Speed == USBD_HIGH_SPEED)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d13d      	bne.n	8002a1a <USBD_FrameWork_HID_Desc+0x192>
      {
        /* Append Endpoint descriptor to Configuration descriptor */
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4413      	add	r3, r2
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b45      	ldr	r3, [pc, #276]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2207      	movs	r2, #7
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	4b42      	ldr	r3, [pc, #264]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2205      	movs	r2, #5
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	205c      	movs	r0, #92	@ 0x5c
 80029c8:	fb00 f202 	mul.w	r2, r0, r2
 80029cc:	440a      	add	r2, r1
 80029ce:	3224      	adds	r2, #36	@ 0x24
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	709a      	strb	r2, [r3, #2]
 80029d4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2203      	movs	r2, #3
 80029da:	70da      	strb	r2, [r3, #3]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	205c      	movs	r0, #92	@ 0x5c
 80029e8:	fb00 f202 	mul.w	r2, r0, r2
 80029ec:	440a      	add	r2, r1
 80029ee:	3226      	adds	r2, #38	@ 0x26
 80029f0:	8812      	ldrh	r2, [r2, #0]
 80029f2:	809a      	strh	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d104      	bne.n	8002a06 <USBD_FrameWork_HID_Desc+0x17e>
 80029fc:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2205      	movs	r2, #5
 8002a02:	719a      	strb	r2, [r3, #6]
 8002a04:	e003      	b.n	8002a0e <USBD_FrameWork_HID_Desc+0x186>
 8002a06:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	719a      	strb	r2, [r3, #6]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1dda      	adds	r2, r3, #7
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                                USBD_HID_MOUSE_EPIN_HS_BINTERVAL,
                                USBD_HID_MOUSE_EPIN_FS_BINTERVAL);
      }

      break;
 8002a18:	e03e      	b.n	8002a98 <USBD_FrameWork_HID_Desc+0x210>
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	4b23      	ldr	r3, [pc, #140]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2205      	movs	r2, #5
 8002a36:	705a      	strb	r2, [r3, #1]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	205c      	movs	r0, #92	@ 0x5c
 8002a44:	fb00 f202 	mul.w	r2, r0, r2
 8002a48:	440a      	add	r2, r1
 8002a4a:	3224      	adds	r2, #36	@ 0x24
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	709a      	strb	r2, [r3, #2]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2203      	movs	r2, #3
 8002a56:	70da      	strb	r2, [r3, #3]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	205c      	movs	r0, #92	@ 0x5c
 8002a64:	fb00 f202 	mul.w	r2, r0, r2
 8002a68:	440a      	add	r2, r1
 8002a6a:	3226      	adds	r2, #38	@ 0x26
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	809a      	strh	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d104      	bne.n	8002a82 <USBD_FrameWork_HID_Desc+0x1fa>
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	719a      	strb	r2, [r3, #6]
 8002a80:	e003      	b.n	8002a8a <USBD_FrameWork_HID_Desc+0x202>
 8002a82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <USBD_FrameWork_HID_Desc+0x238>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2205      	movs	r2, #5
 8002a88:	719a      	strb	r2, [r3, #6]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1dda      	adds	r2, r3, #7
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
      break;
 8002a94:	e000      	b.n	8002a98 <USBD_FrameWork_HID_Desc+0x210>
#endif /* USBD_HID_MOUSE_ACTIVATED == 1U */

    default:
      break;
 8002a96:	bf00      	nop
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	791a      	ldrb	r2, [r3, #4]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3201      	adds	r2, #1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	805a      	strh	r2, [r3, #2]

}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	24001734 	.word	0x24001734
 8002abc:	24001738 	.word	0x24001738
 8002ac0:	2400173c 	.word	0x2400173c

08002ac4 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b99      	ldr	r3, [pc, #612]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002adc:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 8002ade:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8002ae6:	4b96      	ldr	r3, [pc, #600]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	220b      	movs	r2, #11
 8002aec:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4b93      	ldr	r3, [pc, #588]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	205c      	movs	r0, #92	@ 0x5c
 8002afa:	fb00 f202 	mul.w	r2, r0, r2
 8002afe:	440a      	add	r2, r1
 8002b00:	325a      	adds	r2, #90	@ 0x5a
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8002b06:	4b8e      	ldr	r3, [pc, #568]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2202      	movs	r2, #2
 8002b14:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8002b16:	4b8a      	ldr	r3, [pc, #552]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 8002b26:	4b86      	ldr	r3, [pc, #536]	@ (8002d40 <USBD_FrameWork_CDCDesc+0x27c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f103 0208 	add.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	4b7e      	ldr	r3, [pc, #504]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2209      	movs	r2, #9
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	4b7c      	ldr	r3, [pc, #496]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2204      	movs	r2, #4
 8002b56:	705a      	strb	r2, [r3, #1]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b79      	ldr	r3, [pc, #484]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	205c      	movs	r0, #92	@ 0x5c
 8002b64:	fb00 f202 	mul.w	r2, r0, r2
 8002b68:	440a      	add	r2, r1
 8002b6a:	325a      	adds	r2, #90	@ 0x5a
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	709a      	strb	r2, [r3, #2]
 8002b70:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	70da      	strb	r2, [r3, #3]
 8002b78:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	711a      	strb	r2, [r3, #4]
 8002b80:	4b70      	ldr	r3, [pc, #448]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2202      	movs	r2, #2
 8002b86:	715a      	strb	r2, [r3, #5]
 8002b88:	4b6e      	ldr	r3, [pc, #440]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	719a      	strb	r2, [r3, #6]
 8002b90:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	71da      	strb	r2, [r3, #7]
 8002b98:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <USBD_FrameWork_CDCDesc+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	721a      	strb	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f103 0209 	add.w	r2, r3, #9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b64      	ldr	r3, [pc, #400]	@ (8002d48 <USBD_FrameWork_CDCDesc+0x284>)
 8002bb8:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8002bba:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <USBD_FrameWork_CDCDesc+0x284>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2205      	movs	r2, #5
 8002bc0:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8002bc2:	4b61      	ldr	r3, [pc, #388]	@ (8002d48 <USBD_FrameWork_CDCDesc+0x284>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8002bca:	4b5f      	ldr	r3, [pc, #380]	@ (8002d48 <USBD_FrameWork_CDCDesc+0x284>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d48 <USBD_FrameWork_CDCDesc+0x284>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f042 0210 	orr.w	r2, r2, #16
 8002bdc:	70da      	strb	r2, [r3, #3]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1d5a      	adds	r2, r3, #5
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b54      	ldr	r3, [pc, #336]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002bfc:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8002bfe:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2205      	movs	r2, #5
 8002c04:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8002c06:	4b51      	ldr	r3, [pc, #324]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8002c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8002c16:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <USBD_FrameWork_CDCDesc+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	205c      	movs	r0, #92	@ 0x5c
 8002c2a:	fb00 f202 	mul.w	r2, r0, r2
 8002c2e:	440a      	add	r2, r1
 8002c30:	325b      	adds	r2, #91	@ 0x5b
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1d5a      	adds	r2, r3, #5
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4413      	add	r3, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <USBD_FrameWork_CDCDesc+0x28c>)
 8002c4c:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8002c4e:	4b40      	ldr	r3, [pc, #256]	@ (8002d50 <USBD_FrameWork_CDCDesc+0x28c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8002c56:	4b3e      	ldr	r3, [pc, #248]	@ (8002d50 <USBD_FrameWork_CDCDesc+0x28c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2224      	movs	r2, #36	@ 0x24
 8002c5c:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <USBD_FrameWork_CDCDesc+0x28c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2202      	movs	r2, #2
 8002c64:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8002c66:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <USBD_FrameWork_CDCDesc+0x28c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1d1a      	adds	r2, r3, #4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4413      	add	r3, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b34      	ldr	r3, [pc, #208]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002c84:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8002c86:	4b33      	ldr	r3, [pc, #204]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8002c8e:	4b31      	ldr	r3, [pc, #196]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8002c96:	4b2f      	ldr	r3, [pc, #188]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	205c      	movs	r0, #92	@ 0x5c
 8002caa:	fb00 f202 	mul.w	r2, r0, r2
 8002cae:	440a      	add	r2, r1
 8002cb0:	325a      	adds	r2, #90	@ 0x5a
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4b26      	ldr	r3, [pc, #152]	@ (8002d54 <USBD_FrameWork_CDCDesc+0x290>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68f9      	ldr	r1, [r7, #12]
 8002cc0:	205c      	movs	r0, #92	@ 0x5c
 8002cc2:	fb00 f202 	mul.w	r2, r0, r2
 8002cc6:	440a      	add	r2, r1
 8002cc8:	325b      	adds	r2, #91	@ 0x5b
 8002cca:	7812      	ldrb	r2, [r2, #0]
 8002ccc:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1d5a      	adds	r2, r3, #5
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4413      	add	r3, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2207      	movs	r2, #7
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	705a      	strb	r2, [r3, #1]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	205c      	movs	r0, #92	@ 0x5c
 8002d02:	fb00 f202 	mul.w	r2, r0, r2
 8002d06:	440a      	add	r2, r1
 8002d08:	3230      	adds	r2, #48	@ 0x30
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	709a      	strb	r2, [r3, #2]
 8002d0e:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2203      	movs	r2, #3
 8002d14:	70da      	strb	r2, [r3, #3]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	205c      	movs	r0, #92	@ 0x5c
 8002d22:	fb00 f202 	mul.w	r2, r0, r2
 8002d26:	440a      	add	r2, r1
 8002d28:	3232      	adds	r2, #50	@ 0x32
 8002d2a:	8812      	ldrh	r2, [r2, #0]
 8002d2c:	809a      	strh	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d112      	bne.n	8002d5c <USBD_FrameWork_CDCDesc+0x298>
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <USBD_FrameWork_CDCDesc+0x294>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	719a      	strb	r2, [r3, #6]
 8002d3e:	e011      	b.n	8002d64 <USBD_FrameWork_CDCDesc+0x2a0>
 8002d40:	24001740 	.word	0x24001740
 8002d44:	24001744 	.word	0x24001744
 8002d48:	24001748 	.word	0x24001748
 8002d4c:	2400174c 	.word	0x2400174c
 8002d50:	24001750 	.word	0x24001750
 8002d54:	24001754 	.word	0x24001754
 8002d58:	24001758 	.word	0x24001758
 8002d5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2205      	movs	r2, #5
 8002d62:	719a      	strb	r2, [r3, #6]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1dda      	adds	r2, r3, #7
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4413      	add	r3, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2209      	movs	r2, #9
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	4b5d      	ldr	r3, [pc, #372]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	705a      	strb	r2, [r3, #1]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	205c      	movs	r0, #92	@ 0x5c
 8002d98:	fb00 f202 	mul.w	r2, r0, r2
 8002d9c:	440a      	add	r2, r1
 8002d9e:	325b      	adds	r2, #91	@ 0x5b
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	709a      	strb	r2, [r3, #2]
 8002da4:	4b55      	ldr	r3, [pc, #340]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	70da      	strb	r2, [r3, #3]
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	711a      	strb	r2, [r3, #4]
 8002db4:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	220a      	movs	r2, #10
 8002dba:	715a      	strb	r2, [r3, #5]
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	719a      	strb	r2, [r3, #6]
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	71da      	strb	r2, [r3, #7]
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <USBD_FrameWork_CDCDesc+0x438>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	721a      	strb	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f103 0209 	add.w	r2, r3, #9
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4413      	add	r3, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2207      	movs	r2, #7
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2205      	movs	r2, #5
 8002dfc:	705a      	strb	r2, [r3, #1]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	205c      	movs	r0, #92	@ 0x5c
 8002e0a:	fb00 f202 	mul.w	r2, r0, r2
 8002e0e:	440a      	add	r2, r1
 8002e10:	3224      	adds	r2, #36	@ 0x24
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	709a      	strb	r2, [r3, #2]
 8002e16:	4b38      	ldr	r3, [pc, #224]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	70da      	strb	r2, [r3, #3]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	205c      	movs	r0, #92	@ 0x5c
 8002e2a:	fb00 f202 	mul.w	r2, r0, r2
 8002e2e:	440a      	add	r2, r1
 8002e30:	3226      	adds	r2, #38	@ 0x26
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	809a      	strh	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d104      	bne.n	8002e48 <USBD_FrameWork_CDCDesc+0x384>
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	719a      	strb	r2, [r3, #6]
 8002e46:	e003      	b.n	8002e50 <USBD_FrameWork_CDCDesc+0x38c>
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	719a      	strb	r2, [r3, #6]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1dda      	adds	r2, r3, #7
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2205      	movs	r2, #5
 8002e76:	705a      	strb	r2, [r3, #1]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	205c      	movs	r0, #92	@ 0x5c
 8002e84:	fb00 f202 	mul.w	r2, r0, r2
 8002e88:	440a      	add	r2, r1
 8002e8a:	322a      	adds	r2, #42	@ 0x2a
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	709a      	strb	r2, [r3, #2]
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	70da      	strb	r2, [r3, #3]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	205c      	movs	r0, #92	@ 0x5c
 8002ea4:	fb00 f202 	mul.w	r2, r0, r2
 8002ea8:	440a      	add	r2, r1
 8002eaa:	322c      	adds	r2, #44	@ 0x2c
 8002eac:	8812      	ldrh	r2, [r2, #0]
 8002eae:	809a      	strh	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d104      	bne.n	8002ec2 <USBD_FrameWork_CDCDesc+0x3fe>
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	719a      	strb	r2, [r3, #6]
 8002ec0:	e003      	b.n	8002eca <USBD_FrameWork_CDCDesc+0x406>
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <USBD_FrameWork_CDCDesc+0x434>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	719a      	strb	r2, [r3, #6]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1dda      	adds	r2, r3, #7
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	791a      	ldrb	r2, [r3, #4]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3202      	adds	r2, #2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	805a      	strh	r2, [r3, #2]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	24001758 	.word	0x24001758
 8002efc:	24001744 	.word	0x24001744

08002f00 <USBD_HID_Mouse_Activate>:
  *         This function is called when insertion of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Activate(VOID *hid_instance)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Activate */

  /* Save the HID mouse instance */
  hid_mouse = (UX_SLAVE_CLASS_HID*) hid_instance;
 8002f08:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <USBD_HID_Mouse_Activate+0x1c>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USBD_HID_Mouse_Activate */

  return;
 8002f0e:	bf00      	nop
}
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2400175c 	.word	0x2400175c

08002f20 <USBD_HID_Mouse_Deactivate>:
  *         This function is called when extraction of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Deactivate(VOID *hid_instance)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);

  /* Reset the HID mouse instance */
  hid_mouse = UX_NULL;
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <USBD_HID_Mouse_Deactivate+0x1c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBD_HID_Mouse_Deactivate */

  return;
 8002f2e:	bf00      	nop
}
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2400175c 	.word	0x2400175c

08002f40 <USBD_HID_Mouse_SetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_SetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_SetReport */

  return status;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <USBD_HID_Mouse_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_GetReport */

  return status;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <usbx_hid_thread_entry>:
  * @brief  Function implementing usbx_hid_thread_entry.
  * @param  thread_input: Not used
  * @retval none
  */
VOID usbx_hid_thread_entry(ULONG thread_input)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	@ 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UX_SLAVE_DEVICE *device;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  UX_PARAMETER_NOT_USED(thread_input);

  device = &_ux_system_slave->ux_system_slave_device;
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <usbx_hid_thread_entry+0x68>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3320      	adds	r3, #32
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34

  ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	222c      	movs	r2, #44	@ 0x2c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f011 fa6b 	bl	801446c <_ux_utility_memory_set>

  while (1)
  {
    /* Check if the device state already configured */
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d11c      	bne.n	8002fd8 <usbx_hid_thread_entry+0x60>
 8002f9e:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <usbx_hid_thread_entry+0x6c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <usbx_hid_thread_entry+0x60>
    {
      /* sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f00e ff8a 	bl	8011ec0 <_tx_thread_sleep>

      /* Check if user button is pressed */
      if (User_Button_State != 0U)
 8002fac:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <usbx_hid_thread_entry+0x70>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <usbx_hid_thread_entry+0x66>
      {
        /* Get the new position */
        GetPointerData(&hid_event);
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f816 	bl	8002fec <GetPointerData>

        /* Send an event to the hid */
        ux_device_class_hid_event_set(hid_mouse, &hid_event);
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <usbx_hid_thread_entry+0x6c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f107 0208 	add.w	r2, r7, #8
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f012 fa22 	bl	8015414 <_ux_device_class_hid_event_set>

        /* Reset User Button state */
        User_Button_State = 0U;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <usbx_hid_thread_entry+0x70>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
      if (User_Button_State != 0U)
 8002fd6:	e002      	b.n	8002fde <usbx_hid_thread_entry+0x66>
      }
    }
    else
    {
      /* Sleep thread for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f00e ff71 	bl	8011ec0 <_tx_thread_sleep>
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 8002fde:	e7da      	b.n	8002f96 <usbx_hid_thread_entry+0x1e>
 8002fe0:	24001dac 	.word	0x24001dac
 8002fe4:	2400175c 	.word	0x2400175c
 8002fe8:	24001760 	.word	0x24001760

08002fec <GetPointerData>:
  *         Gets Pointer Data.
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval None
  */
static VOID GetPointerData(UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  static int8_t counter = 0;
  static int8_t x = 0, y = 0;

  /* Reset counter */
  if (counter == 16)
 8002ff4:	4b32      	ldr	r3, [pc, #200]	@ (80030c0 <GetPointerData+0xd4>)
 8002ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d102      	bne.n	8003004 <GetPointerData+0x18>
  {
    counter = 0;
 8002ffe:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <GetPointerData+0xd4>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
  }
  /* Update pointer position x and y */
  if ((counter >= 0) && (counter < 4))
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <GetPointerData+0xd4>)
 8003006:	f993 3000 	ldrsb.w	r3, [r3]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <GetPointerData+0x3a>
 800300e:	4b2c      	ldr	r3, [pc, #176]	@ (80030c0 <GetPointerData+0xd4>)
 8003010:	f993 3000 	ldrsb.w	r3, [r3]
 8003014:	2b03      	cmp	r3, #3
 8003016:	dc06      	bgt.n	8003026 <GetPointerData+0x3a>
  {
    y = 0;
 8003018:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <GetPointerData+0xd8>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
    x = CURSOR_STEP;
 800301e:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <GetPointerData+0xdc>)
 8003020:	220a      	movs	r2, #10
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e027      	b.n	8003076 <GetPointerData+0x8a>
  }
  else if ((counter >= 4) && (counter < 8))
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <GetPointerData+0xd4>)
 8003028:	f993 3000 	ldrsb.w	r3, [r3]
 800302c:	2b03      	cmp	r3, #3
 800302e:	dd0b      	ble.n	8003048 <GetPointerData+0x5c>
 8003030:	4b23      	ldr	r3, [pc, #140]	@ (80030c0 <GetPointerData+0xd4>)
 8003032:	f993 3000 	ldrsb.w	r3, [r3]
 8003036:	2b07      	cmp	r3, #7
 8003038:	dc06      	bgt.n	8003048 <GetPointerData+0x5c>
  {
    x = 0;
 800303a:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <GetPointerData+0xdc>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
    y = CURSOR_STEP;
 8003040:	4b20      	ldr	r3, [pc, #128]	@ (80030c4 <GetPointerData+0xd8>)
 8003042:	220a      	movs	r2, #10
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e016      	b.n	8003076 <GetPointerData+0x8a>
  }
  else if ((counter >= 8) && (counter < 12))
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <GetPointerData+0xd4>)
 800304a:	f993 3000 	ldrsb.w	r3, [r3]
 800304e:	2b07      	cmp	r3, #7
 8003050:	dd0b      	ble.n	800306a <GetPointerData+0x7e>
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <GetPointerData+0xd4>)
 8003054:	f993 3000 	ldrsb.w	r3, [r3]
 8003058:	2b0b      	cmp	r3, #11
 800305a:	dc06      	bgt.n	800306a <GetPointerData+0x7e>
  {
    y = 0;
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <GetPointerData+0xd8>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
    x = -CURSOR_STEP;
 8003062:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <GetPointerData+0xdc>)
 8003064:	22f6      	movs	r2, #246	@ 0xf6
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e005      	b.n	8003076 <GetPointerData+0x8a>
  }
  else
  {
    x = 0;
 800306a:	4b17      	ldr	r3, [pc, #92]	@ (80030c8 <GetPointerData+0xdc>)
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    y = -CURSOR_STEP;
 8003070:	4b14      	ldr	r3, [pc, #80]	@ (80030c4 <GetPointerData+0xd8>)
 8003072:	22f6      	movs	r2, #246	@ 0xf6
 8003074:	701a      	strb	r2, [r3, #0]
  }

  /* Increment counter */
  counter++;
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <GetPointerData+0xd4>)
 8003078:	f993 3000 	ldrsb.w	r3, [r3]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <GetPointerData+0xd4>)
 8003086:	701a      	strb	r2, [r3, #0]

  /* Mouse event. Length is fixed to 4 */
  hid_event->ux_device_class_hid_event_length = 4;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2204      	movs	r2, #4
 800308c:	609a      	str	r2, [r3, #8]

  /* Set select position */
  hid_event->ux_device_class_hid_event_buffer[0] = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	731a      	strb	r2, [r3, #12]

  /* Set X position */
  hid_event->ux_device_class_hid_event_buffer[1] = x;
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <GetPointerData+0xdc>)
 8003096:	f993 3000 	ldrsb.w	r3, [r3]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	735a      	strb	r2, [r3, #13]

  /* Set Y position */
  hid_event->ux_device_class_hid_event_buffer[2] = y;
 80030a0:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <GetPointerData+0xd8>)
 80030a2:	f993 3000 	ldrsb.w	r3, [r3]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	739a      	strb	r2, [r3, #14]

  /* Set wheel position */
  hid_event->ux_device_class_hid_event_buffer[3] = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	73da      	strb	r2, [r3, #15]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	24001761 	.word	0x24001761
 80030c4:	24001762 	.word	0x24001762
 80030c8:	24001763 	.word	0x24001763

080030cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030d0:	4b3d      	ldr	r3, [pc, #244]	@ (80031c8 <SystemInit+0xfc>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d6:	4a3c      	ldr	r2, [pc, #240]	@ (80031c8 <SystemInit+0xfc>)
 80030d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80030e0:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <SystemInit+0xfc>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4a38      	ldr	r2, [pc, #224]	@ (80031c8 <SystemInit+0xfc>)
 80030e6:	f043 0310 	orr.w	r3, r3, #16
 80030ea:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030ec:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <SystemInit+0x100>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d807      	bhi.n	8003108 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030f8:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <SystemInit+0x100>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	4a32      	ldr	r2, [pc, #200]	@ (80031cc <SystemInit+0x100>)
 8003102:	f043 0307 	orr.w	r3, r3, #7
 8003106:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003108:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <SystemInit+0x104>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a30      	ldr	r2, [pc, #192]	@ (80031d0 <SystemInit+0x104>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003114:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <SystemInit+0x104>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800311a:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <SystemInit+0x104>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	492c      	ldr	r1, [pc, #176]	@ (80031d0 <SystemInit+0x104>)
 8003120:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <SystemInit+0x108>)
 8003122:	4013      	ands	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003126:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <SystemInit+0x100>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003132:	4b26      	ldr	r3, [pc, #152]	@ (80031cc <SystemInit+0x100>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	4a24      	ldr	r2, [pc, #144]	@ (80031cc <SystemInit+0x100>)
 800313c:	f043 0307 	orr.w	r3, r3, #7
 8003140:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003142:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <SystemInit+0x104>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003148:	4b21      	ldr	r3, [pc, #132]	@ (80031d0 <SystemInit+0x104>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800314e:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <SystemInit+0x104>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003154:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <SystemInit+0x104>)
 8003156:	4a20      	ldr	r2, [pc, #128]	@ (80031d8 <SystemInit+0x10c>)
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800315a:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <SystemInit+0x104>)
 800315c:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <SystemInit+0x110>)
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <SystemInit+0x104>)
 8003162:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <SystemInit+0x114>)
 8003164:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <SystemInit+0x104>)
 8003168:	2200      	movs	r2, #0
 800316a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <SystemInit+0x104>)
 800316e:	4a1c      	ldr	r2, [pc, #112]	@ (80031e0 <SystemInit+0x114>)
 8003170:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <SystemInit+0x104>)
 8003174:	2200      	movs	r2, #0
 8003176:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003178:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <SystemInit+0x104>)
 800317a:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <SystemInit+0x114>)
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800317e:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <SystemInit+0x104>)
 8003180:	2200      	movs	r2, #0
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <SystemInit+0x104>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <SystemInit+0x104>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003190:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <SystemInit+0x104>)
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8003196:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <SystemInit+0x118>)
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	4a12      	ldr	r2, [pc, #72]	@ (80031e4 <SystemInit+0x118>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80031a2:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <SystemInit+0x11c>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <SystemInit+0x120>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ae:	d202      	bcs.n	80031b6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <SystemInit+0x124>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80031b6:	4b0f      	ldr	r3, [pc, #60]	@ (80031f4 <SystemInit+0x128>)
 80031b8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80031bc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00
 80031cc:	52002000 	.word	0x52002000
 80031d0:	58024400 	.word	0x58024400
 80031d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80031d8:	02020200 	.word	0x02020200
 80031dc:	01ff0000 	.word	0x01ff0000
 80031e0:	01010280 	.word	0x01010280
 80031e4:	580000c0 	.word	0x580000c0
 80031e8:	5c001000 	.word	0x5c001000
 80031ec:	ffff0000 	.word	0xffff0000
 80031f0:	51008108 	.word	0x51008108
 80031f4:	52004000 	.word	0x52004000

080031f8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <ExitRun0Mode+0x2c>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a08      	ldr	r2, [pc, #32]	@ (8003224 <ExitRun0Mode+0x2c>)
 8003202:	f023 0302 	bic.w	r3, r3, #2
 8003206:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003208:	bf00      	nop
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <ExitRun0Mode+0x2c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f9      	beq.n	800320a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	58024800 	.word	0x58024800

08003228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800322e:	2003      	movs	r0, #3
 8003230:	f000 f957 	bl	80034e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003234:	f005 fef4 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_Init+0x68>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4913      	ldr	r1, [pc, #76]	@ (8003294 <HAL_Init+0x6c>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <HAL_Init+0x68>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <HAL_Init+0x6c>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a0b      	ldr	r2, [pc, #44]	@ (8003298 <HAL_Init+0x70>)
 800326a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_Init+0x74>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fde8 	bl	8000e48 <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e002      	b.n	8003288 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003282:	f7fd fdc7 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	08018c54 	.word	0x08018c54
 8003298:	24000070 	.word	0x24000070
 800329c:	2400006c 	.word	0x2400006c

080032a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_IncTick+0x20>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_IncTick+0x24>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <HAL_IncTick+0x24>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	24000078 	.word	0x24000078
 80032c4:	24001764 	.word	0x24001764

080032c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return uwTick;
 80032cc:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_GetTick+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	24001764 	.word	0x24001764

080032e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e8:	f7ff ffee 	bl	80032c8 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d005      	beq.n	8003306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_Delay+0x44>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003306:	bf00      	nop
 8003308:	f7ff ffde 	bl	80032c8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8f7      	bhi.n	8003308 <HAL_Delay+0x28>
  {
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24000078 	.word	0x24000078

08003328 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_GetREVID+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0c1b      	lsrs	r3, r3, #16
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	5c001000 	.word	0x5c001000

08003340 <__NVIC_SetPriorityGrouping>:
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	05fa0000 	.word	0x05fa0000

08003388 <__NVIC_GetPriorityGrouping>:
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	@ (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_DisableIRQ>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	db12      	blt.n	8003418 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	490a      	ldr	r1, [pc, #40]	@ (8003424 <__NVIC_DisableIRQ+0x44>)
 80033fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2001      	movs	r0, #1
 8003402:	fa00 f202 	lsl.w	r2, r0, r2
 8003406:	3320      	adds	r3, #32
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800340c:	f3bf 8f4f 	dsb	sy
}
 8003410:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003412:	f3bf 8f6f 	isb	sy
}
 8003416:	bf00      	nop
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_SetPriority>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db0a      	blt.n	8003452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	490c      	ldr	r1, [pc, #48]	@ (8003474 <__NVIC_SetPriority+0x4c>)
 8003442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	440b      	add	r3, r1
 800344c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003450:	e00a      	b.n	8003468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4908      	ldr	r1, [pc, #32]	@ (8003478 <__NVIC_SetPriority+0x50>)
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3b04      	subs	r3, #4
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	440b      	add	r3, r1
 8003466:	761a      	strb	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <NVIC_EncodePriority>:
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	@ 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f1c3 0307 	rsb	r3, r3, #7
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf28      	it	cs
 800349a:	2304      	movcs	r3, #4
 800349c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d902      	bls.n	80034ac <NVIC_EncodePriority+0x30>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3b03      	subs	r3, #3
 80034aa:	e000      	b.n	80034ae <NVIC_EncodePriority+0x32>
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	401a      	ands	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c4:	f04f 31ff 	mov.w	r1, #4294967295
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43d9      	mvns	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	4313      	orrs	r3, r2
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	@ 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff28 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003506:	f7ff ff3f 	bl	8003388 <__NVIC_GetPriorityGrouping>
 800350a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff ffb3 	bl	800347c <NVIC_EncodePriority>
 8003516:	4602      	mov	r2, r0
 8003518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff82 	bl	8003428 <__NVIC_SetPriority>
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff32 	bl	80033a4 <__NVIC_EnableIRQ>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff42 	bl	80033e0 <__NVIC_DisableIRQ>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003568:	f3bf 8f5f 	dmb	sy
}
 800356c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_MPU_Disable+0x28>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	4a06      	ldr	r2, [pc, #24]	@ (800358c <HAL_MPU_Disable+0x28>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003578:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_MPU_Disable+0x2c>)
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00
 8003590:	e000ed90 	.word	0xe000ed90

08003594 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800359c:	4a0b      	ldr	r2, [pc, #44]	@ (80035cc <HAL_MPU_Enable+0x38>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_MPU_Enable+0x3c>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <HAL_MPU_Enable+0x3c>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035b2:	f3bf 8f4f 	dsb	sy
}
 80035b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035b8:	f3bf 8f6f 	isb	sy
}
 80035bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed90 	.word	0xe000ed90
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	785a      	ldrb	r2, [r3, #1]
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_MPU_ConfigRegion+0x7c>)
 80035e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80035e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_MPU_ConfigRegion+0x7c>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <HAL_MPU_ConfigRegion+0x7c>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80035f0:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <HAL_MPU_ConfigRegion+0x7c>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7b1b      	ldrb	r3, [r3, #12]
 80035fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7adb      	ldrb	r3, [r3, #11]
 8003602:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	7a9b      	ldrb	r3, [r3, #10]
 800360a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800360c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7b5b      	ldrb	r3, [r3, #13]
 8003612:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003614:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7b9b      	ldrb	r3, [r3, #14]
 800361a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800361c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7bdb      	ldrb	r3, [r3, #15]
 8003622:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003624:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7a5b      	ldrb	r3, [r3, #9]
 800362a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800362c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7a1b      	ldrb	r3, [r3, #8]
 8003632:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003634:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800363c:	4a04      	ldr	r2, [pc, #16]	@ (8003650 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800363e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003640:	6113      	str	r3, [r2, #16]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed90 	.word	0xe000ed90

08003654 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff fe34 	bl	80032c8 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e316      	b.n	8003c9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a66      	ldr	r2, [pc, #408]	@ (800380c <HAL_DMA_Init+0x1b8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_Init+0xb8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_DMA_Init+0x1bc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_Init+0xb8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a63      	ldr	r2, [pc, #396]	@ (8003814 <HAL_DMA_Init+0x1c0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_Init+0xb8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a62      	ldr	r2, [pc, #392]	@ (8003818 <HAL_DMA_Init+0x1c4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_Init+0xb8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a60      	ldr	r2, [pc, #384]	@ (800381c <HAL_DMA_Init+0x1c8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_Init+0xb8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003820 <HAL_DMA_Init+0x1cc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003824 <HAL_DMA_Init+0x1d0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003828 <HAL_DMA_Init+0x1d4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5a      	ldr	r2, [pc, #360]	@ (800382c <HAL_DMA_Init+0x1d8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a59      	ldr	r2, [pc, #356]	@ (8003830 <HAL_DMA_Init+0x1dc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a57      	ldr	r2, [pc, #348]	@ (8003834 <HAL_DMA_Init+0x1e0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a56      	ldr	r2, [pc, #344]	@ (8003838 <HAL_DMA_Init+0x1e4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a54      	ldr	r2, [pc, #336]	@ (800383c <HAL_DMA_Init+0x1e8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a53      	ldr	r2, [pc, #332]	@ (8003840 <HAL_DMA_Init+0x1ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_Init+0xb8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a51      	ldr	r2, [pc, #324]	@ (8003844 <HAL_DMA_Init+0x1f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_Init+0xb8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a50      	ldr	r2, [pc, #320]	@ (8003848 <HAL_DMA_Init+0x1f4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0xbc>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_DMA_Init+0xbe>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 813b 	beq.w	800398e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_DMA_Init+0x1b8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a36      	ldr	r2, [pc, #216]	@ (8003810 <HAL_DMA_Init+0x1bc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <HAL_DMA_Init+0x1c0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a33      	ldr	r2, [pc, #204]	@ (8003818 <HAL_DMA_Init+0x1c4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_DMA_Init+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <HAL_DMA_Init+0x1cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <HAL_DMA_Init+0x1d0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <HAL_DMA_Init+0x1d4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_DMA_Init+0x1d8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <HAL_DMA_Init+0x1dc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_DMA_Init+0x1e0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <HAL_DMA_Init+0x1e4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HAL_DMA_Init+0x1e8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_DMA_Init+0x1ec>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <HAL_DMA_Init+0x1f0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Init+0x174>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_DMA_Init+0x1f4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <HAL_DMA_Init+0x186>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e007      	b.n	80037ea <HAL_DMA_Init+0x196>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037ea:	e02f      	b.n	800384c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ec:	f7ff fd6c 	bl	80032c8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d928      	bls.n	800384c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e246      	b.n	8003c9a <HAL_DMA_Init+0x646>
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1c8      	bne.n	80037ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4b83      	ldr	r3, [pc, #524]	@ (8003a74 <HAL_DMA_Init+0x420>)
 8003866:	4013      	ands	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003872:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	2b04      	cmp	r3, #4
 800389e:	d107      	bne.n	80038b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	4313      	orrs	r3, r2
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80038b0:	4b71      	ldr	r3, [pc, #452]	@ (8003a78 <HAL_DMA_Init+0x424>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b71      	ldr	r3, [pc, #452]	@ (8003a7c <HAL_DMA_Init+0x428>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038bc:	d328      	bcc.n	8003910 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b28      	cmp	r3, #40	@ 0x28
 80038c4:	d903      	bls.n	80038ce <HAL_DMA_Init+0x27a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80038cc:	d917      	bls.n	80038fe <HAL_DMA_Init+0x2aa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80038d4:	d903      	bls.n	80038de <HAL_DMA_Init+0x28a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b42      	cmp	r3, #66	@ 0x42
 80038dc:	d90f      	bls.n	80038fe <HAL_DMA_Init+0x2aa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b46      	cmp	r3, #70	@ 0x46
 80038e4:	d903      	bls.n	80038ee <HAL_DMA_Init+0x29a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b48      	cmp	r3, #72	@ 0x48
 80038ec:	d907      	bls.n	80038fe <HAL_DMA_Init+0x2aa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80038f4:	d905      	bls.n	8003902 <HAL_DMA_Init+0x2ae>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b52      	cmp	r3, #82	@ 0x52
 80038fc:	d801      	bhi.n	8003902 <HAL_DMA_Init+0x2ae>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_DMA_Init+0x2b0>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	2b04      	cmp	r3, #4
 8003938:	d117      	bne.n	800396a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f002 fce9 	bl	8006324 <DMA_CheckFifoParam>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e197      	b.n	8003c9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f002 fc24 	bl	80061c0 <DMA_CalcBaseAndBitshift>
 8003978:	4603      	mov	r3, r0
 800397a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	223f      	movs	r2, #63	@ 0x3f
 8003986:	409a      	lsls	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	e0cd      	b.n	8003b2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3b      	ldr	r2, [pc, #236]	@ (8003a80 <HAL_DMA_Init+0x42c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_Init+0x38a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a39      	ldr	r2, [pc, #228]	@ (8003a84 <HAL_DMA_Init+0x430>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a38      	ldr	r2, [pc, #224]	@ (8003a88 <HAL_DMA_Init+0x434>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a36      	ldr	r2, [pc, #216]	@ (8003a8c <HAL_DMA_Init+0x438>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a35      	ldr	r2, [pc, #212]	@ (8003a90 <HAL_DMA_Init+0x43c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a33      	ldr	r2, [pc, #204]	@ (8003a94 <HAL_DMA_Init+0x440>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a32      	ldr	r2, [pc, #200]	@ (8003a98 <HAL_DMA_Init+0x444>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_Init+0x38a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a30      	ldr	r2, [pc, #192]	@ (8003a9c <HAL_DMA_Init+0x448>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_Init+0x38e>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_DMA_Init+0x390>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8097 	beq.w	8003b18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <HAL_DMA_Init+0x42c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d021      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_DMA_Init+0x430>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01c      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_DMA_Init+0x434>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d017      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_DMA_Init+0x438>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d012      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_DMA_Init+0x43c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00d      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <HAL_DMA_Init+0x440>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d008      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <HAL_DMA_Init+0x444>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_DMA_Init+0x3e4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_DMA_Init+0x448>)
 8003a36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <HAL_DMA_Init+0x44c>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	d021      	beq.n	8003aa4 <HAL_DMA_Init+0x450>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b80      	cmp	r3, #128	@ 0x80
 8003a66:	d102      	bne.n	8003a6e <HAL_DMA_Init+0x41a>
 8003a68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a6c:	e01b      	b.n	8003aa6 <HAL_DMA_Init+0x452>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e019      	b.n	8003aa6 <HAL_DMA_Init+0x452>
 8003a72:	bf00      	nop
 8003a74:	fe10803f 	.word	0xfe10803f
 8003a78:	5c001000 	.word	0x5c001000
 8003a7c:	ffff0000 	.word	0xffff0000
 8003a80:	58025408 	.word	0x58025408
 8003a84:	5802541c 	.word	0x5802541c
 8003a88:	58025430 	.word	0x58025430
 8003a8c:	58025444 	.word	0x58025444
 8003a90:	58025458 	.word	0x58025458
 8003a94:	5802546c 	.word	0x5802546c
 8003a98:	58025480 	.word	0x58025480
 8003a9c:	58025494 	.word	0x58025494
 8003aa0:	fffe000f 	.word	0xfffe000f
 8003aa4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ad4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b6e      	ldr	r3, [pc, #440]	@ (8003ca4 <HAL_DMA_Init+0x650>)
 8003aec:	4413      	add	r3, r2
 8003aee:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca8 <HAL_DMA_Init+0x654>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f002 fb5f 	bl	80061c0 <DMA_CalcBaseAndBitshift>
 8003b02:	4603      	mov	r3, r0
 8003b04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	e008      	b.n	8003b2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2240      	movs	r2, #64	@ 0x40
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2203      	movs	r2, #3
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0b7      	b.n	8003c9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cac <HAL_DMA_Init+0x658>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d072      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_DMA_Init+0x65c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d06d      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb4 <HAL_DMA_Init+0x660>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d068      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb8 <HAL_DMA_Init+0x664>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d063      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a59      	ldr	r2, [pc, #356]	@ (8003cbc <HAL_DMA_Init+0x668>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d05e      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_DMA_Init+0x66c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d059      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_DMA_Init+0x670>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d054      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a54      	ldr	r2, [pc, #336]	@ (8003cc8 <HAL_DMA_Init+0x674>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04f      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a53      	ldr	r2, [pc, #332]	@ (8003ccc <HAL_DMA_Init+0x678>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04a      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a51      	ldr	r2, [pc, #324]	@ (8003cd0 <HAL_DMA_Init+0x67c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d045      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a50      	ldr	r2, [pc, #320]	@ (8003cd4 <HAL_DMA_Init+0x680>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cd8 <HAL_DMA_Init+0x684>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_DMA_Init+0x688>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d036      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <HAL_DMA_Init+0x68c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <HAL_DMA_Init+0x690>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02c      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ce8 <HAL_DMA_Init+0x694>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d027      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a47      	ldr	r2, [pc, #284]	@ (8003cec <HAL_DMA_Init+0x698>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a45      	ldr	r2, [pc, #276]	@ (8003cf0 <HAL_DMA_Init+0x69c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a44      	ldr	r2, [pc, #272]	@ (8003cf4 <HAL_DMA_Init+0x6a0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	@ (8003cf8 <HAL_DMA_Init+0x6a4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a41      	ldr	r2, [pc, #260]	@ (8003cfc <HAL_DMA_Init+0x6a8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3f      	ldr	r2, [pc, #252]	@ (8003d00 <HAL_DMA_Init+0x6ac>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d04 <HAL_DMA_Init+0x6b0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_Init+0x5c6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3c      	ldr	r2, [pc, #240]	@ (8003d08 <HAL_DMA_Init+0x6b4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_DMA_Init+0x5ca>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_DMA_Init+0x5cc>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d032      	beq.n	8003c8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f002 fbf9 	bl	800641c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d102      	bne.n	8003c38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_DMA_Init+0x624>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d80c      	bhi.n	8003c78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f002 fc76 	bl	8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e008      	b.n	8003c8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	a7fdabf8 	.word	0xa7fdabf8
 8003ca8:	cccccccd 	.word	0xcccccccd
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	58025408 	.word	0x58025408
 8003cf0:	5802541c 	.word	0x5802541c
 8003cf4:	58025430 	.word	0x58025430
 8003cf8:	58025444 	.word	0x58025444
 8003cfc:	58025458 	.word	0x58025458
 8003d00:	5802546c 	.word	0x5802546c
 8003d04:	58025480 	.word	0x58025480
 8003d08:	58025494 	.word	0x58025494

08003d0c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1a8      	b.n	8004070 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a82      	ldr	r2, [pc, #520]	@ (8003f2c <HAL_DMA_DeInit+0x220>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04a      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a80      	ldr	r2, [pc, #512]	@ (8003f30 <HAL_DMA_DeInit+0x224>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d045      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <HAL_DMA_DeInit+0x228>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d040      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <HAL_DMA_DeInit+0x22c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03b      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_DMA_DeInit+0x230>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d036      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <HAL_DMA_DeInit+0x234>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d031      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_DMA_DeInit+0x238>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d02c      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <HAL_DMA_DeInit+0x23c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d027      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_DMA_DeInit+0x240>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <HAL_DMA_DeInit+0x244>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_DMA_DeInit+0x248>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <HAL_DMA_DeInit+0x24c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <HAL_DMA_DeInit+0x250>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_DeInit+0x254>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <HAL_DMA_DeInit+0x258>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_DeInit+0xb2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_DMA_DeInit+0x25c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <HAL_DMA_DeInit+0xc4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e007      	b.n	8003de0 <HAL_DMA_DeInit+0xd4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a51      	ldr	r2, [pc, #324]	@ (8003f2c <HAL_DMA_DeInit+0x220>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a50      	ldr	r2, [pc, #320]	@ (8003f30 <HAL_DMA_DeInit+0x224>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f34 <HAL_DMA_DeInit+0x228>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4d      	ldr	r2, [pc, #308]	@ (8003f38 <HAL_DMA_DeInit+0x22c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f3c <HAL_DMA_DeInit+0x230>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_DMA_DeInit+0x234>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a48      	ldr	r2, [pc, #288]	@ (8003f44 <HAL_DMA_DeInit+0x238>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a47      	ldr	r2, [pc, #284]	@ (8003f48 <HAL_DMA_DeInit+0x23c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a45      	ldr	r2, [pc, #276]	@ (8003f4c <HAL_DMA_DeInit+0x240>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a44      	ldr	r2, [pc, #272]	@ (8003f50 <HAL_DMA_DeInit+0x244>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a42      	ldr	r2, [pc, #264]	@ (8003f54 <HAL_DMA_DeInit+0x248>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a41      	ldr	r2, [pc, #260]	@ (8003f58 <HAL_DMA_DeInit+0x24c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f5c <HAL_DMA_DeInit+0x250>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3e      	ldr	r2, [pc, #248]	@ (8003f60 <HAL_DMA_DeInit+0x254>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3c      	ldr	r2, [pc, #240]	@ (8003f64 <HAL_DMA_DeInit+0x258>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_DeInit+0x174>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f68 <HAL_DMA_DeInit+0x25c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_DeInit+0x178>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_DMA_DeInit+0x17a>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d025      	beq.n	8003ed6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2221      	movs	r2, #33	@ 0x21
 8003eb8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f002 f980 	bl	80061c0 <DMA_CalcBaseAndBitshift>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	223f      	movs	r2, #63	@ 0x3f
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e081      	b.n	8003fda <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a24      	ldr	r2, [pc, #144]	@ (8003f6c <HAL_DMA_DeInit+0x260>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	@ (8003f70 <HAL_DMA_DeInit+0x264>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	@ (8003f74 <HAL_DMA_DeInit+0x268>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f78 <HAL_DMA_DeInit+0x26c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1e      	ldr	r2, [pc, #120]	@ (8003f7c <HAL_DMA_DeInit+0x270>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <HAL_DMA_DeInit+0x274>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <HAL_DMA_DeInit+0x278>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_DeInit+0x21a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a19      	ldr	r2, [pc, #100]	@ (8003f88 <HAL_DMA_DeInit+0x27c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d132      	bne.n	8003f8c <HAL_DMA_DeInit+0x280>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e031      	b.n	8003f8e <HAL_DMA_DeInit+0x282>
 8003f2a:	bf00      	nop
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d021      	beq.n	8003fd6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f002 f900 	bl	80061c0 <DMA_CalcBaseAndBitshift>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	e001      	b.n	8003fda <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e04a      	b.n	8004070 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f002 fa1e 	bl	800641c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ff8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00f      	beq.n	8004022 <HAL_DMA_DeInit+0x316>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d80b      	bhi.n	8004022 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f002 faa0 	bl	8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004020:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e226      	b.n	80044e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_DMA_Start_IT+0x2a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e21f      	b.n	80044e2 <HAL_DMA_Start_IT+0x46a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 820a 	bne.w	80044cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a68      	ldr	r2, [pc, #416]	@ (800426c <HAL_DMA_Start_IT+0x1f4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d04a      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a66      	ldr	r2, [pc, #408]	@ (8004270 <HAL_DMA_Start_IT+0x1f8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d045      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a65      	ldr	r2, [pc, #404]	@ (8004274 <HAL_DMA_Start_IT+0x1fc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d040      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a63      	ldr	r2, [pc, #396]	@ (8004278 <HAL_DMA_Start_IT+0x200>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d03b      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a62      	ldr	r2, [pc, #392]	@ (800427c <HAL_DMA_Start_IT+0x204>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d036      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a60      	ldr	r2, [pc, #384]	@ (8004280 <HAL_DMA_Start_IT+0x208>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5f      	ldr	r2, [pc, #380]	@ (8004284 <HAL_DMA_Start_IT+0x20c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d02c      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5d      	ldr	r2, [pc, #372]	@ (8004288 <HAL_DMA_Start_IT+0x210>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d027      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5c      	ldr	r2, [pc, #368]	@ (800428c <HAL_DMA_Start_IT+0x214>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5a      	ldr	r2, [pc, #360]	@ (8004290 <HAL_DMA_Start_IT+0x218>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a59      	ldr	r2, [pc, #356]	@ (8004294 <HAL_DMA_Start_IT+0x21c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a57      	ldr	r2, [pc, #348]	@ (8004298 <HAL_DMA_Start_IT+0x220>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a56      	ldr	r2, [pc, #344]	@ (800429c <HAL_DMA_Start_IT+0x224>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a54      	ldr	r2, [pc, #336]	@ (80042a0 <HAL_DMA_Start_IT+0x228>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a53      	ldr	r2, [pc, #332]	@ (80042a4 <HAL_DMA_Start_IT+0x22c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a51      	ldr	r2, [pc, #324]	@ (80042a8 <HAL_DMA_Start_IT+0x230>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <HAL_DMA_Start_IT+0x100>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e007      	b.n	8004188 <HAL_DMA_Start_IT+0x110>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f001 fe6a 	bl	8005e68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a34      	ldr	r2, [pc, #208]	@ (800426c <HAL_DMA_Start_IT+0x1f4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a33      	ldr	r2, [pc, #204]	@ (8004270 <HAL_DMA_Start_IT+0x1f8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a31      	ldr	r2, [pc, #196]	@ (8004274 <HAL_DMA_Start_IT+0x1fc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a30      	ldr	r2, [pc, #192]	@ (8004278 <HAL_DMA_Start_IT+0x200>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <HAL_DMA_Start_IT+0x204>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HAL_DMA_Start_IT+0x208>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_DMA_Start_IT+0x20c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2a      	ldr	r2, [pc, #168]	@ (8004288 <HAL_DMA_Start_IT+0x210>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_DMA_Start_IT+0x214>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <HAL_DMA_Start_IT+0x218>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_DMA_Start_IT+0x21c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <HAL_DMA_Start_IT+0x220>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_DMA_Start_IT+0x224>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <HAL_DMA_Start_IT+0x228>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_DMA_Start_IT+0x22c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1e      	ldr	r2, [pc, #120]	@ (80042a8 <HAL_DMA_Start_IT+0x230>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_DMA_Start_IT+0x1c0>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_DMA_Start_IT+0x1c2>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d036      	beq.n	80042ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 021e 	bic.w	r2, r3, #30
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0216 	orr.w	r2, r2, #22
 8004250:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d03e      	beq.n	80042d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0208 	orr.w	r2, r2, #8
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e035      	b.n	80042d8 <HAL_DMA_Start_IT+0x260>
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 020e 	bic.w	r2, r3, #14
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 020a 	orr.w	r2, r2, #10
 80042be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0204 	orr.w	r2, r2, #4
 80042d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a83      	ldr	r2, [pc, #524]	@ (80044ec <HAL_DMA_Start_IT+0x474>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d072      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a82      	ldr	r2, [pc, #520]	@ (80044f0 <HAL_DMA_Start_IT+0x478>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d06d      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a80      	ldr	r2, [pc, #512]	@ (80044f4 <HAL_DMA_Start_IT+0x47c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d068      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7f      	ldr	r2, [pc, #508]	@ (80044f8 <HAL_DMA_Start_IT+0x480>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d063      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7d      	ldr	r2, [pc, #500]	@ (80044fc <HAL_DMA_Start_IT+0x484>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d05e      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7c      	ldr	r2, [pc, #496]	@ (8004500 <HAL_DMA_Start_IT+0x488>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d059      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7a      	ldr	r2, [pc, #488]	@ (8004504 <HAL_DMA_Start_IT+0x48c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d054      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a79      	ldr	r2, [pc, #484]	@ (8004508 <HAL_DMA_Start_IT+0x490>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d04f      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a77      	ldr	r2, [pc, #476]	@ (800450c <HAL_DMA_Start_IT+0x494>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a76      	ldr	r2, [pc, #472]	@ (8004510 <HAL_DMA_Start_IT+0x498>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a74      	ldr	r2, [pc, #464]	@ (8004514 <HAL_DMA_Start_IT+0x49c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	@ (8004518 <HAL_DMA_Start_IT+0x4a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a71      	ldr	r2, [pc, #452]	@ (800451c <HAL_DMA_Start_IT+0x4a4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a70      	ldr	r2, [pc, #448]	@ (8004520 <HAL_DMA_Start_IT+0x4a8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6e      	ldr	r2, [pc, #440]	@ (8004524 <HAL_DMA_Start_IT+0x4ac>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6d      	ldr	r2, [pc, #436]	@ (8004528 <HAL_DMA_Start_IT+0x4b0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6b      	ldr	r2, [pc, #428]	@ (800452c <HAL_DMA_Start_IT+0x4b4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6a      	ldr	r2, [pc, #424]	@ (8004530 <HAL_DMA_Start_IT+0x4b8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a68      	ldr	r2, [pc, #416]	@ (8004534 <HAL_DMA_Start_IT+0x4bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a67      	ldr	r2, [pc, #412]	@ (8004538 <HAL_DMA_Start_IT+0x4c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a65      	ldr	r2, [pc, #404]	@ (800453c <HAL_DMA_Start_IT+0x4c4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a64      	ldr	r2, [pc, #400]	@ (8004540 <HAL_DMA_Start_IT+0x4c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a62      	ldr	r2, [pc, #392]	@ (8004544 <HAL_DMA_Start_IT+0x4cc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a61      	ldr	r2, [pc, #388]	@ (8004548 <HAL_DMA_Start_IT+0x4d0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_DMA_Start_IT+0x354>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_DMA_Start_IT+0x356>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01a      	beq.n	8004408 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004406:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a37      	ldr	r2, [pc, #220]	@ (80044ec <HAL_DMA_Start_IT+0x474>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d04a      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a36      	ldr	r2, [pc, #216]	@ (80044f0 <HAL_DMA_Start_IT+0x478>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d045      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a34      	ldr	r2, [pc, #208]	@ (80044f4 <HAL_DMA_Start_IT+0x47c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a33      	ldr	r2, [pc, #204]	@ (80044f8 <HAL_DMA_Start_IT+0x480>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d03b      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <HAL_DMA_Start_IT+0x484>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a30      	ldr	r2, [pc, #192]	@ (8004500 <HAL_DMA_Start_IT+0x488>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <HAL_DMA_Start_IT+0x48c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2d      	ldr	r2, [pc, #180]	@ (8004508 <HAL_DMA_Start_IT+0x490>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d027      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <HAL_DMA_Start_IT+0x494>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2a      	ldr	r2, [pc, #168]	@ (8004510 <HAL_DMA_Start_IT+0x498>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <HAL_DMA_Start_IT+0x49c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a27      	ldr	r2, [pc, #156]	@ (8004518 <HAL_DMA_Start_IT+0x4a0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a25      	ldr	r2, [pc, #148]	@ (800451c <HAL_DMA_Start_IT+0x4a4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <HAL_DMA_Start_IT+0x4a8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a22      	ldr	r2, [pc, #136]	@ (8004524 <HAL_DMA_Start_IT+0x4ac>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <HAL_DMA_Start_IT+0x4b0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_DMA_Start_IT+0x442>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e012      	b.n	80044e0 <HAL_DMA_Start_IT+0x468>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e009      	b.n	80044e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	40020040 	.word	0x40020040
 80044f8:	40020058 	.word	0x40020058
 80044fc:	40020070 	.word	0x40020070
 8004500:	40020088 	.word	0x40020088
 8004504:	400200a0 	.word	0x400200a0
 8004508:	400200b8 	.word	0x400200b8
 800450c:	40020410 	.word	0x40020410
 8004510:	40020428 	.word	0x40020428
 8004514:	40020440 	.word	0x40020440
 8004518:	40020458 	.word	0x40020458
 800451c:	40020470 	.word	0x40020470
 8004520:	40020488 	.word	0x40020488
 8004524:	400204a0 	.word	0x400204a0
 8004528:	400204b8 	.word	0x400204b8
 800452c:	58025408 	.word	0x58025408
 8004530:	5802541c 	.word	0x5802541c
 8004534:	58025430 	.word	0x58025430
 8004538:	58025444 	.word	0x58025444
 800453c:	58025458 	.word	0x58025458
 8004540:	5802546c 	.word	0x5802546c
 8004544:	58025480 	.word	0x58025480
 8004548:	58025494 	.word	0x58025494

0800454c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004554:	f7fe feb8 	bl	80032c8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e2dc      	b.n	8004b1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d008      	beq.n	8004582 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e2cd      	b.n	8004b1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a76      	ldr	r2, [pc, #472]	@ (8004760 <HAL_DMA_Abort+0x214>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a74      	ldr	r2, [pc, #464]	@ (8004764 <HAL_DMA_Abort+0x218>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a73      	ldr	r2, [pc, #460]	@ (8004768 <HAL_DMA_Abort+0x21c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a71      	ldr	r2, [pc, #452]	@ (800476c <HAL_DMA_Abort+0x220>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a70      	ldr	r2, [pc, #448]	@ (8004770 <HAL_DMA_Abort+0x224>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004774 <HAL_DMA_Abort+0x228>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004778 <HAL_DMA_Abort+0x22c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6b      	ldr	r2, [pc, #428]	@ (800477c <HAL_DMA_Abort+0x230>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004780 <HAL_DMA_Abort+0x234>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	@ (8004784 <HAL_DMA_Abort+0x238>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_DMA_Abort+0x23c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_DMA_Abort+0x240>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <HAL_DMA_Abort+0x244>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a62      	ldr	r2, [pc, #392]	@ (8004794 <HAL_DMA_Abort+0x248>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a61      	ldr	r2, [pc, #388]	@ (8004798 <HAL_DMA_Abort+0x24c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_Abort+0xd6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5f      	ldr	r2, [pc, #380]	@ (800479c <HAL_DMA_Abort+0x250>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_DMA_Abort+0xda>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_DMA_Abort+0xdc>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 021e 	bic.w	r2, r2, #30
 800463a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800464a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e00a      	b.n	800466a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020e 	bic.w	r2, r2, #14
 8004662:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <HAL_DMA_Abort+0x214>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d072      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3a      	ldr	r2, [pc, #232]	@ (8004764 <HAL_DMA_Abort+0x218>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d06d      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a39      	ldr	r2, [pc, #228]	@ (8004768 <HAL_DMA_Abort+0x21c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d068      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a37      	ldr	r2, [pc, #220]	@ (800476c <HAL_DMA_Abort+0x220>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d063      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a36      	ldr	r2, [pc, #216]	@ (8004770 <HAL_DMA_Abort+0x224>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d05e      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a34      	ldr	r2, [pc, #208]	@ (8004774 <HAL_DMA_Abort+0x228>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d059      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a33      	ldr	r2, [pc, #204]	@ (8004778 <HAL_DMA_Abort+0x22c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d054      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a31      	ldr	r2, [pc, #196]	@ (800477c <HAL_DMA_Abort+0x230>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d04f      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a30      	ldr	r2, [pc, #192]	@ (8004780 <HAL_DMA_Abort+0x234>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004784 <HAL_DMA_Abort+0x238>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004788 <HAL_DMA_Abort+0x23c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <HAL_DMA_Abort+0x240>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_DMA_Abort+0x244>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a28      	ldr	r2, [pc, #160]	@ (8004794 <HAL_DMA_Abort+0x248>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <HAL_DMA_Abort+0x24c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a25      	ldr	r2, [pc, #148]	@ (800479c <HAL_DMA_Abort+0x250>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <HAL_DMA_Abort+0x254>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <HAL_DMA_Abort+0x258>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <HAL_DMA_Abort+0x25c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ac <HAL_DMA_Abort+0x260>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <HAL_DMA_Abort+0x264>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <HAL_DMA_Abort+0x268>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1b      	ldr	r2, [pc, #108]	@ (80047b8 <HAL_DMA_Abort+0x26c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_DMA_Abort+0x20e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a19      	ldr	r2, [pc, #100]	@ (80047bc <HAL_DMA_Abort+0x270>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d132      	bne.n	80047c0 <HAL_DMA_Abort+0x274>
 800475a:	2301      	movs	r3, #1
 800475c:	e031      	b.n	80047c2 <HAL_DMA_Abort+0x276>
 800475e:	bf00      	nop
 8004760:	40020010 	.word	0x40020010
 8004764:	40020028 	.word	0x40020028
 8004768:	40020040 	.word	0x40020040
 800476c:	40020058 	.word	0x40020058
 8004770:	40020070 	.word	0x40020070
 8004774:	40020088 	.word	0x40020088
 8004778:	400200a0 	.word	0x400200a0
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020410 	.word	0x40020410
 8004784:	40020428 	.word	0x40020428
 8004788:	40020440 	.word	0x40020440
 800478c:	40020458 	.word	0x40020458
 8004790:	40020470 	.word	0x40020470
 8004794:	40020488 	.word	0x40020488
 8004798:	400204a0 	.word	0x400204a0
 800479c:	400204b8 	.word	0x400204b8
 80047a0:	58025408 	.word	0x58025408
 80047a4:	5802541c 	.word	0x5802541c
 80047a8:	58025430 	.word	0x58025430
 80047ac:	58025444 	.word	0x58025444
 80047b0:	58025458 	.word	0x58025458
 80047b4:	5802546c 	.word	0x5802546c
 80047b8:	58025480 	.word	0x58025480
 80047bc:	58025494 	.word	0x58025494
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6d      	ldr	r2, [pc, #436]	@ (8004990 <HAL_DMA_Abort+0x444>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d04a      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004994 <HAL_DMA_Abort+0x448>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d045      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004998 <HAL_DMA_Abort+0x44c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d040      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a68      	ldr	r2, [pc, #416]	@ (800499c <HAL_DMA_Abort+0x450>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d03b      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a67      	ldr	r2, [pc, #412]	@ (80049a0 <HAL_DMA_Abort+0x454>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d036      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a65      	ldr	r2, [pc, #404]	@ (80049a4 <HAL_DMA_Abort+0x458>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d031      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a64      	ldr	r2, [pc, #400]	@ (80049a8 <HAL_DMA_Abort+0x45c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d02c      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a62      	ldr	r2, [pc, #392]	@ (80049ac <HAL_DMA_Abort+0x460>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d027      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a61      	ldr	r2, [pc, #388]	@ (80049b0 <HAL_DMA_Abort+0x464>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a5f      	ldr	r2, [pc, #380]	@ (80049b4 <HAL_DMA_Abort+0x468>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01d      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5e      	ldr	r2, [pc, #376]	@ (80049b8 <HAL_DMA_Abort+0x46c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5c      	ldr	r2, [pc, #368]	@ (80049bc <HAL_DMA_Abort+0x470>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5b      	ldr	r2, [pc, #364]	@ (80049c0 <HAL_DMA_Abort+0x474>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a59      	ldr	r2, [pc, #356]	@ (80049c4 <HAL_DMA_Abort+0x478>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a58      	ldr	r2, [pc, #352]	@ (80049c8 <HAL_DMA_Abort+0x47c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_DMA_Abort+0x32a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a56      	ldr	r2, [pc, #344]	@ (80049cc <HAL_DMA_Abort+0x480>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <HAL_DMA_Abort+0x33c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e007      	b.n	8004898 <HAL_DMA_Abort+0x34c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004898:	e013      	b.n	80048c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800489a:	f7fe fd15 	bl	80032c8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d90c      	bls.n	80048c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2203      	movs	r2, #3
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e12d      	b.n	8004b1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004990 <HAL_DMA_Abort+0x444>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_Abort+0x422>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <HAL_DMA_Abort+0x448>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_Abort+0x422>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004998 <HAL_DMA_Abort+0x44c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_Abort+0x422>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	@ (800499c <HAL_DMA_Abort+0x450>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_Abort+0x422>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a29      	ldr	r2, [pc, #164]	@ (80049a0 <HAL_DMA_Abort+0x454>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <HAL_DMA_Abort+0x458>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_Abort+0x422>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <HAL_DMA_Abort+0x45c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a24      	ldr	r2, [pc, #144]	@ (80049ac <HAL_DMA_Abort+0x460>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_Abort+0x422>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a23      	ldr	r2, [pc, #140]	@ (80049b0 <HAL_DMA_Abort+0x464>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <HAL_DMA_Abort+0x468>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a20      	ldr	r2, [pc, #128]	@ (80049b8 <HAL_DMA_Abort+0x46c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_Abort+0x422>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <HAL_DMA_Abort+0x470>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <HAL_DMA_Abort+0x474>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <HAL_DMA_Abort+0x478>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_Abort+0x422>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1a      	ldr	r2, [pc, #104]	@ (80049c8 <HAL_DMA_Abort+0x47c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_Abort+0x422>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_DMA_Abort+0x480>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_DMA_Abort+0x426>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_DMA_Abort+0x428>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02b      	beq.n	80049d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	223f      	movs	r2, #63	@ 0x3f
 8004988:	409a      	lsls	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	609a      	str	r2, [r3, #8]
 800498e:	e02a      	b.n	80049e6 <HAL_DMA_Abort+0x49a>
 8004990:	40020010 	.word	0x40020010
 8004994:	40020028 	.word	0x40020028
 8004998:	40020040 	.word	0x40020040
 800499c:	40020058 	.word	0x40020058
 80049a0:	40020070 	.word	0x40020070
 80049a4:	40020088 	.word	0x40020088
 80049a8:	400200a0 	.word	0x400200a0
 80049ac:	400200b8 	.word	0x400200b8
 80049b0:	40020410 	.word	0x40020410
 80049b4:	40020428 	.word	0x40020428
 80049b8:	40020440 	.word	0x40020440
 80049bc:	40020458 	.word	0x40020458
 80049c0:	40020470 	.word	0x40020470
 80049c4:	40020488 	.word	0x40020488
 80049c8:	400204a0 	.word	0x400204a0
 80049cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004b28 <HAL_DMA_Abort+0x5dc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d072      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b2c <HAL_DMA_Abort+0x5e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d06d      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004b30 <HAL_DMA_Abort+0x5e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d068      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	@ (8004b34 <HAL_DMA_Abort+0x5e8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d063      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a49      	ldr	r2, [pc, #292]	@ (8004b38 <HAL_DMA_Abort+0x5ec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d05e      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a47      	ldr	r2, [pc, #284]	@ (8004b3c <HAL_DMA_Abort+0x5f0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d059      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a46      	ldr	r2, [pc, #280]	@ (8004b40 <HAL_DMA_Abort+0x5f4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d054      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a44      	ldr	r2, [pc, #272]	@ (8004b44 <HAL_DMA_Abort+0x5f8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04f      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a43      	ldr	r2, [pc, #268]	@ (8004b48 <HAL_DMA_Abort+0x5fc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d04a      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a41      	ldr	r2, [pc, #260]	@ (8004b4c <HAL_DMA_Abort+0x600>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d045      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	@ (8004b50 <HAL_DMA_Abort+0x604>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d040      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a3e      	ldr	r2, [pc, #248]	@ (8004b54 <HAL_DMA_Abort+0x608>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d03b      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a3d      	ldr	r2, [pc, #244]	@ (8004b58 <HAL_DMA_Abort+0x60c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d036      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b5c <HAL_DMA_Abort+0x610>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3a      	ldr	r2, [pc, #232]	@ (8004b60 <HAL_DMA_Abort+0x614>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d02c      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_DMA_Abort+0x618>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d027      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a37      	ldr	r2, [pc, #220]	@ (8004b68 <HAL_DMA_Abort+0x61c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a35      	ldr	r2, [pc, #212]	@ (8004b6c <HAL_DMA_Abort+0x620>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a34      	ldr	r2, [pc, #208]	@ (8004b70 <HAL_DMA_Abort+0x624>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a32      	ldr	r2, [pc, #200]	@ (8004b74 <HAL_DMA_Abort+0x628>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a31      	ldr	r2, [pc, #196]	@ (8004b78 <HAL_DMA_Abort+0x62c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a2f      	ldr	r2, [pc, #188]	@ (8004b7c <HAL_DMA_Abort+0x630>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8004b80 <HAL_DMA_Abort+0x634>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_DMA_Abort+0x58a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <HAL_DMA_Abort+0x638>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_DMA_Abort+0x58e>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_DMA_Abort+0x590>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ae8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00c      	beq.n	8004b0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40020010 	.word	0x40020010
 8004b2c:	40020028 	.word	0x40020028
 8004b30:	40020040 	.word	0x40020040
 8004b34:	40020058 	.word	0x40020058
 8004b38:	40020070 	.word	0x40020070
 8004b3c:	40020088 	.word	0x40020088
 8004b40:	400200a0 	.word	0x400200a0
 8004b44:	400200b8 	.word	0x400200b8
 8004b48:	40020410 	.word	0x40020410
 8004b4c:	40020428 	.word	0x40020428
 8004b50:	40020440 	.word	0x40020440
 8004b54:	40020458 	.word	0x40020458
 8004b58:	40020470 	.word	0x40020470
 8004b5c:	40020488 	.word	0x40020488
 8004b60:	400204a0 	.word	0x400204a0
 8004b64:	400204b8 	.word	0x400204b8
 8004b68:	58025408 	.word	0x58025408
 8004b6c:	5802541c 	.word	0x5802541c
 8004b70:	58025430 	.word	0x58025430
 8004b74:	58025444 	.word	0x58025444
 8004b78:	58025458 	.word	0x58025458
 8004b7c:	5802546c 	.word	0x5802546c
 8004b80:	58025480 	.word	0x58025480
 8004b84:	58025494 	.word	0x58025494

08004b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e237      	b.n	800500a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2280      	movs	r2, #128	@ 0x80
 8004baa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e22c      	b.n	800500a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d28 <HAL_DMA_Abort_IT+0x1a0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d04a      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004d2c <HAL_DMA_Abort_IT+0x1a4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d045      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a59      	ldr	r2, [pc, #356]	@ (8004d30 <HAL_DMA_Abort_IT+0x1a8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d040      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a58      	ldr	r2, [pc, #352]	@ (8004d34 <HAL_DMA_Abort_IT+0x1ac>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d03b      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a56      	ldr	r2, [pc, #344]	@ (8004d38 <HAL_DMA_Abort_IT+0x1b0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d036      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a55      	ldr	r2, [pc, #340]	@ (8004d3c <HAL_DMA_Abort_IT+0x1b4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d031      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a53      	ldr	r2, [pc, #332]	@ (8004d40 <HAL_DMA_Abort_IT+0x1b8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02c      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a52      	ldr	r2, [pc, #328]	@ (8004d44 <HAL_DMA_Abort_IT+0x1bc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d027      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a50      	ldr	r2, [pc, #320]	@ (8004d48 <HAL_DMA_Abort_IT+0x1c0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4f      	ldr	r2, [pc, #316]	@ (8004d4c <HAL_DMA_Abort_IT+0x1c4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d01d      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a4d      	ldr	r2, [pc, #308]	@ (8004d50 <HAL_DMA_Abort_IT+0x1c8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4c      	ldr	r2, [pc, #304]	@ (8004d54 <HAL_DMA_Abort_IT+0x1cc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d58 <HAL_DMA_Abort_IT+0x1d0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a49      	ldr	r2, [pc, #292]	@ (8004d5c <HAL_DMA_Abort_IT+0x1d4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a47      	ldr	r2, [pc, #284]	@ (8004d60 <HAL_DMA_Abort_IT+0x1d8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a46      	ldr	r2, [pc, #280]	@ (8004d64 <HAL_DMA_Abort_IT+0x1dc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_DMA_Abort_IT+0xcc>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_DMA_Abort_IT+0xce>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8086 	beq.w	8004d68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2f      	ldr	r2, [pc, #188]	@ (8004d28 <HAL_DMA_Abort_IT+0x1a0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d04a      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2e      	ldr	r2, [pc, #184]	@ (8004d2c <HAL_DMA_Abort_IT+0x1a4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d045      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <HAL_DMA_Abort_IT+0x1a8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d040      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <HAL_DMA_Abort_IT+0x1ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d03b      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <HAL_DMA_Abort_IT+0x1b0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d036      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a28      	ldr	r2, [pc, #160]	@ (8004d3c <HAL_DMA_Abort_IT+0x1b4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d031      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	@ (8004d40 <HAL_DMA_Abort_IT+0x1b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d02c      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a25      	ldr	r2, [pc, #148]	@ (8004d44 <HAL_DMA_Abort_IT+0x1bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d027      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a23      	ldr	r2, [pc, #140]	@ (8004d48 <HAL_DMA_Abort_IT+0x1c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d022      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_DMA_Abort_IT+0x1c4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d01d      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	@ (8004d50 <HAL_DMA_Abort_IT+0x1c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d018      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_DMA_Abort_IT+0x1cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <HAL_DMA_Abort_IT+0x1d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_DMA_Abort_IT+0x1d4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <HAL_DMA_Abort_IT+0x1d8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x17c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a19      	ldr	r2, [pc, #100]	@ (8004d64 <HAL_DMA_Abort_IT+0x1dc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <HAL_DMA_Abort_IT+0x18e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e178      	b.n	8005008 <HAL_DMA_Abort_IT+0x480>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e16f      	b.n	8005008 <HAL_DMA_Abort_IT+0x480>
 8004d28:	40020010 	.word	0x40020010
 8004d2c:	40020028 	.word	0x40020028
 8004d30:	40020040 	.word	0x40020040
 8004d34:	40020058 	.word	0x40020058
 8004d38:	40020070 	.word	0x40020070
 8004d3c:	40020088 	.word	0x40020088
 8004d40:	400200a0 	.word	0x400200a0
 8004d44:	400200b8 	.word	0x400200b8
 8004d48:	40020410 	.word	0x40020410
 8004d4c:	40020428 	.word	0x40020428
 8004d50:	40020440 	.word	0x40020440
 8004d54:	40020458 	.word	0x40020458
 8004d58:	40020470 	.word	0x40020470
 8004d5c:	40020488 	.word	0x40020488
 8004d60:	400204a0 	.word	0x400204a0
 8004d64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020e 	bic.w	r2, r2, #14
 8004d76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6c      	ldr	r2, [pc, #432]	@ (8004f30 <HAL_DMA_Abort_IT+0x3a8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d04a      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6b      	ldr	r2, [pc, #428]	@ (8004f34 <HAL_DMA_Abort_IT+0x3ac>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d045      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a69      	ldr	r2, [pc, #420]	@ (8004f38 <HAL_DMA_Abort_IT+0x3b0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d040      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a68      	ldr	r2, [pc, #416]	@ (8004f3c <HAL_DMA_Abort_IT+0x3b4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d03b      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a66      	ldr	r2, [pc, #408]	@ (8004f40 <HAL_DMA_Abort_IT+0x3b8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d036      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a65      	ldr	r2, [pc, #404]	@ (8004f44 <HAL_DMA_Abort_IT+0x3bc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d031      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a63      	ldr	r2, [pc, #396]	@ (8004f48 <HAL_DMA_Abort_IT+0x3c0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d02c      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a62      	ldr	r2, [pc, #392]	@ (8004f4c <HAL_DMA_Abort_IT+0x3c4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d027      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a60      	ldr	r2, [pc, #384]	@ (8004f50 <HAL_DMA_Abort_IT+0x3c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004f54 <HAL_DMA_Abort_IT+0x3cc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d01d      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f58 <HAL_DMA_Abort_IT+0x3d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5c      	ldr	r2, [pc, #368]	@ (8004f5c <HAL_DMA_Abort_IT+0x3d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f60 <HAL_DMA_Abort_IT+0x3d8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a59      	ldr	r2, [pc, #356]	@ (8004f64 <HAL_DMA_Abort_IT+0x3dc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a57      	ldr	r2, [pc, #348]	@ (8004f68 <HAL_DMA_Abort_IT+0x3e0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x290>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a56      	ldr	r2, [pc, #344]	@ (8004f6c <HAL_DMA_Abort_IT+0x3e4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <HAL_DMA_Abort_IT+0x2a2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e007      	b.n	8004e3a <HAL_DMA_Abort_IT+0x2b2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <HAL_DMA_Abort_IT+0x3a8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d072      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3a      	ldr	r2, [pc, #232]	@ (8004f34 <HAL_DMA_Abort_IT+0x3ac>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d06d      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a39      	ldr	r2, [pc, #228]	@ (8004f38 <HAL_DMA_Abort_IT+0x3b0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d068      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a37      	ldr	r2, [pc, #220]	@ (8004f3c <HAL_DMA_Abort_IT+0x3b4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d063      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a36      	ldr	r2, [pc, #216]	@ (8004f40 <HAL_DMA_Abort_IT+0x3b8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d05e      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a34      	ldr	r2, [pc, #208]	@ (8004f44 <HAL_DMA_Abort_IT+0x3bc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d059      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <HAL_DMA_Abort_IT+0x3c0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d054      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a31      	ldr	r2, [pc, #196]	@ (8004f4c <HAL_DMA_Abort_IT+0x3c4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d04f      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <HAL_DMA_Abort_IT+0x3c8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d04a      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2e      	ldr	r2, [pc, #184]	@ (8004f54 <HAL_DMA_Abort_IT+0x3cc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d045      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f58 <HAL_DMA_Abort_IT+0x3d0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d040      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <HAL_DMA_Abort_IT+0x3d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d03b      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <HAL_DMA_Abort_IT+0x3d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d036      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a28      	ldr	r2, [pc, #160]	@ (8004f64 <HAL_DMA_Abort_IT+0x3dc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d031      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <HAL_DMA_Abort_IT+0x3e0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d02c      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	@ (8004f6c <HAL_DMA_Abort_IT+0x3e4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d027      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a24      	ldr	r2, [pc, #144]	@ (8004f70 <HAL_DMA_Abort_IT+0x3e8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a22      	ldr	r2, [pc, #136]	@ (8004f74 <HAL_DMA_Abort_IT+0x3ec>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01d      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a21      	ldr	r2, [pc, #132]	@ (8004f78 <HAL_DMA_Abort_IT+0x3f0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <HAL_DMA_Abort_IT+0x3f4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <HAL_DMA_Abort_IT+0x3f8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <HAL_DMA_Abort_IT+0x3fc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_DMA_Abort_IT+0x400>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_DMA_Abort_IT+0x3a2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <HAL_DMA_Abort_IT+0x404>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d132      	bne.n	8004f90 <HAL_DMA_Abort_IT+0x408>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e031      	b.n	8004f92 <HAL_DMA_Abort_IT+0x40a>
 8004f2e:	bf00      	nop
 8004f30:	40020010 	.word	0x40020010
 8004f34:	40020028 	.word	0x40020028
 8004f38:	40020040 	.word	0x40020040
 8004f3c:	40020058 	.word	0x40020058
 8004f40:	40020070 	.word	0x40020070
 8004f44:	40020088 	.word	0x40020088
 8004f48:	400200a0 	.word	0x400200a0
 8004f4c:	400200b8 	.word	0x400200b8
 8004f50:	40020410 	.word	0x40020410
 8004f54:	40020428 	.word	0x40020428
 8004f58:	40020440 	.word	0x40020440
 8004f5c:	40020458 	.word	0x40020458
 8004f60:	40020470 	.word	0x40020470
 8004f64:	40020488 	.word	0x40020488
 8004f68:	400204a0 	.word	0x400204a0
 8004f6c:	400204b8 	.word	0x400204b8
 8004f70:	58025408 	.word	0x58025408
 8004f74:	5802541c 	.word	0x5802541c
 8004f78:	58025430 	.word	0x58025430
 8004f7c:	58025444 	.word	0x58025444
 8004f80:	58025458 	.word	0x58025458
 8004f84:	5802546c 	.word	0x5802546c
 8004f88:	58025480 	.word	0x58025480
 8004f8c:	58025494 	.word	0x58025494
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d028      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004fc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fdc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fe6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	@ 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005020:	4b67      	ldr	r3, [pc, #412]	@ (80051c0 <HAL_DMA_IRQHandler+0x1ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <HAL_DMA_IRQHandler+0x1b0>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005038:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5f      	ldr	r2, [pc, #380]	@ (80051c8 <HAL_DMA_IRQHandler+0x1b4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a5d      	ldr	r2, [pc, #372]	@ (80051cc <HAL_DMA_IRQHandler+0x1b8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5c      	ldr	r2, [pc, #368]	@ (80051d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a5a      	ldr	r2, [pc, #360]	@ (80051d4 <HAL_DMA_IRQHandler+0x1c0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a59      	ldr	r2, [pc, #356]	@ (80051d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a57      	ldr	r2, [pc, #348]	@ (80051dc <HAL_DMA_IRQHandler+0x1c8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a56      	ldr	r2, [pc, #344]	@ (80051e0 <HAL_DMA_IRQHandler+0x1cc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a54      	ldr	r2, [pc, #336]	@ (80051e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a53      	ldr	r2, [pc, #332]	@ (80051e8 <HAL_DMA_IRQHandler+0x1d4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a51      	ldr	r2, [pc, #324]	@ (80051ec <HAL_DMA_IRQHandler+0x1d8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a50      	ldr	r2, [pc, #320]	@ (80051f0 <HAL_DMA_IRQHandler+0x1dc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a4e      	ldr	r2, [pc, #312]	@ (80051f4 <HAL_DMA_IRQHandler+0x1e0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a4d      	ldr	r2, [pc, #308]	@ (80051f8 <HAL_DMA_IRQHandler+0x1e4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a4b      	ldr	r2, [pc, #300]	@ (80051fc <HAL_DMA_IRQHandler+0x1e8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005200 <HAL_DMA_IRQHandler+0x1ec>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xd2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a48      	ldr	r2, [pc, #288]	@ (8005204 <HAL_DMA_IRQHandler+0x1f0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_IRQHandler+0xd6>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_DMA_IRQHandler+0xd8>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 842b 	beq.w	8005948 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2208      	movs	r2, #8
 80050fc:	409a      	lsls	r2, r3
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80a2 	beq.w	800524c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2e      	ldr	r2, [pc, #184]	@ (80051c8 <HAL_DMA_IRQHandler+0x1b4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d04a      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2d      	ldr	r2, [pc, #180]	@ (80051cc <HAL_DMA_IRQHandler+0x1b8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d045      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2b      	ldr	r2, [pc, #172]	@ (80051d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d040      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2a      	ldr	r2, [pc, #168]	@ (80051d4 <HAL_DMA_IRQHandler+0x1c0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d03b      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a28      	ldr	r2, [pc, #160]	@ (80051d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d036      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a27      	ldr	r2, [pc, #156]	@ (80051dc <HAL_DMA_IRQHandler+0x1c8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d031      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a25      	ldr	r2, [pc, #148]	@ (80051e0 <HAL_DMA_IRQHandler+0x1cc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02c      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d027      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	@ (80051e8 <HAL_DMA_IRQHandler+0x1d4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d022      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <HAL_DMA_IRQHandler+0x1d8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d01d      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <HAL_DMA_IRQHandler+0x1dc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d018      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <HAL_DMA_IRQHandler+0x1e0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <HAL_DMA_IRQHandler+0x1e4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00e      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_DMA_IRQHandler+0x1e8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d009      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <HAL_DMA_IRQHandler+0x1ec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x194>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_DMA_IRQHandler+0x1f0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d12f      	bne.n	8005208 <HAL_DMA_IRQHandler+0x1f4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bf14      	ite	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	2300      	moveq	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e02e      	b.n	800521c <HAL_DMA_IRQHandler+0x208>
 80051be:	bf00      	nop
 80051c0:	2400006c 	.word	0x2400006c
 80051c4:	1b4e81b5 	.word	0x1b4e81b5
 80051c8:	40020010 	.word	0x40020010
 80051cc:	40020028 	.word	0x40020028
 80051d0:	40020040 	.word	0x40020040
 80051d4:	40020058 	.word	0x40020058
 80051d8:	40020070 	.word	0x40020070
 80051dc:	40020088 	.word	0x40020088
 80051e0:	400200a0 	.word	0x400200a0
 80051e4:	400200b8 	.word	0x400200b8
 80051e8:	40020410 	.word	0x40020410
 80051ec:	40020428 	.word	0x40020428
 80051f0:	40020440 	.word	0x40020440
 80051f4:	40020458 	.word	0x40020458
 80051f8:	40020470 	.word	0x40020470
 80051fc:	40020488 	.word	0x40020488
 8005200:	400204a0 	.word	0x400204a0
 8005204:	400204b8 	.word	0x400204b8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2208      	movs	r2, #8
 800523a:	409a      	lsls	r2, r3
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	f043 0201 	orr.w	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d06e      	beq.n	8005340 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a69      	ldr	r2, [pc, #420]	@ (800540c <HAL_DMA_IRQHandler+0x3f8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d04a      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a67      	ldr	r2, [pc, #412]	@ (8005410 <HAL_DMA_IRQHandler+0x3fc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d045      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a66      	ldr	r2, [pc, #408]	@ (8005414 <HAL_DMA_IRQHandler+0x400>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d040      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a64      	ldr	r2, [pc, #400]	@ (8005418 <HAL_DMA_IRQHandler+0x404>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d03b      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a63      	ldr	r2, [pc, #396]	@ (800541c <HAL_DMA_IRQHandler+0x408>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d036      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a61      	ldr	r2, [pc, #388]	@ (8005420 <HAL_DMA_IRQHandler+0x40c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d031      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a60      	ldr	r2, [pc, #384]	@ (8005424 <HAL_DMA_IRQHandler+0x410>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d02c      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005428 <HAL_DMA_IRQHandler+0x414>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d027      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a5d      	ldr	r2, [pc, #372]	@ (800542c <HAL_DMA_IRQHandler+0x418>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d022      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005430 <HAL_DMA_IRQHandler+0x41c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01d      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005434 <HAL_DMA_IRQHandler+0x420>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d018      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a58      	ldr	r2, [pc, #352]	@ (8005438 <HAL_DMA_IRQHandler+0x424>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a57      	ldr	r2, [pc, #348]	@ (800543c <HAL_DMA_IRQHandler+0x428>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00e      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a55      	ldr	r2, [pc, #340]	@ (8005440 <HAL_DMA_IRQHandler+0x42c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d009      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a54      	ldr	r2, [pc, #336]	@ (8005444 <HAL_DMA_IRQHandler+0x430>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_DMA_IRQHandler+0x2ee>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a52      	ldr	r2, [pc, #328]	@ (8005448 <HAL_DMA_IRQHandler+0x434>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10a      	bne.n	8005318 <HAL_DMA_IRQHandler+0x304>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e003      	b.n	8005320 <HAL_DMA_IRQHandler+0x30c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	f043 0202 	orr.w	r2, r3, #2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2204      	movs	r2, #4
 800534a:	409a      	lsls	r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 808f 	beq.w	8005474 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2c      	ldr	r2, [pc, #176]	@ (800540c <HAL_DMA_IRQHandler+0x3f8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	@ (8005410 <HAL_DMA_IRQHandler+0x3fc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a29      	ldr	r2, [pc, #164]	@ (8005414 <HAL_DMA_IRQHandler+0x400>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a27      	ldr	r2, [pc, #156]	@ (8005418 <HAL_DMA_IRQHandler+0x404>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a26      	ldr	r2, [pc, #152]	@ (800541c <HAL_DMA_IRQHandler+0x408>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a24      	ldr	r2, [pc, #144]	@ (8005420 <HAL_DMA_IRQHandler+0x40c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a23      	ldr	r2, [pc, #140]	@ (8005424 <HAL_DMA_IRQHandler+0x410>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a21      	ldr	r2, [pc, #132]	@ (8005428 <HAL_DMA_IRQHandler+0x414>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a20      	ldr	r2, [pc, #128]	@ (800542c <HAL_DMA_IRQHandler+0x418>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <HAL_DMA_IRQHandler+0x41c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <HAL_DMA_IRQHandler+0x420>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <HAL_DMA_IRQHandler+0x424>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <HAL_DMA_IRQHandler+0x428>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a18      	ldr	r2, [pc, #96]	@ (8005440 <HAL_DMA_IRQHandler+0x42c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <HAL_DMA_IRQHandler+0x430>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x3e2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <HAL_DMA_IRQHandler+0x434>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d12a      	bne.n	800544c <HAL_DMA_IRQHandler+0x438>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e023      	b.n	8005454 <HAL_DMA_IRQHandler+0x440>
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2204      	movs	r2, #4
 8005462:	409a      	lsls	r2, r3
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2210      	movs	r2, #16
 800547e:	409a      	lsls	r2, r3
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a6 	beq.w	80055d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a85      	ldr	r2, [pc, #532]	@ (80056a4 <HAL_DMA_IRQHandler+0x690>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04a      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a83      	ldr	r2, [pc, #524]	@ (80056a8 <HAL_DMA_IRQHandler+0x694>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a82      	ldr	r2, [pc, #520]	@ (80056ac <HAL_DMA_IRQHandler+0x698>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a80      	ldr	r2, [pc, #512]	@ (80056b0 <HAL_DMA_IRQHandler+0x69c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03b      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a7f      	ldr	r2, [pc, #508]	@ (80056b4 <HAL_DMA_IRQHandler+0x6a0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d036      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a7d      	ldr	r2, [pc, #500]	@ (80056b8 <HAL_DMA_IRQHandler+0x6a4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a7c      	ldr	r2, [pc, #496]	@ (80056bc <HAL_DMA_IRQHandler+0x6a8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7a      	ldr	r2, [pc, #488]	@ (80056c0 <HAL_DMA_IRQHandler+0x6ac>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d027      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a79      	ldr	r2, [pc, #484]	@ (80056c4 <HAL_DMA_IRQHandler+0x6b0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a77      	ldr	r2, [pc, #476]	@ (80056c8 <HAL_DMA_IRQHandler+0x6b4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a76      	ldr	r2, [pc, #472]	@ (80056cc <HAL_DMA_IRQHandler+0x6b8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a74      	ldr	r2, [pc, #464]	@ (80056d0 <HAL_DMA_IRQHandler+0x6bc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a73      	ldr	r2, [pc, #460]	@ (80056d4 <HAL_DMA_IRQHandler+0x6c0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a71      	ldr	r2, [pc, #452]	@ (80056d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a70      	ldr	r2, [pc, #448]	@ (80056dc <HAL_DMA_IRQHandler+0x6c8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_DMA_IRQHandler+0x516>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6e      	ldr	r2, [pc, #440]	@ (80056e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10a      	bne.n	8005540 <HAL_DMA_IRQHandler+0x52c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e009      	b.n	8005554 <HAL_DMA_IRQHandler+0x540>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d03e      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2210      	movs	r2, #16
 8005562:	409a      	lsls	r2, r3
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d018      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d024      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
 8005594:	e01f      	b.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01b      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	e016      	b.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0208 	bic.w	r2, r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2220      	movs	r2, #32
 80055e0:	409a      	lsls	r2, r3
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8110 	beq.w	800580c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2c      	ldr	r2, [pc, #176]	@ (80056a4 <HAL_DMA_IRQHandler+0x690>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d04a      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	@ (80056a8 <HAL_DMA_IRQHandler+0x694>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d045      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a29      	ldr	r2, [pc, #164]	@ (80056ac <HAL_DMA_IRQHandler+0x698>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d040      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a28      	ldr	r2, [pc, #160]	@ (80056b0 <HAL_DMA_IRQHandler+0x69c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d03b      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a26      	ldr	r2, [pc, #152]	@ (80056b4 <HAL_DMA_IRQHandler+0x6a0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d036      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a25      	ldr	r2, [pc, #148]	@ (80056b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d031      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a23      	ldr	r2, [pc, #140]	@ (80056bc <HAL_DMA_IRQHandler+0x6a8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02c      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a22      	ldr	r2, [pc, #136]	@ (80056c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d027      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a20      	ldr	r2, [pc, #128]	@ (80056c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d022      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1f      	ldr	r2, [pc, #124]	@ (80056c8 <HAL_DMA_IRQHandler+0x6b4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d01d      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <HAL_DMA_IRQHandler+0x6b8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d018      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <HAL_DMA_IRQHandler+0x6c0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00e      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <HAL_DMA_IRQHandler+0x6c8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <HAL_DMA_IRQHandler+0x678>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d12b      	bne.n	80056e4 <HAL_DMA_IRQHandler+0x6d0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf14      	ite	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2300      	moveq	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e02a      	b.n	80056f8 <HAL_DMA_IRQHandler+0x6e4>
 80056a2:	bf00      	nop
 80056a4:	40020010 	.word	0x40020010
 80056a8:	40020028 	.word	0x40020028
 80056ac:	40020040 	.word	0x40020040
 80056b0:	40020058 	.word	0x40020058
 80056b4:	40020070 	.word	0x40020070
 80056b8:	40020088 	.word	0x40020088
 80056bc:	400200a0 	.word	0x400200a0
 80056c0:	400200b8 	.word	0x400200b8
 80056c4:	40020410 	.word	0x40020410
 80056c8:	40020428 	.word	0x40020428
 80056cc:	40020440 	.word	0x40020440
 80056d0:	40020458 	.word	0x40020458
 80056d4:	40020470 	.word	0x40020470
 80056d8:	40020488 	.word	0x40020488
 80056dc:	400204a0 	.word	0x400204a0
 80056e0:	400204b8 	.word	0x400204b8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8087 	beq.w	800580c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2220      	movs	r2, #32
 8005708:	409a      	lsls	r2, r3
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b04      	cmp	r3, #4
 8005718:	d139      	bne.n	800578e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0216 	bic.w	r2, r2, #22
 8005728:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005738:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_DMA_IRQHandler+0x736>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0208 	bic.w	r2, r2, #8
 8005758:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	223f      	movs	r2, #63	@ 0x3f
 8005764:	409a      	lsls	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 834a 	beq.w	8005e18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
          }
          return;
 800578c:	e344      	b.n	8005e18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d018      	beq.n	80057ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02c      	beq.n	800580c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
 80057ba:	e027      	b.n	800580c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d023      	beq.n	800580c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
 80057cc:	e01e      	b.n	800580c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0210 	bic.w	r2, r2, #16
 80057ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8306 	beq.w	8005e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8088 	beq.w	8005934 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2204      	movs	r2, #4
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7a      	ldr	r2, [pc, #488]	@ (8005a1c <HAL_DMA_IRQHandler+0xa08>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04a      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a79      	ldr	r2, [pc, #484]	@ (8005a20 <HAL_DMA_IRQHandler+0xa0c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d045      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a77      	ldr	r2, [pc, #476]	@ (8005a24 <HAL_DMA_IRQHandler+0xa10>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d040      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a76      	ldr	r2, [pc, #472]	@ (8005a28 <HAL_DMA_IRQHandler+0xa14>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d03b      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a74      	ldr	r2, [pc, #464]	@ (8005a2c <HAL_DMA_IRQHandler+0xa18>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d036      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a73      	ldr	r2, [pc, #460]	@ (8005a30 <HAL_DMA_IRQHandler+0xa1c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d031      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a71      	ldr	r2, [pc, #452]	@ (8005a34 <HAL_DMA_IRQHandler+0xa20>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02c      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a70      	ldr	r2, [pc, #448]	@ (8005a38 <HAL_DMA_IRQHandler+0xa24>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d027      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a6e      	ldr	r2, [pc, #440]	@ (8005a3c <HAL_DMA_IRQHandler+0xa28>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6d      	ldr	r2, [pc, #436]	@ (8005a40 <HAL_DMA_IRQHandler+0xa2c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01d      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6b      	ldr	r2, [pc, #428]	@ (8005a44 <HAL_DMA_IRQHandler+0xa30>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6a      	ldr	r2, [pc, #424]	@ (8005a48 <HAL_DMA_IRQHandler+0xa34>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a68      	ldr	r2, [pc, #416]	@ (8005a4c <HAL_DMA_IRQHandler+0xa38>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a67      	ldr	r2, [pc, #412]	@ (8005a50 <HAL_DMA_IRQHandler+0xa3c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a65      	ldr	r2, [pc, #404]	@ (8005a54 <HAL_DMA_IRQHandler+0xa40>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_DMA_IRQHandler+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a64      	ldr	r2, [pc, #400]	@ (8005a58 <HAL_DMA_IRQHandler+0xa44>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <HAL_DMA_IRQHandler+0x8ca>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e007      	b.n	80058ee <HAL_DMA_IRQHandler+0x8da>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d307      	bcc.n	800590a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f2      	bne.n	80058ee <HAL_DMA_IRQHandler+0x8da>
 8005908:	e000      	b.n	800590c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800590a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2203      	movs	r2, #3
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005922:	e003      	b.n	800592c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8272 	beq.w	8005e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
 8005946:	e26c      	b.n	8005e22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a43      	ldr	r2, [pc, #268]	@ (8005a5c <HAL_DMA_IRQHandler+0xa48>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a42      	ldr	r2, [pc, #264]	@ (8005a60 <HAL_DMA_IRQHandler+0xa4c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d01d      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a40      	ldr	r2, [pc, #256]	@ (8005a64 <HAL_DMA_IRQHandler+0xa50>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a68 <HAL_DMA_IRQHandler+0xa54>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a3d      	ldr	r2, [pc, #244]	@ (8005a6c <HAL_DMA_IRQHandler+0xa58>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a70 <HAL_DMA_IRQHandler+0xa5c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3a      	ldr	r2, [pc, #232]	@ (8005a74 <HAL_DMA_IRQHandler+0xa60>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_DMA_IRQHandler+0x984>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a39      	ldr	r2, [pc, #228]	@ (8005a78 <HAL_DMA_IRQHandler+0xa64>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_DMA_IRQHandler+0x988>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_DMA_IRQHandler+0x98a>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 823f 	beq.w	8005e22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2204      	movs	r2, #4
 80059b6:	409a      	lsls	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80cd 	beq.w	8005b5c <HAL_DMA_IRQHandler+0xb48>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c7 	beq.w	8005b5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2204      	movs	r2, #4
 80059d8:	409a      	lsls	r2, r3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d049      	beq.n	8005a7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8210 	beq.w	8005e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a04:	e20a      	b.n	8005e1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8206 	beq.w	8005e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a18:	e200      	b.n	8005e1c <HAL_DMA_IRQHandler+0xe08>
 8005a1a:	bf00      	nop
 8005a1c:	40020010 	.word	0x40020010
 8005a20:	40020028 	.word	0x40020028
 8005a24:	40020040 	.word	0x40020040
 8005a28:	40020058 	.word	0x40020058
 8005a2c:	40020070 	.word	0x40020070
 8005a30:	40020088 	.word	0x40020088
 8005a34:	400200a0 	.word	0x400200a0
 8005a38:	400200b8 	.word	0x400200b8
 8005a3c:	40020410 	.word	0x40020410
 8005a40:	40020428 	.word	0x40020428
 8005a44:	40020440 	.word	0x40020440
 8005a48:	40020458 	.word	0x40020458
 8005a4c:	40020470 	.word	0x40020470
 8005a50:	40020488 	.word	0x40020488
 8005a54:	400204a0 	.word	0x400204a0
 8005a58:	400204b8 	.word	0x400204b8
 8005a5c:	58025408 	.word	0x58025408
 8005a60:	5802541c 	.word	0x5802541c
 8005a64:	58025430 	.word	0x58025430
 8005a68:	58025444 	.word	0x58025444
 8005a6c:	58025458 	.word	0x58025458
 8005a70:	5802546c 	.word	0x5802546c
 8005a74:	58025480 	.word	0x58025480
 8005a78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d160      	bne.n	8005b48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a7f      	ldr	r2, [pc, #508]	@ (8005c88 <HAL_DMA_IRQHandler+0xc74>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d04a      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a7d      	ldr	r2, [pc, #500]	@ (8005c8c <HAL_DMA_IRQHandler+0xc78>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d045      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c90 <HAL_DMA_IRQHandler+0xc7c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d040      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7a      	ldr	r2, [pc, #488]	@ (8005c94 <HAL_DMA_IRQHandler+0xc80>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d03b      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a79      	ldr	r2, [pc, #484]	@ (8005c98 <HAL_DMA_IRQHandler+0xc84>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d036      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a77      	ldr	r2, [pc, #476]	@ (8005c9c <HAL_DMA_IRQHandler+0xc88>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d031      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a76      	ldr	r2, [pc, #472]	@ (8005ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d02c      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a74      	ldr	r2, [pc, #464]	@ (8005ca4 <HAL_DMA_IRQHandler+0xc90>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d027      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a73      	ldr	r2, [pc, #460]	@ (8005ca8 <HAL_DMA_IRQHandler+0xc94>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d022      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a71      	ldr	r2, [pc, #452]	@ (8005cac <HAL_DMA_IRQHandler+0xc98>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01d      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a70      	ldr	r2, [pc, #448]	@ (8005cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb4 <HAL_DMA_IRQHandler+0xca0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb8 <HAL_DMA_IRQHandler+0xca4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cbc <HAL_DMA_IRQHandler+0xca8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6a      	ldr	r2, [pc, #424]	@ (8005cc0 <HAL_DMA_IRQHandler+0xcac>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xb12>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a68      	ldr	r2, [pc, #416]	@ (8005cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <HAL_DMA_IRQHandler+0xb24>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0208 	bic.w	r2, r2, #8
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e007      	b.n	8005b48 <HAL_DMA_IRQHandler+0xb34>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0204 	bic.w	r2, r2, #4
 8005b46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8165 	beq.w	8005e1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b5a:	e15f      	b.n	8005e1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2202      	movs	r2, #2
 8005b66:	409a      	lsls	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80c5 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xce8>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80bf 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2202      	movs	r2, #2
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d018      	beq.n	8005bca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 813a 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb4:	e134      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8130 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bc8:	e12a      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f040 8089 	bne.w	8005ce8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2b      	ldr	r2, [pc, #172]	@ (8005c88 <HAL_DMA_IRQHandler+0xc74>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d04a      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <HAL_DMA_IRQHandler+0xc78>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d045      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a28      	ldr	r2, [pc, #160]	@ (8005c90 <HAL_DMA_IRQHandler+0xc7c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d040      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a26      	ldr	r2, [pc, #152]	@ (8005c94 <HAL_DMA_IRQHandler+0xc80>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d03b      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a25      	ldr	r2, [pc, #148]	@ (8005c98 <HAL_DMA_IRQHandler+0xc84>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d036      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	@ (8005c9c <HAL_DMA_IRQHandler+0xc88>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d031      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d02c      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a20      	ldr	r2, [pc, #128]	@ (8005ca4 <HAL_DMA_IRQHandler+0xc90>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d027      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca8 <HAL_DMA_IRQHandler+0xc94>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <HAL_DMA_IRQHandler+0xc98>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01d      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb4 <HAL_DMA_IRQHandler+0xca0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <HAL_DMA_IRQHandler+0xca4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <HAL_DMA_IRQHandler+0xca8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a16      	ldr	r2, [pc, #88]	@ (8005cc0 <HAL_DMA_IRQHandler+0xcac>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xc62>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a14      	ldr	r2, [pc, #80]	@ (8005cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d128      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0xcb4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0214 	bic.w	r2, r2, #20
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e027      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xcc4>
 8005c88:	40020010 	.word	0x40020010
 8005c8c:	40020028 	.word	0x40020028
 8005c90:	40020040 	.word	0x40020040
 8005c94:	40020058 	.word	0x40020058
 8005c98:	40020070 	.word	0x40020070
 8005c9c:	40020088 	.word	0x40020088
 8005ca0:	400200a0 	.word	0x400200a0
 8005ca4:	400200b8 	.word	0x400200b8
 8005ca8:	40020410 	.word	0x40020410
 8005cac:	40020428 	.word	0x40020428
 8005cb0:	40020440 	.word	0x40020440
 8005cb4:	40020458 	.word	0x40020458
 8005cb8:	40020470 	.word	0x40020470
 8005cbc:	40020488 	.word	0x40020488
 8005cc0:	400204a0 	.word	0x400204a0
 8005cc4:	400204b8 	.word	0x400204b8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020a 	bic.w	r2, r2, #10
 8005cd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8097 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfa:	e091      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	2208      	movs	r2, #8
 8005d06:	409a      	lsls	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8088 	beq.w	8005e22 <HAL_DMA_IRQHandler+0xe0e>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8082 	beq.w	8005e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a41      	ldr	r2, [pc, #260]	@ (8005e28 <HAL_DMA_IRQHandler+0xe14>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d04a      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e2c <HAL_DMA_IRQHandler+0xe18>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d045      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a3e      	ldr	r2, [pc, #248]	@ (8005e30 <HAL_DMA_IRQHandler+0xe1c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d040      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <HAL_DMA_IRQHandler+0xe20>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d03b      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e38 <HAL_DMA_IRQHandler+0xe24>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d036      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a39      	ldr	r2, [pc, #228]	@ (8005e3c <HAL_DMA_IRQHandler+0xe28>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d031      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a38      	ldr	r2, [pc, #224]	@ (8005e40 <HAL_DMA_IRQHandler+0xe2c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d02c      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a36      	ldr	r2, [pc, #216]	@ (8005e44 <HAL_DMA_IRQHandler+0xe30>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d027      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a35      	ldr	r2, [pc, #212]	@ (8005e48 <HAL_DMA_IRQHandler+0xe34>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d022      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a33      	ldr	r2, [pc, #204]	@ (8005e4c <HAL_DMA_IRQHandler+0xe38>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01d      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <HAL_DMA_IRQHandler+0xe3c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d018      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a30      	ldr	r2, [pc, #192]	@ (8005e54 <HAL_DMA_IRQHandler+0xe40>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e58 <HAL_DMA_IRQHandler+0xe44>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e5c <HAL_DMA_IRQHandler+0xe48>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2c      	ldr	r2, [pc, #176]	@ (8005e60 <HAL_DMA_IRQHandler+0xe4c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xdaa>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e64 <HAL_DMA_IRQHandler+0xe50>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d108      	bne.n	8005dd0 <HAL_DMA_IRQHandler+0xdbc>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 021c 	bic.w	r2, r2, #28
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e007      	b.n	8005de0 <HAL_DMA_IRQHandler+0xdcc>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 020e 	bic.w	r2, r2, #14
 8005dde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4798      	blx	r3
 8005e16:	e004      	b.n	8005e22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e22:	3728      	adds	r7, #40	@ 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40020010 	.word	0x40020010
 8005e2c:	40020028 	.word	0x40020028
 8005e30:	40020040 	.word	0x40020040
 8005e34:	40020058 	.word	0x40020058
 8005e38:	40020070 	.word	0x40020070
 8005e3c:	40020088 	.word	0x40020088
 8005e40:	400200a0 	.word	0x400200a0
 8005e44:	400200b8 	.word	0x400200b8
 8005e48:	40020410 	.word	0x40020410
 8005e4c:	40020428 	.word	0x40020428
 8005e50:	40020440 	.word	0x40020440
 8005e54:	40020458 	.word	0x40020458
 8005e58:	40020470 	.word	0x40020470
 8005e5c:	40020488 	.word	0x40020488
 8005e60:	400204a0 	.word	0x400204a0
 8005e64:	400204b8 	.word	0x400204b8

08005e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7f      	ldr	r2, [pc, #508]	@ (8006084 <DMA_SetConfig+0x21c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d072      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a7d      	ldr	r2, [pc, #500]	@ (8006088 <DMA_SetConfig+0x220>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d06d      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800608c <DMA_SetConfig+0x224>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d068      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8006090 <DMA_SetConfig+0x228>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d063      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a79      	ldr	r2, [pc, #484]	@ (8006094 <DMA_SetConfig+0x22c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d05e      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a77      	ldr	r2, [pc, #476]	@ (8006098 <DMA_SetConfig+0x230>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d059      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a76      	ldr	r2, [pc, #472]	@ (800609c <DMA_SetConfig+0x234>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d054      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a74      	ldr	r2, [pc, #464]	@ (80060a0 <DMA_SetConfig+0x238>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d04f      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a73      	ldr	r2, [pc, #460]	@ (80060a4 <DMA_SetConfig+0x23c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d04a      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a71      	ldr	r2, [pc, #452]	@ (80060a8 <DMA_SetConfig+0x240>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d045      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a70      	ldr	r2, [pc, #448]	@ (80060ac <DMA_SetConfig+0x244>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d040      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80060b0 <DMA_SetConfig+0x248>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d03b      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a6d      	ldr	r2, [pc, #436]	@ (80060b4 <DMA_SetConfig+0x24c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d036      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6b      	ldr	r2, [pc, #428]	@ (80060b8 <DMA_SetConfig+0x250>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6a      	ldr	r2, [pc, #424]	@ (80060bc <DMA_SetConfig+0x254>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d02c      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a68      	ldr	r2, [pc, #416]	@ (80060c0 <DMA_SetConfig+0x258>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d027      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a67      	ldr	r2, [pc, #412]	@ (80060c4 <DMA_SetConfig+0x25c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a65      	ldr	r2, [pc, #404]	@ (80060c8 <DMA_SetConfig+0x260>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a64      	ldr	r2, [pc, #400]	@ (80060cc <DMA_SetConfig+0x264>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a62      	ldr	r2, [pc, #392]	@ (80060d0 <DMA_SetConfig+0x268>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a61      	ldr	r2, [pc, #388]	@ (80060d4 <DMA_SetConfig+0x26c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5f      	ldr	r2, [pc, #380]	@ (80060d8 <DMA_SetConfig+0x270>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5e      	ldr	r2, [pc, #376]	@ (80060dc <DMA_SetConfig+0x274>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <DMA_SetConfig+0x10a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80060e0 <DMA_SetConfig+0x278>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <DMA_SetConfig+0x10e>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <DMA_SetConfig+0x110>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a39      	ldr	r2, [pc, #228]	@ (8006084 <DMA_SetConfig+0x21c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d04a      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a38      	ldr	r2, [pc, #224]	@ (8006088 <DMA_SetConfig+0x220>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d045      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a36      	ldr	r2, [pc, #216]	@ (800608c <DMA_SetConfig+0x224>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d040      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a35      	ldr	r2, [pc, #212]	@ (8006090 <DMA_SetConfig+0x228>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d03b      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a33      	ldr	r2, [pc, #204]	@ (8006094 <DMA_SetConfig+0x22c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d036      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a32      	ldr	r2, [pc, #200]	@ (8006098 <DMA_SetConfig+0x230>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d031      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	@ (800609c <DMA_SetConfig+0x234>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02c      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80060a0 <DMA_SetConfig+0x238>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d027      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2d      	ldr	r2, [pc, #180]	@ (80060a4 <DMA_SetConfig+0x23c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80060a8 <DMA_SetConfig+0x240>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01d      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2a      	ldr	r2, [pc, #168]	@ (80060ac <DMA_SetConfig+0x244>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a29      	ldr	r2, [pc, #164]	@ (80060b0 <DMA_SetConfig+0x248>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a27      	ldr	r2, [pc, #156]	@ (80060b4 <DMA_SetConfig+0x24c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a26      	ldr	r2, [pc, #152]	@ (80060b8 <DMA_SetConfig+0x250>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a24      	ldr	r2, [pc, #144]	@ (80060bc <DMA_SetConfig+0x254>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <DMA_SetConfig+0x1d0>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a23      	ldr	r2, [pc, #140]	@ (80060c0 <DMA_SetConfig+0x258>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <DMA_SetConfig+0x1d4>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <DMA_SetConfig+0x1d6>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d059      	beq.n	80060f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	223f      	movs	r2, #63	@ 0x3f
 800604c:	409a      	lsls	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006060:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b40      	cmp	r3, #64	@ 0x40
 8006070:	d138      	bne.n	80060e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006082:	e086      	b.n	8006192 <DMA_SetConfig+0x32a>
 8006084:	40020010 	.word	0x40020010
 8006088:	40020028 	.word	0x40020028
 800608c:	40020040 	.word	0x40020040
 8006090:	40020058 	.word	0x40020058
 8006094:	40020070 	.word	0x40020070
 8006098:	40020088 	.word	0x40020088
 800609c:	400200a0 	.word	0x400200a0
 80060a0:	400200b8 	.word	0x400200b8
 80060a4:	40020410 	.word	0x40020410
 80060a8:	40020428 	.word	0x40020428
 80060ac:	40020440 	.word	0x40020440
 80060b0:	40020458 	.word	0x40020458
 80060b4:	40020470 	.word	0x40020470
 80060b8:	40020488 	.word	0x40020488
 80060bc:	400204a0 	.word	0x400204a0
 80060c0:	400204b8 	.word	0x400204b8
 80060c4:	58025408 	.word	0x58025408
 80060c8:	5802541c 	.word	0x5802541c
 80060cc:	58025430 	.word	0x58025430
 80060d0:	58025444 	.word	0x58025444
 80060d4:	58025458 	.word	0x58025458
 80060d8:	5802546c 	.word	0x5802546c
 80060dc:	58025480 	.word	0x58025480
 80060e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]
}
 80060f4:	e04d      	b.n	8006192 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a29      	ldr	r2, [pc, #164]	@ (80061a0 <DMA_SetConfig+0x338>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d022      	beq.n	8006146 <DMA_SetConfig+0x2de>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a27      	ldr	r2, [pc, #156]	@ (80061a4 <DMA_SetConfig+0x33c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01d      	beq.n	8006146 <DMA_SetConfig+0x2de>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a26      	ldr	r2, [pc, #152]	@ (80061a8 <DMA_SetConfig+0x340>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <DMA_SetConfig+0x2de>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a24      	ldr	r2, [pc, #144]	@ (80061ac <DMA_SetConfig+0x344>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <DMA_SetConfig+0x2de>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a23      	ldr	r2, [pc, #140]	@ (80061b0 <DMA_SetConfig+0x348>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <DMA_SetConfig+0x2de>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a21      	ldr	r2, [pc, #132]	@ (80061b4 <DMA_SetConfig+0x34c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <DMA_SetConfig+0x2de>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <DMA_SetConfig+0x350>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <DMA_SetConfig+0x2de>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1e      	ldr	r2, [pc, #120]	@ (80061bc <DMA_SetConfig+0x354>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <DMA_SetConfig+0x2e2>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <DMA_SetConfig+0x2e4>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b40      	cmp	r3, #64	@ 0x40
 800616e:	d108      	bne.n	8006182 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	60da      	str	r2, [r3, #12]
}
 8006180:	e007      	b.n	8006192 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	58025408 	.word	0x58025408
 80061a4:	5802541c 	.word	0x5802541c
 80061a8:	58025430 	.word	0x58025430
 80061ac:	58025444 	.word	0x58025444
 80061b0:	58025458 	.word	0x58025458
 80061b4:	5802546c 	.word	0x5802546c
 80061b8:	58025480 	.word	0x58025480
 80061bc:	58025494 	.word	0x58025494

080061c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a42      	ldr	r2, [pc, #264]	@ (80062d8 <DMA_CalcBaseAndBitshift+0x118>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d04a      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a41      	ldr	r2, [pc, #260]	@ (80062dc <DMA_CalcBaseAndBitshift+0x11c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d045      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a3f      	ldr	r2, [pc, #252]	@ (80062e0 <DMA_CalcBaseAndBitshift+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d040      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3e      	ldr	r2, [pc, #248]	@ (80062e4 <DMA_CalcBaseAndBitshift+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d03b      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3c      	ldr	r2, [pc, #240]	@ (80062e8 <DMA_CalcBaseAndBitshift+0x128>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d036      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a3b      	ldr	r2, [pc, #236]	@ (80062ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d031      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a39      	ldr	r2, [pc, #228]	@ (80062f0 <DMA_CalcBaseAndBitshift+0x130>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d02c      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a38      	ldr	r2, [pc, #224]	@ (80062f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d027      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a36      	ldr	r2, [pc, #216]	@ (80062f8 <DMA_CalcBaseAndBitshift+0x138>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d022      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d01d      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a33      	ldr	r2, [pc, #204]	@ (8006300 <DMA_CalcBaseAndBitshift+0x140>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a32      	ldr	r2, [pc, #200]	@ (8006304 <DMA_CalcBaseAndBitshift+0x144>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a30      	ldr	r2, [pc, #192]	@ (8006308 <DMA_CalcBaseAndBitshift+0x148>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2f      	ldr	r2, [pc, #188]	@ (800630c <DMA_CalcBaseAndBitshift+0x14c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2d      	ldr	r2, [pc, #180]	@ (8006310 <DMA_CalcBaseAndBitshift+0x150>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <DMA_CalcBaseAndBitshift+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2c      	ldr	r2, [pc, #176]	@ (8006314 <DMA_CalcBaseAndBitshift+0x154>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d101      	bne.n	800626c <DMA_CalcBaseAndBitshift+0xac>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <DMA_CalcBaseAndBitshift+0xae>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d024      	beq.n	80062bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3b10      	subs	r3, #16
 800627a:	4a27      	ldr	r2, [pc, #156]	@ (8006318 <DMA_CalcBaseAndBitshift+0x158>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	4a24      	ldr	r2, [pc, #144]	@ (800631c <DMA_CalcBaseAndBitshift+0x15c>)
 800628c:	5cd3      	ldrb	r3, [r2, r3]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d908      	bls.n	80062ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006320 <DMA_CalcBaseAndBitshift+0x160>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80062aa:	e00d      	b.n	80062c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <DMA_CalcBaseAndBitshift+0x160>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ba:	e005      	b.n	80062c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40020010 	.word	0x40020010
 80062dc:	40020028 	.word	0x40020028
 80062e0:	40020040 	.word	0x40020040
 80062e4:	40020058 	.word	0x40020058
 80062e8:	40020070 	.word	0x40020070
 80062ec:	40020088 	.word	0x40020088
 80062f0:	400200a0 	.word	0x400200a0
 80062f4:	400200b8 	.word	0x400200b8
 80062f8:	40020410 	.word	0x40020410
 80062fc:	40020428 	.word	0x40020428
 8006300:	40020440 	.word	0x40020440
 8006304:	40020458 	.word	0x40020458
 8006308:	40020470 	.word	0x40020470
 800630c:	40020488 	.word	0x40020488
 8006310:	400204a0 	.word	0x400204a0
 8006314:	400204b8 	.word	0x400204b8
 8006318:	aaaaaaab 	.word	0xaaaaaaab
 800631c:	08018c64 	.word	0x08018c64
 8006320:	fffffc00 	.word	0xfffffc00

08006324 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d120      	bne.n	800637a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	2b03      	cmp	r3, #3
 800633e:	d858      	bhi.n	80063f2 <DMA_CheckFifoParam+0xce>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <DMA_CheckFifoParam+0x24>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006359 	.word	0x08006359
 800634c:	0800636b 	.word	0x0800636b
 8006350:	08006359 	.word	0x08006359
 8006354:	080063f3 	.word	0x080063f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d048      	beq.n	80063f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006368:	e045      	b.n	80063f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006372:	d142      	bne.n	80063fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006378:	e03f      	b.n	80063fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006382:	d123      	bne.n	80063cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	2b03      	cmp	r3, #3
 800638a:	d838      	bhi.n	80063fe <DMA_CheckFifoParam+0xda>
 800638c:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <DMA_CheckFifoParam+0x70>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063ab 	.word	0x080063ab
 800639c:	080063a5 	.word	0x080063a5
 80063a0:	080063bd 	.word	0x080063bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
        break;
 80063a8:	e030      	b.n	800640c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d025      	beq.n	8006402 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ba:	e022      	b.n	8006402 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063c4:	d11f      	bne.n	8006406 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ca:	e01c      	b.n	8006406 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d902      	bls.n	80063da <DMA_CheckFifoParam+0xb6>
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d003      	beq.n	80063e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063d8:	e018      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
        break;
 80063de:	e015      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
    break;
 80063f0:	e00b      	b.n	800640a <DMA_CheckFifoParam+0xe6>
        break;
 80063f2:	bf00      	nop
 80063f4:	e00a      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        break;
 80063f6:	bf00      	nop
 80063f8:	e008      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        break;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        break;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <DMA_CheckFifoParam+0xe8>
        break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <DMA_CheckFifoParam+0xe8>
    break;
 800640a:	bf00      	nop
    }
  }

  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop

0800641c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a38      	ldr	r2, [pc, #224]	@ (8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a36      	ldr	r2, [pc, #216]	@ (8006514 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01d      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a35      	ldr	r2, [pc, #212]	@ (8006518 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a33      	ldr	r2, [pc, #204]	@ (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a32      	ldr	r2, [pc, #200]	@ (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2f      	ldr	r2, [pc, #188]	@ (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2d      	ldr	r2, [pc, #180]	@ (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d101      	bne.n	800647e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01a      	beq.n	80064ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3b08      	subs	r3, #8
 800648c:	4a28      	ldr	r2, [pc, #160]	@ (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4b26      	ldr	r3, [pc, #152]	@ (8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a24      	ldr	r2, [pc, #144]	@ (8006538 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2201      	movs	r2, #1
 80064b2:	409a      	lsls	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064b8:	e024      	b.n	8006504 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	3b10      	subs	r3, #16
 80064c2:	4a1e      	ldr	r2, [pc, #120]	@ (800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d806      	bhi.n	80064e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d902      	bls.n	80064e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3308      	adds	r3, #8
 80064e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4b18      	ldr	r3, [pc, #96]	@ (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a16      	ldr	r2, [pc, #88]	@ (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80064f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2201      	movs	r2, #1
 80064fe:	409a      	lsls	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	58025408 	.word	0x58025408
 8006514:	5802541c 	.word	0x5802541c
 8006518:	58025430 	.word	0x58025430
 800651c:	58025444 	.word	0x58025444
 8006520:	58025458 	.word	0x58025458
 8006524:	5802546c 	.word	0x5802546c
 8006528:	58025480 	.word	0x58025480
 800652c:	58025494 	.word	0x58025494
 8006530:	cccccccd 	.word	0xcccccccd
 8006534:	16009600 	.word	0x16009600
 8006538:	58025880 	.word	0x58025880
 800653c:	aaaaaaab 	.word	0xaaaaaaab
 8006540:	400204b8 	.word	0x400204b8
 8006544:	4002040f 	.word	0x4002040f
 8006548:	10008200 	.word	0x10008200
 800654c:	40020880 	.word	0x40020880

08006550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d04a      	beq.n	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d847      	bhi.n	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a25      	ldr	r2, [pc, #148]	@ (8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a24      	ldr	r2, [pc, #144]	@ (800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d01d      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a22      	ldr	r2, [pc, #136]	@ (8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1f      	ldr	r2, [pc, #124]	@ (8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1e      	ldr	r2, [pc, #120]	@ (800661c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d101      	bne.n	80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4b17      	ldr	r3, [pc, #92]	@ (8006628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a15      	ldr	r2, [pc, #84]	@ (800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80065da:	e009      	b.n	80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	461a      	mov	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a11      	ldr	r2, [pc, #68]	@ (8006634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	2201      	movs	r2, #1
 80065f6:	409a      	lsls	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	58025408 	.word	0x58025408
 800660c:	5802541c 	.word	0x5802541c
 8006610:	58025430 	.word	0x58025430
 8006614:	58025444 	.word	0x58025444
 8006618:	58025458 	.word	0x58025458
 800661c:	5802546c 	.word	0x5802546c
 8006620:	58025480 	.word	0x58025480
 8006624:	58025494 	.word	0x58025494
 8006628:	1600963f 	.word	0x1600963f
 800662c:	58025940 	.word	0x58025940
 8006630:	1000823f 	.word	0x1000823f
 8006634:	40020940 	.word	0x40020940

08006638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	@ 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006646:	4b89      	ldr	r3, [pc, #548]	@ (800686c <HAL_GPIO_Init+0x234>)
 8006648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800664a:	e194      	b.n	8006976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	4013      	ands	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8186 	beq.w	8006970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d005      	beq.n	800667c <HAL_GPIO_Init+0x44>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d130      	bne.n	80066de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	2203      	movs	r2, #3
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066b2:	2201      	movs	r2, #1
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0201 	and.w	r2, r3, #1
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d017      	beq.n	800671a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	2203      	movs	r2, #3
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	43db      	mvns	r3, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4313      	orrs	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d123      	bne.n	800676e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	08da      	lsrs	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3208      	adds	r2, #8
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	220f      	movs	r2, #15
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4013      	ands	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	69b9      	ldr	r1, [r7, #24]
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	2203      	movs	r2, #3
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0203 	and.w	r2, r3, #3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80e0 	beq.w	8006970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006870 <HAL_GPIO_Init+0x238>)
 80067b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006870 <HAL_GPIO_Init+0x238>)
 80067b8:	f043 0302 	orr.w	r3, r3, #2
 80067bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80067c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <HAL_GPIO_Init+0x238>)
 80067c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067ce:	4a29      	ldr	r2, [pc, #164]	@ (8006874 <HAL_GPIO_Init+0x23c>)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	3302      	adds	r3, #2
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	220f      	movs	r2, #15
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a20      	ldr	r2, [pc, #128]	@ (8006878 <HAL_GPIO_Init+0x240>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d052      	beq.n	80068a0 <HAL_GPIO_Init+0x268>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a1f      	ldr	r2, [pc, #124]	@ (800687c <HAL_GPIO_Init+0x244>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d031      	beq.n	8006866 <HAL_GPIO_Init+0x22e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1e      	ldr	r2, [pc, #120]	@ (8006880 <HAL_GPIO_Init+0x248>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <HAL_GPIO_Init+0x22a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1d      	ldr	r2, [pc, #116]	@ (8006884 <HAL_GPIO_Init+0x24c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d025      	beq.n	800685e <HAL_GPIO_Init+0x226>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1c      	ldr	r2, [pc, #112]	@ (8006888 <HAL_GPIO_Init+0x250>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01f      	beq.n	800685a <HAL_GPIO_Init+0x222>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <HAL_GPIO_Init+0x254>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d019      	beq.n	8006856 <HAL_GPIO_Init+0x21e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_GPIO_Init+0x258>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_GPIO_Init+0x21a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a19      	ldr	r2, [pc, #100]	@ (8006894 <HAL_GPIO_Init+0x25c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00d      	beq.n	800684e <HAL_GPIO_Init+0x216>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a18      	ldr	r2, [pc, #96]	@ (8006898 <HAL_GPIO_Init+0x260>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <HAL_GPIO_Init+0x212>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a17      	ldr	r2, [pc, #92]	@ (800689c <HAL_GPIO_Init+0x264>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <HAL_GPIO_Init+0x20e>
 8006842:	2309      	movs	r3, #9
 8006844:	e02d      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 8006846:	230a      	movs	r3, #10
 8006848:	e02b      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 800684a:	2308      	movs	r3, #8
 800684c:	e029      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 800684e:	2307      	movs	r3, #7
 8006850:	e027      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 8006852:	2306      	movs	r3, #6
 8006854:	e025      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 8006856:	2305      	movs	r3, #5
 8006858:	e023      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 800685a:	2304      	movs	r3, #4
 800685c:	e021      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 800685e:	2303      	movs	r3, #3
 8006860:	e01f      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 8006862:	2302      	movs	r3, #2
 8006864:	e01d      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 8006866:	2301      	movs	r3, #1
 8006868:	e01b      	b.n	80068a2 <HAL_GPIO_Init+0x26a>
 800686a:	bf00      	nop
 800686c:	58000080 	.word	0x58000080
 8006870:	58024400 	.word	0x58024400
 8006874:	58000400 	.word	0x58000400
 8006878:	58020000 	.word	0x58020000
 800687c:	58020400 	.word	0x58020400
 8006880:	58020800 	.word	0x58020800
 8006884:	58020c00 	.word	0x58020c00
 8006888:	58021000 	.word	0x58021000
 800688c:	58021400 	.word	0x58021400
 8006890:	58021800 	.word	0x58021800
 8006894:	58021c00 	.word	0x58021c00
 8006898:	58022000 	.word	0x58022000
 800689c:	58022400 	.word	0x58022400
 80068a0:	2300      	movs	r3, #0
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	f002 0203 	and.w	r2, r2, #3
 80068a8:	0092      	lsls	r2, r2, #2
 80068aa:	4093      	lsls	r3, r2
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068b2:	4938      	ldr	r1, [pc, #224]	@ (8006994 <HAL_GPIO_Init+0x35c>)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	089b      	lsrs	r3, r3, #2
 80068b8:	3302      	adds	r3, #2
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006914:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	43db      	mvns	r3, r3
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	4013      	ands	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	43db      	mvns	r3, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4013      	ands	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	3301      	adds	r3, #1
 8006974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	f47f ae63 	bne.w	800664c <HAL_GPIO_Init+0x14>
  }
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	3724      	adds	r7, #36	@ 0x24
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	58000400 	.word	0x58000400

08006998 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069a6:	4b75      	ldr	r3, [pc, #468]	@ (8006b7c <HAL_GPIO_DeInit+0x1e4>)
 80069a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80069aa:	e0d9      	b.n	8006b60 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80069ac:	2201      	movs	r2, #1
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	4013      	ands	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80cc 	beq.w	8006b5a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80069c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006b80 <HAL_GPIO_DeInit+0x1e8>)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	3302      	adds	r3, #2
 80069ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ce:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	220f      	movs	r2, #15
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4013      	ands	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a67      	ldr	r2, [pc, #412]	@ (8006b84 <HAL_GPIO_DeInit+0x1ec>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d037      	beq.n	8006a5c <HAL_GPIO_DeInit+0xc4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a66      	ldr	r2, [pc, #408]	@ (8006b88 <HAL_GPIO_DeInit+0x1f0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d031      	beq.n	8006a58 <HAL_GPIO_DeInit+0xc0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a65      	ldr	r2, [pc, #404]	@ (8006b8c <HAL_GPIO_DeInit+0x1f4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d02b      	beq.n	8006a54 <HAL_GPIO_DeInit+0xbc>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a64      	ldr	r2, [pc, #400]	@ (8006b90 <HAL_GPIO_DeInit+0x1f8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d025      	beq.n	8006a50 <HAL_GPIO_DeInit+0xb8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a63      	ldr	r2, [pc, #396]	@ (8006b94 <HAL_GPIO_DeInit+0x1fc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d01f      	beq.n	8006a4c <HAL_GPIO_DeInit+0xb4>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a62      	ldr	r2, [pc, #392]	@ (8006b98 <HAL_GPIO_DeInit+0x200>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d019      	beq.n	8006a48 <HAL_GPIO_DeInit+0xb0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a61      	ldr	r2, [pc, #388]	@ (8006b9c <HAL_GPIO_DeInit+0x204>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_GPIO_DeInit+0xac>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a60      	ldr	r2, [pc, #384]	@ (8006ba0 <HAL_GPIO_DeInit+0x208>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00d      	beq.n	8006a40 <HAL_GPIO_DeInit+0xa8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a5f      	ldr	r2, [pc, #380]	@ (8006ba4 <HAL_GPIO_DeInit+0x20c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <HAL_GPIO_DeInit+0xa4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ba8 <HAL_GPIO_DeInit+0x210>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_GPIO_DeInit+0xa0>
 8006a34:	2309      	movs	r3, #9
 8006a36:	e012      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a38:	230a      	movs	r3, #10
 8006a3a:	e010      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	e00e      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a40:	2307      	movs	r3, #7
 8006a42:	e00c      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a44:	2306      	movs	r3, #6
 8006a46:	e00a      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a48:	2305      	movs	r3, #5
 8006a4a:	e008      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	e006      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a50:	2303      	movs	r3, #3
 8006a52:	e004      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e002      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_GPIO_DeInit+0xc6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	f002 0203 	and.w	r2, r2, #3
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	4093      	lsls	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d136      	bne.n	8006adc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	401a      	ands	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	43db      	mvns	r3, r3
 8006a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a98:	4013      	ands	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aaa:	4013      	ands	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	220f      	movs	r2, #15
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006abe:	4a30      	ldr	r2, [pc, #192]	@ (8006b80 <HAL_GPIO_DeInit+0x1e8>)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	089b      	lsrs	r3, r3, #2
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	43da      	mvns	r2, r3
 8006ace:	482c      	ldr	r0, [pc, #176]	@ (8006b80 <HAL_GPIO_DeInit+0x1e8>)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	089b      	lsrs	r3, r3, #2
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	3302      	adds	r3, #2
 8006ad8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	2103      	movs	r1, #3
 8006ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	08da      	lsrs	r2, r3, #3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3208      	adds	r2, #8
 8006af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	220f      	movs	r2, #15
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	08d2      	lsrs	r2, r2, #3
 8006b10:	4019      	ands	r1, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3208      	adds	r2, #8
 8006b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	2103      	movs	r1, #3
 8006b24:	fa01 f303 	lsl.w	r3, r1, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	401a      	ands	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	2101      	movs	r1, #1
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	401a      	ands	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	2103      	movs	r1, #3
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	401a      	ands	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af1f 	bne.w	80069ac <HAL_GPIO_DeInit+0x14>
  }
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	58000080 	.word	0x58000080
 8006b80:	58000400 	.word	0x58000400
 8006b84:	58020000 	.word	0x58020000
 8006b88:	58020400 	.word	0x58020400
 8006b8c:	58020800 	.word	0x58020800
 8006b90:	58020c00 	.word	0x58020c00
 8006b94:	58021000 	.word	0x58021000
 8006b98:	58021400 	.word	0x58021400
 8006b9c:	58021800 	.word	0x58021800
 8006ba0:	58021c00 	.word	0x58021c00
 8006ba4:	58022000 	.word	0x58022000
 8006ba8:	58022400 	.word	0x58022400

08006bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	807b      	strh	r3, [r7, #2]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bbc:	787b      	ldrb	r3, [r7, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bc2:	887a      	ldrh	r2, [r7, #2]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006bc8:	e003      	b.n	8006bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006bca:	887b      	ldrh	r3, [r7, #2]
 8006bcc:	041a      	lsls	r2, r3, #16
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	619a      	str	r2, [r3, #24]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bf0:	887a      	ldrh	r2, [r7, #2]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	041a      	lsls	r2, r3, #16
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	43d9      	mvns	r1, r3
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	400b      	ands	r3, r1
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	619a      	str	r2, [r3, #24]
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	4603      	mov	r3, r0
 8006c1a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa ff09 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006c50:	4a08      	ldr	r2, [pc, #32]	@ (8006c74 <HAL_HSEM_FastTake+0x2c>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3320      	adds	r3, #32
 8006c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	@ (8006c78 <HAL_HSEM_FastTake+0x30>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d101      	bne.n	8006c64 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e000      	b.n	8006c66 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	58026400 	.word	0x58026400
 8006c78:	80000300 	.word	0x80000300

08006c7c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006c86:	4906      	ldr	r1, [pc, #24]	@ (8006ca0 <HAL_HSEM_Release+0x24>)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	58026400 	.word	0x58026400

08006ca4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006cbc:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8006cca:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	4906      	ldr	r1, [pc, #24]	@ (8006ce8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	604b      	str	r3, [r1, #4]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	58000400 	.word	0x58000400

08006cec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e0fe      	b.n	8006efc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa fb56 	bl	80013c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f007 fb8e 	bl	800e446 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7c1a      	ldrb	r2, [r3, #16]
 8006d32:	f88d 2000 	strb.w	r2, [sp]
 8006d36:	3304      	adds	r3, #4
 8006d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3a:	f007 fa5f 	bl	800e1fc <USB_CoreInit>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0d5      	b.n	8006efc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f007 fb86 	bl	800e468 <USB_SetCurrentMode>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e0c6      	b.n	8006efc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e04a      	b.n	8006e0a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d74:	7bfa      	ldrb	r2, [r7, #15]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	3315      	adds	r3, #21
 8006d84:	2201      	movs	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d88:	7bfa      	ldrb	r2, [r7, #15]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3314      	adds	r3, #20
 8006d98:	7bfa      	ldrb	r2, [r7, #15]
 8006d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d9c:	7bfa      	ldrb	r2, [r7, #15]
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	b298      	uxth	r0, r3
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	332e      	adds	r3, #46	@ 0x2e
 8006db0:	4602      	mov	r2, r0
 8006db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dc8:	7bfa      	ldrb	r2, [r7, #15]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	331c      	adds	r3, #28
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	3320      	adds	r3, #32
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006df0:	7bfa      	ldrb	r2, [r7, #15]
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	3324      	adds	r3, #36	@ 0x24
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	3301      	adds	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	791b      	ldrb	r3, [r3, #4]
 8006e0e:	7bfa      	ldrb	r2, [r7, #15]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d3af      	bcc.n	8006d74 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
 8006e18:	e044      	b.n	8006ea4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e1a:	7bfa      	ldrb	r2, [r7, #15]
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006e42:	7bfa      	ldrb	r2, [r7, #15]
 8006e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e46:	7bfa      	ldrb	r2, [r7, #15]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e88:	7bfa      	ldrb	r2, [r7, #15]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	791b      	ldrb	r3, [r3, #4]
 8006ea8:	7bfa      	ldrb	r2, [r7, #15]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d3b5      	bcc.n	8006e1a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7c1a      	ldrb	r2, [r3, #16]
 8006eb6:	f88d 2000 	strb.w	r2, [sp]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ebe:	f007 fb1f 	bl	800e500 <USB_DevInit>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e013      	b.n	8006efc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7b1b      	ldrb	r3, [r3, #12]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d102      	bne.n	8006ef0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f9ee 	bl	80082cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f008 fb62 	bl	800f5be <USB_DevDisconnect>

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_PCD_Start+0x1c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e022      	b.n	8006f66 <HAL_PCD_Start+0x62>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d105      	bne.n	8006f48 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f007 fa69 	bl	800e424 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f008 fb10 	bl	800f57c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_PCD_Stop+0x1c>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e028      	b.n	8006fdc <HAL_PCD_Stop+0x6e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f007 fa55 	bl	800e446 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f008 fb0c 	bl	800f5be <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2110      	movs	r1, #16
 8006fac:	4618      	mov	r0, r3
 8006fae:	f007 fc05 	bl	800e7bc <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d105      	bne.n	8006fd2 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b08d      	sub	sp, #52	@ 0x34
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f008 fb93 	bl	800f726 <USB_GetMode>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 84b9 	bne.w	800797a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f008 faf7 	bl	800f600 <USB_ReadInterrupts>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 84af 	beq.w	8007978 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f008 fae4 	bl	800f600 <USB_ReadInterrupts>
 8007038:	4603      	mov	r3, r0
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f002 0202 	and.w	r2, r2, #2
 8007050:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f008 fad2 	bl	800f600 <USB_ReadInterrupts>
 800705c:	4603      	mov	r3, r0
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d161      	bne.n	800712a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0210 	bic.w	r2, r2, #16
 8007074:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f003 020f 	and.w	r2, r3, #15
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	3304      	adds	r3, #4
 8007094:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800709c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070a0:	d124      	bne.n	80070ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d035      	beq.n	800711a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070bc:	b29b      	uxth	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	6a38      	ldr	r0, [r7, #32]
 80070c2:	f008 f909 	bl	800f2d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070d2:	441a      	add	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e4:	441a      	add	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	615a      	str	r2, [r3, #20]
 80070ea:	e016      	b.n	800711a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80070f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070f6:	d110      	bne.n	800711a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070fe:	2208      	movs	r2, #8
 8007100:	4619      	mov	r1, r3
 8007102:	6a38      	ldr	r0, [r7, #32]
 8007104:	f008 f8e8 	bl	800f2d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	091b      	lsrs	r3, r3, #4
 8007110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007114:	441a      	add	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0210 	orr.w	r2, r2, #16
 8007128:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f008 fa66 	bl	800f600 <USB_ReadInterrupts>
 8007134:	4603      	mov	r3, r0
 8007136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800713a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800713e:	f040 80a7 	bne.w	8007290 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f008 fa6b 	bl	800f626 <USB_ReadDevAllOutEpInterrupt>
 8007150:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007152:	e099      	b.n	8007288 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 808e 	beq.w	800727c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f008 fa8f 	bl	800f68e <USB_ReadDevOutEPInterrupt>
 8007170:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007188:	461a      	mov	r2, r3
 800718a:	2301      	movs	r3, #1
 800718c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800718e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 ff15 	bl	8007fc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ac:	461a      	mov	r2, r3
 80071ae:	2308      	movs	r3, #8
 80071b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80071b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 ffeb 	bl	8008190 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	2310      	movs	r3, #16
 80071d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d030      	beq.n	8007242 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e8:	2b80      	cmp	r3, #128	@ 0x80
 80071ea:	d109      	bne.n	8007200 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4413      	add	r3, r2
 8007212:	3304      	adds	r3, #4
 8007214:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d108      	bne.n	8007230 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2200      	movs	r2, #0
 8007222:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	b2db      	uxtb	r3, r3
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fba8 	bl	8007980 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723c:	461a      	mov	r2, r3
 800723e:	2302      	movs	r3, #2
 8007240:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007258:	461a      	mov	r2, r3
 800725a:	2320      	movs	r3, #32
 800725c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007274:	461a      	mov	r2, r3
 8007276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800727a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af62 	bne.w	8007154 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f008 f9b3 	bl	800f600 <USB_ReadInterrupts>
 800729a:	4603      	mov	r3, r0
 800729c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072a4:	f040 80db 	bne.w	800745e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f008 f9d4 	bl	800f65a <USB_ReadDevAllInEpInterrupt>
 80072b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80072b8:	e0cd      	b.n	8007456 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80c2 	beq.w	800744a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f008 f9fa 	bl	800f6ca <USB_ReadDevInEPInterrupt>
 80072d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d057      	beq.n	8007392 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	2201      	movs	r2, #1
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	43db      	mvns	r3, r3
 80072fc:	69f9      	ldr	r1, [r7, #28]
 80072fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007302:	4013      	ands	r3, r2
 8007304:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007312:	461a      	mov	r2, r3
 8007314:	2301      	movs	r3, #1
 8007316:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	799b      	ldrb	r3, [r3, #6]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d132      	bne.n	8007386 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3320      	adds	r3, #32
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4403      	add	r3, r0
 8007340:	331c      	adds	r3, #28
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4419      	add	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734a:	4613      	mov	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4403      	add	r3, r0
 8007354:	3320      	adds	r3, #32
 8007356:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d113      	bne.n	8007386 <HAL_PCD_IRQHandler+0x3a2>
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007362:	4613      	mov	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3324      	adds	r3, #36	@ 0x24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d108      	bne.n	8007386 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800737e:	461a      	mov	r2, r3
 8007380:	2101      	movs	r1, #1
 8007382:	f008 fa03 	bl	800f78c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f00e fbb5 	bl	8015afc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	461a      	mov	r2, r3
 80073aa:	2308      	movs	r3, #8
 80073ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c4:	461a      	mov	r2, r3
 80073c6:	2310      	movs	r3, #16
 80073c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	461a      	mov	r2, r3
 80073e2:	2340      	movs	r3, #64	@ 0x40
 80073e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d023      	beq.n	8007438 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80073f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073f2:	6a38      	ldr	r0, [r7, #32]
 80073f4:	f007 f9e2 	bl	800e7bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80073f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	3310      	adds	r3, #16
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4413      	add	r3, r2
 8007408:	3304      	adds	r3, #4
 800740a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	78db      	ldrb	r3, [r3, #3]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d108      	bne.n	8007426 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fab9 	bl	8007998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007432:	461a      	mov	r2, r3
 8007434:	2302      	movs	r3, #2
 8007436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fd2f 	bl	8007ea8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	3301      	adds	r3, #1
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	f47f af2e 	bne.w	80072ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f008 f8cc 	bl	800f600 <USB_ReadInterrupts>
 8007468:	4603      	mov	r3, r0
 800746a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800746e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007472:	d122      	bne.n	80074ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800748e:	2b01      	cmp	r3, #1
 8007490:	d108      	bne.n	80074a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800749a:	2100      	movs	r1, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 ff39 	bl	8008314 <HAL_PCDEx_LPM_Callback>
 80074a2:	e002      	b.n	80074aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f00e fcd9 	bl	8015e5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80074b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f008 f89e 	bl	800f600 <USB_ReadInterrupts>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d112      	bne.n	80074f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d102      	bne.n	80074e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f00e fca5 	bl	8015e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695a      	ldr	r2, [r3, #20]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80074f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f008 f880 	bl	800f600 <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800750a:	d121      	bne.n	8007550 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695a      	ldr	r2, [r3, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800751a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007522:	2b00      	cmp	r3, #0
 8007524:	d111      	bne.n	800754a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007534:	089b      	lsrs	r3, r3, #2
 8007536:	f003 020f 	and.w	r2, r3, #15
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007540:	2101      	movs	r1, #1
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fee6 	bl	8008314 <HAL_PCDEx_LPM_Callback>
 8007548:	e002      	b.n	8007550 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f00e fc70 	bl	8015e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f008 f853 	bl	800f600 <USB_ReadInterrupts>
 800755a:	4603      	mov	r3, r0
 800755c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007564:	f040 80b7 	bne.w	80076d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2110      	movs	r1, #16
 8007582:	4618      	mov	r0, r3
 8007584:	f007 f91a 	bl	800e7bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007588:	2300      	movs	r3, #0
 800758a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800758c:	e046      	b.n	800761c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80075c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ce:	461a      	mov	r2, r3
 80075d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007614:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	3301      	adds	r3, #1
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	461a      	mov	r2, r3
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	4293      	cmp	r3, r2
 8007626:	d3b2      	bcc.n	800758e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007636:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800763a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7bdb      	ldrb	r3, [r3, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d016      	beq.n	8007672 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007654:	f043 030b 	orr.w	r3, r3, #11
 8007658:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800766a:	f043 030b 	orr.w	r3, r3, #11
 800766e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007670:	e015      	b.n	800769e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	4619      	mov	r1, r3
 8007682:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007686:	4313      	orrs	r3, r2
 8007688:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007698:	f043 030b 	orr.w	r3, r3, #11
 800769c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80076b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076c0:	461a      	mov	r2, r3
 80076c2:	f008 f863 	bl	800f78c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80076d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f007 ff90 	bl	800f600 <USB_ReadInterrupts>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ea:	d123      	bne.n	8007734 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f008 f827 	bl	800f744 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f007 f8d7 	bl	800e8ae <USB_GetDevSpeed>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681c      	ldr	r4, [r3, #0]
 800770c:	f001 fe02 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 8007710:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007716:	461a      	mov	r2, r3
 8007718:	4620      	mov	r0, r4
 800771a:	f006 fde1 	bl	800e2e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f00e fb22 	bl	8015d68 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695a      	ldr	r2, [r3, #20]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007732:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f007 ff61 	bl	800f600 <USB_ReadInterrupts>
 800773e:	4603      	mov	r3, r0
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b08      	cmp	r3, #8
 8007746:	d10a      	bne.n	800775e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f00e fb9d 	bl	8015e88 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f002 0208 	and.w	r2, r2, #8
 800775c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f007 ff4c 	bl	800f600 <USB_ReadInterrupts>
 8007768:	4603      	mov	r3, r0
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d123      	bne.n	80077ba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800777e:	2301      	movs	r3, #1
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
 8007782:	e014      	b.n	80077ae <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d105      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb22 	bl	8007dec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	3301      	adds	r3, #1
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d3e4      	bcc.n	8007784 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f007 ff1e 	bl	800f600 <USB_ReadInterrupts>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ce:	d13c      	bne.n	800784a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077d0:	2301      	movs	r3, #1
 80077d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d4:	e02b      	b.n	800782e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ea:	4613      	mov	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	3318      	adds	r3, #24
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d115      	bne.n	8007828 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80077fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da12      	bge.n	8007828 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007806:	4613      	mov	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3317      	adds	r3, #23
 8007812:	2201      	movs	r2, #1
 8007814:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	b2db      	uxtb	r3, r3
 800781a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fae2 	bl	8007dec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	3301      	adds	r3, #1
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	4293      	cmp	r3, r2
 8007838:	d3cd      	bcc.n	80077d6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f007 fed6 	bl	800f600 <USB_ReadInterrupts>
 8007854:	4603      	mov	r3, r0
 8007856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800785a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785e:	d156      	bne.n	800790e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007860:	2301      	movs	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
 8007864:	e045      	b.n	80078f2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d12e      	bne.n	80078ec <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800788e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007890:	2b00      	cmp	r3, #0
 8007892:	da2b      	bge.n	80078ec <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	0c1a      	lsrs	r2, r3, #16
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800789e:	4053      	eors	r3, r2
 80078a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d121      	bne.n	80078ec <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078e8:	6053      	str	r3, [r2, #4]
            break;
 80078ea:	e008      	b.n	80078fe <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d3b3      	bcc.n	8007866 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800790c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f007 fe74 	bl	800f600 <USB_ReadInterrupts>
 8007918:	4603      	mov	r3, r0
 800791a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	d10a      	bne.n	800793a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f00e fa4f 	bl	8015dc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f007 fe5e 	bl	800f600 <USB_ReadInterrupts>
 8007944:	4603      	mov	r3, r0
 8007946:	f003 0304 	and.w	r3, r3, #4
 800794a:	2b04      	cmp	r3, #4
 800794c:	d115      	bne.n	800797a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f00e fa47 	bl	8015df4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6859      	ldr	r1, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	e000      	b.n	800797a <HAL_PCD_IRQHandler+0x996>
      return;
 8007978:	bf00      	nop
    }
  }
}
 800797a:	3734      	adds	r7, #52	@ 0x34
 800797c:	46bd      	mov	sp, r7
 800797e:	bd90      	pop	{r4, r7, pc}

08007980 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_PCD_SetAddress+0x1a>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e012      	b.n	80079f0 <HAL_PCD_SetAddress+0x40>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f007 fda5 	bl	800f530 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	70fb      	strb	r3, [r7, #3]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	803b      	strh	r3, [r7, #0]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da0f      	bge.n	8007a3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	3304      	adds	r3, #4
 8007a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	705a      	strb	r2, [r3, #1]
 8007a3c:	e00f      	b.n	8007a5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	3304      	adds	r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007a6a:	883b      	ldrh	r3, [r7, #0]
 8007a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	78ba      	ldrb	r2, [r7, #2]
 8007a78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a8c:	78bb      	ldrb	r3, [r7, #2]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d102      	bne.n	8007a98 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_PCD_EP_Open+0xae>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e00e      	b.n	8007ac4 <HAL_PCD_EP_Open+0xcc>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f006 ff1f 	bl	800e8f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da0f      	bge.n	8007b00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	f003 020f 	and.w	r2, r3, #15
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	3310      	adds	r3, #16
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4413      	add	r3, r2
 8007af4:	3304      	adds	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	705a      	strb	r2, [r3, #1]
 8007afe:	e00f      	b.n	8007b20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	4613      	mov	r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	3304      	adds	r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_PCD_EP_Close+0x6e>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e00e      	b.n	8007b58 <HAL_PCD_EP_Close+0x8c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f006 ff5d 	bl	800ea08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	f003 020f 	and.w	r2, r3, #15
 8007b76:	4613      	mov	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	3304      	adds	r3, #4
 8007b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	799b      	ldrb	r3, [r3, #6]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d102      	bne.n	8007bbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	799b      	ldrb	r3, [r3, #6]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	f006 fffa 	bl	800ebc0 <USB_EPStartXfer>

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007bf8:	681b      	ldr	r3, [r3, #0]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
 8007c12:	460b      	mov	r3, r1
 8007c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	3310      	adds	r3, #16
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2201      	movs	r2, #1
 8007c44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	799b      	ldrb	r3, [r3, #6]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d102      	bne.n	8007c60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	799b      	ldrb	r3, [r3, #6]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6979      	ldr	r1, [r7, #20]
 8007c6c:	f006 ffa8 	bl	800ebc0 <USB_EPStartXfer>

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	7912      	ldrb	r2, [r2, #4]
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d901      	bls.n	8007c98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e04f      	b.n	8007d38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	da0f      	bge.n	8007cc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	f003 020f 	and.w	r2, r3, #15
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	3310      	adds	r3, #16
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	705a      	strb	r2, [r3, #1]
 8007cbe:	e00d      	b.n	8007cdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_PCD_EP_SetStall+0x82>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e01d      	b.n	8007d38 <HAL_PCD_EP_SetStall+0xbe>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68f9      	ldr	r1, [r7, #12]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f007 fb3c 	bl	800f388 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7999      	ldrb	r1, [r3, #6]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f007 fd2f 	bl	800f78c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	7912      	ldrb	r2, [r2, #4]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e042      	b.n	8007de4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da0f      	bge.n	8007d86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	f003 020f 	and.w	r2, r3, #15
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	3310      	adds	r3, #16
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4413      	add	r3, r2
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	705a      	strb	r2, [r3, #1]
 8007d84:	e00f      	b.n	8007da6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	f003 020f 	and.w	r2, r3, #15
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_PCD_EP_ClrStall+0x86>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e00e      	b.n	8007de4 <HAL_PCD_EP_ClrStall+0xa4>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f007 fb45 	bl	800f464 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da0c      	bge.n	8007e1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	f003 020f 	and.w	r2, r3, #15
 8007e06:	4613      	mov	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	3310      	adds	r3, #16
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	3304      	adds	r3, #4
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e00c      	b.n	8007e34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	f003 020f 	and.w	r2, r3, #15
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f007 f964 	bl	800f108 <USB_EPStopXfer>
 8007e40:	4603      	mov	r3, r0
 8007e42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_PCD_EP_Flush+0x1a>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e01b      	b.n	8007ea0 <HAL_PCD_EP_Flush+0x52>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8007e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da09      	bge.n	8007e8c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f006 fc99 	bl	800e7bc <USB_FlushTxFifo>
 8007e8a:	e004      	b.n	8007e96 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f006 fcc5 	bl	800e820 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	@ 0x28
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	3310      	adds	r3, #16
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3304      	adds	r3, #4
 8007ece:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	695a      	ldr	r2, [r3, #20]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d901      	bls.n	8007ee0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e06b      	b.n	8007fb8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d902      	bls.n	8007efc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3303      	adds	r3, #3
 8007f00:	089b      	lsrs	r3, r3, #2
 8007f02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f04:	e02a      	b.n	8007f5c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d902      	bls.n	8007f22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3303      	adds	r3, #3
 8007f26:	089b      	lsrs	r3, r3, #2
 8007f28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	68d9      	ldr	r1, [r3, #12]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	f007 f98c 	bl	800f25c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	441a      	add	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	441a      	add	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d809      	bhi.n	8007f86 <PCD_WriteEmptyTxFifo+0xde>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	695a      	ldr	r2, [r3, #20]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d203      	bcs.n	8007f86 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1bf      	bne.n	8007f06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d811      	bhi.n	8007fb6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	2201      	movs	r2, #1
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	43db      	mvns	r3, r3
 8007fac:	6939      	ldr	r1, [r7, #16]
 8007fae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	333c      	adds	r3, #60	@ 0x3c
 8007fd8:	3304      	adds	r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	799b      	ldrb	r3, [r3, #6]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d17b      	bne.n	80080ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d015      	beq.n	800802c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	4a61      	ldr	r2, [pc, #388]	@ (8008188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	f240 80b9 	bls.w	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80b3 	beq.w	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008022:	461a      	mov	r2, r3
 8008024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008028:	6093      	str	r3, [r2, #8]
 800802a:	e0a7      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008042:	461a      	mov	r2, r3
 8008044:	2320      	movs	r3, #32
 8008046:	6093      	str	r3, [r2, #8]
 8008048:	e098      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008050:	2b00      	cmp	r3, #0
 8008052:	f040 8093 	bne.w	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4a4b      	ldr	r2, [pc, #300]	@ (8008188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d90f      	bls.n	800807e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008074:	461a      	mov	r2, r3
 8008076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800807a:	6093      	str	r3, [r2, #8]
 800807c:	e07e      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	3304      	adds	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	0159      	lsls	r1, r3, #5
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	440b      	add	r3, r1
 80080a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d114      	bne.n	80080e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080c8:	461a      	mov	r2, r3
 80080ca:	2101      	movs	r1, #1
 80080cc:	f007 fb5e 	bl	800f78c <USB_EP0_OutStart>
 80080d0:	e006      	b.n	80080e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	441a      	add	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f00d fdbe 	bl	8015c68 <HAL_PCD_DataOutStageCallback>
 80080ec:	e046      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	4a26      	ldr	r2, [pc, #152]	@ (800818c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d124      	bne.n	8008140 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810c:	461a      	mov	r2, r3
 800810e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008112:	6093      	str	r3, [r2, #8]
 8008114:	e032      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812c:	461a      	mov	r2, r3
 800812e:	2320      	movs	r3, #32
 8008130:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f00d fd95 	bl	8015c68 <HAL_PCD_DataOutStageCallback>
 800813e:	e01d      	b.n	800817c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d114      	bne.n	8008170 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d108      	bne.n	8008170 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008168:	461a      	mov	r2, r3
 800816a:	2100      	movs	r1, #0
 800816c:	f007 fb0e 	bl	800f78c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f00d fd76 	bl	8015c68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	4f54300a 	.word	0x4f54300a
 800818c:	4f54310a 	.word	0x4f54310a

08008190 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	333c      	adds	r3, #60	@ 0x3c
 80081a8:	3304      	adds	r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4a15      	ldr	r2, [pc, #84]	@ (8008218 <PCD_EP_OutSetupPacket_int+0x88>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d90e      	bls.n	80081e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d009      	beq.n	80081e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081dc:	461a      	mov	r2, r3
 80081de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f00d fc0f 	bl	8015a08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008218 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d90c      	bls.n	800820c <PCD_EP_OutSetupPacket_int+0x7c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	799b      	ldrb	r3, [r3, #6]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d108      	bne.n	800820c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008204:	461a      	mov	r2, r3
 8008206:	2101      	movs	r1, #1
 8008208:	f007 fac0 	bl	800f78c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	4f54300a 	.word	0x4f54300a

0800821c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
 8008228:	4613      	mov	r3, r2
 800822a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d107      	bne.n	800824a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800823a:	883b      	ldrh	r3, [r7, #0]
 800823c:	0419      	lsls	r1, r3, #16
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	430a      	orrs	r2, r1
 8008246:	629a      	str	r2, [r3, #40]	@ 0x28
 8008248:	e028      	b.n	800829c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4413      	add	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
 800825c:	e00d      	b.n	800827a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	3340      	adds	r3, #64	@ 0x40
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	0c1b      	lsrs	r3, r3, #16
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	3301      	adds	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	3b01      	subs	r3, #1
 8008280:	429a      	cmp	r2, r3
 8008282:	d3ec      	bcc.n	800825e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008284:	883b      	ldrh	r3, [r7, #0]
 8008286:	0418      	lsls	r0, r3, #16
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	78fb      	ldrb	r3, [r7, #3]
 800828e:	3b01      	subs	r3, #1
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	4302      	orrs	r2, r0
 8008294:	3340      	adds	r3, #64	@ 0x40
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	887a      	ldrh	r2, [r7, #2]
 80082bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082fa:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <HAL_PCDEx_ActivateLPM+0x44>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	10000003 	.word	0x10000003

08008314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008334:	4b29      	ldr	r3, [pc, #164]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	2b06      	cmp	r3, #6
 800833e:	d00a      	beq.n	8008356 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008340:	4b26      	ldr	r3, [pc, #152]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	429a      	cmp	r2, r3
 800834c:	d001      	beq.n	8008352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e040      	b.n	80083d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e03e      	b.n	80083d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008356:	4b21      	ldr	r3, [pc, #132]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800835e:	491f      	ldr	r1, [pc, #124]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4313      	orrs	r3, r2
 8008364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008366:	f7fa ffaf 	bl	80032c8 <HAL_GetTick>
 800836a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800836c:	e009      	b.n	8008382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800836e:	f7fa ffab 	bl	80032c8 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800837c:	d901      	bls.n	8008382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e028      	b.n	80083d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008382:	4b16      	ldr	r3, [pc, #88]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800838a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800838e:	d1ee      	bne.n	800836e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b1e      	cmp	r3, #30
 8008394:	d008      	beq.n	80083a8 <HAL_PWREx_ConfigSupply+0x7c>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b2e      	cmp	r3, #46	@ 0x2e
 800839a:	d005      	beq.n	80083a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b1d      	cmp	r3, #29
 80083a0:	d002      	beq.n	80083a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80083a6:	d114      	bne.n	80083d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80083a8:	f7fa ff8e 	bl	80032c8 <HAL_GetTick>
 80083ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80083ae:	e009      	b.n	80083c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083b0:	f7fa ff8a 	bl	80032c8 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083be:	d901      	bls.n	80083c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e007      	b.n	80083d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_PWREx_ConfigSupply+0xb0>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d0:	d1ee      	bne.n	80083b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	58024800 	.word	0x58024800

080083e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4a04      	ldr	r2, [pc, #16]	@ (80083fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ee:	60d3      	str	r3, [r2, #12]
}
 80083f0:	bf00      	nop
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	58024800 	.word	0x58024800

08008400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08c      	sub	sp, #48	@ 0x30
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f000 bc48 	b.w	8008ca4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8088 	beq.w	8008532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008422:	4b99      	ldr	r3, [pc, #612]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800842a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800842c:	4b96      	ldr	r3, [pc, #600]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	2b10      	cmp	r3, #16
 8008436:	d007      	beq.n	8008448 <HAL_RCC_OscConfig+0x48>
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	2b18      	cmp	r3, #24
 800843c:	d111      	bne.n	8008462 <HAL_RCC_OscConfig+0x62>
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d10c      	bne.n	8008462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008448:	4b8f      	ldr	r3, [pc, #572]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d06d      	beq.n	8008530 <HAL_RCC_OscConfig+0x130>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d169      	bne.n	8008530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f000 bc21 	b.w	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800846a:	d106      	bne.n	800847a <HAL_RCC_OscConfig+0x7a>
 800846c:	4b86      	ldr	r3, [pc, #536]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a85      	ldr	r2, [pc, #532]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e02e      	b.n	80084d8 <HAL_RCC_OscConfig+0xd8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10c      	bne.n	800849c <HAL_RCC_OscConfig+0x9c>
 8008482:	4b81      	ldr	r3, [pc, #516]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a80      	ldr	r2, [pc, #512]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	4b7e      	ldr	r3, [pc, #504]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a7d      	ldr	r2, [pc, #500]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e01d      	b.n	80084d8 <HAL_RCC_OscConfig+0xd8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084a4:	d10c      	bne.n	80084c0 <HAL_RCC_OscConfig+0xc0>
 80084a6:	4b78      	ldr	r3, [pc, #480]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a77      	ldr	r2, [pc, #476]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	4b75      	ldr	r3, [pc, #468]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a74      	ldr	r2, [pc, #464]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	e00b      	b.n	80084d8 <HAL_RCC_OscConfig+0xd8>
 80084c0:	4b71      	ldr	r3, [pc, #452]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a70      	ldr	r2, [pc, #448]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	4b6e      	ldr	r3, [pc, #440]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a6d      	ldr	r2, [pc, #436]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d013      	beq.n	8008508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e0:	f7fa fef2 	bl	80032c8 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e8:	f7fa feee 	bl	80032c8 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b64      	cmp	r3, #100	@ 0x64
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e3d4      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084fa:	4b63      	ldr	r3, [pc, #396]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f0      	beq.n	80084e8 <HAL_RCC_OscConfig+0xe8>
 8008506:	e014      	b.n	8008532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fa fede 	bl	80032c8 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008510:	f7fa feda 	bl	80032c8 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	@ 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e3c0      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008522:	4b59      	ldr	r3, [pc, #356]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f0      	bne.n	8008510 <HAL_RCC_OscConfig+0x110>
 800852e:	e000      	b.n	8008532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 80ca 	beq.w	80086d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008540:	4b51      	ldr	r3, [pc, #324]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008548:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800854a:	4b4f      	ldr	r3, [pc, #316]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d007      	beq.n	8008566 <HAL_RCC_OscConfig+0x166>
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	2b18      	cmp	r3, #24
 800855a:	d156      	bne.n	800860a <HAL_RCC_OscConfig+0x20a>
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d151      	bne.n	800860a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008566:	4b48      	ldr	r3, [pc, #288]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_RCC_OscConfig+0x17e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e392      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800857e:	4b42      	ldr	r3, [pc, #264]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f023 0219 	bic.w	r2, r3, #25
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	493f      	ldr	r1, [pc, #252]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fa fe9a 	bl	80032c8 <HAL_GetTick>
 8008594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008598:	f7fa fe96 	bl	80032c8 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e37c      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085aa:	4b37      	ldr	r3, [pc, #220]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b6:	f7fa feb7 	bl	8003328 <HAL_GetREVID>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d817      	bhi.n	80085f4 <HAL_RCC_OscConfig+0x1f4>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d108      	bne.n	80085de <HAL_RCC_OscConfig+0x1de>
 80085cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80085d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085dc:	e07a      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085de:	4b2a      	ldr	r3, [pc, #168]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	031b      	lsls	r3, r3, #12
 80085ec:	4926      	ldr	r1, [pc, #152]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085f2:	e06f      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f4:	4b24      	ldr	r3, [pc, #144]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	061b      	lsls	r3, r3, #24
 8008602:	4921      	ldr	r1, [pc, #132]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008604:	4313      	orrs	r3, r2
 8008606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008608:	e064      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d047      	beq.n	80086a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008612:	4b1d      	ldr	r3, [pc, #116]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f023 0219 	bic.w	r2, r3, #25
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	491a      	ldr	r1, [pc, #104]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008620:	4313      	orrs	r3, r2
 8008622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008624:	f7fa fe50 	bl	80032c8 <HAL_GetTick>
 8008628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800862c:	f7fa fe4c 	bl	80032c8 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e332      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800863e:	4b12      	ldr	r3, [pc, #72]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0f0      	beq.n	800862c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800864a:	f7fa fe6d 	bl	8003328 <HAL_GetREVID>
 800864e:	4603      	mov	r3, r0
 8008650:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008654:	4293      	cmp	r3, r2
 8008656:	d819      	bhi.n	800868c <HAL_RCC_OscConfig+0x28c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b40      	cmp	r3, #64	@ 0x40
 800865e:	d108      	bne.n	8008672 <HAL_RCC_OscConfig+0x272>
 8008660:	4b09      	ldr	r3, [pc, #36]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008668:	4a07      	ldr	r2, [pc, #28]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 800866a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e030      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
 8008672:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	031b      	lsls	r3, r3, #12
 8008680:	4901      	ldr	r1, [pc, #4]	@ (8008688 <HAL_RCC_OscConfig+0x288>)
 8008682:	4313      	orrs	r3, r2
 8008684:	604b      	str	r3, [r1, #4]
 8008686:	e025      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
 8008688:	58024400 	.word	0x58024400
 800868c:	4b9a      	ldr	r3, [pc, #616]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	4997      	ldr	r1, [pc, #604]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800869c:	4313      	orrs	r3, r2
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	e018      	b.n	80086d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086a2:	4b95      	ldr	r3, [pc, #596]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a94      	ldr	r2, [pc, #592]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ae:	f7fa fe0b 	bl	80032c8 <HAL_GetTick>
 80086b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086b6:	f7fa fe07 	bl	80032c8 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e2ed      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086c8:	4b8b      	ldr	r3, [pc, #556]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f0      	bne.n	80086b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a9 	beq.w	8008834 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e2:	4b85      	ldr	r3, [pc, #532]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086ec:	4b82      	ldr	r3, [pc, #520]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80086ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d007      	beq.n	8008708 <HAL_RCC_OscConfig+0x308>
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2b18      	cmp	r3, #24
 80086fc:	d13a      	bne.n	8008774 <HAL_RCC_OscConfig+0x374>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d135      	bne.n	8008774 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008708:	4b7b      	ldr	r3, [pc, #492]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_RCC_OscConfig+0x320>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b80      	cmp	r3, #128	@ 0x80
 800871a:	d001      	beq.n	8008720 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e2c1      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008720:	f7fa fe02 	bl	8003328 <HAL_GetREVID>
 8008724:	4603      	mov	r3, r0
 8008726:	f241 0203 	movw	r2, #4099	@ 0x1003
 800872a:	4293      	cmp	r3, r2
 800872c:	d817      	bhi.n	800875e <HAL_RCC_OscConfig+0x35e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	2b20      	cmp	r3, #32
 8008734:	d108      	bne.n	8008748 <HAL_RCC_OscConfig+0x348>
 8008736:	4b70      	ldr	r3, [pc, #448]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800873e:	4a6e      	ldr	r2, [pc, #440]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008744:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008746:	e075      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008748:	4b6b      	ldr	r3, [pc, #428]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	069b      	lsls	r3, r3, #26
 8008756:	4968      	ldr	r1, [pc, #416]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008758:	4313      	orrs	r3, r2
 800875a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800875c:	e06a      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800875e:	4b66      	ldr	r3, [pc, #408]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	061b      	lsls	r3, r3, #24
 800876c:	4962      	ldr	r1, [pc, #392]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800876e:	4313      	orrs	r3, r2
 8008770:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008772:	e05f      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d042      	beq.n	8008802 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800877c:	4b5e      	ldr	r3, [pc, #376]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a5d      	ldr	r2, [pc, #372]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008788:	f7fa fd9e 	bl	80032c8 <HAL_GetTick>
 800878c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008790:	f7fa fd9a 	bl	80032c8 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e280      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087a2:	4b55      	ldr	r3, [pc, #340]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087ae:	f7fa fdbb 	bl	8003328 <HAL_GetREVID>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d817      	bhi.n	80087ec <HAL_RCC_OscConfig+0x3ec>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d108      	bne.n	80087d6 <HAL_RCC_OscConfig+0x3d6>
 80087c4:	4b4c      	ldr	r3, [pc, #304]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80087cc:	4a4a      	ldr	r2, [pc, #296]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087d2:	6053      	str	r3, [r2, #4]
 80087d4:	e02e      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
 80087d6:	4b48      	ldr	r3, [pc, #288]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	069b      	lsls	r3, r3, #26
 80087e4:	4944      	ldr	r1, [pc, #272]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	604b      	str	r3, [r1, #4]
 80087ea:	e023      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
 80087ec:	4b42      	ldr	r3, [pc, #264]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	493f      	ldr	r1, [pc, #252]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60cb      	str	r3, [r1, #12]
 8008800:	e018      	b.n	8008834 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008802:	4b3d      	ldr	r3, [pc, #244]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a3c      	ldr	r2, [pc, #240]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800880c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fa fd5b 	bl	80032c8 <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008816:	f7fa fd57 	bl	80032c8 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e23d      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008828:	4b33      	ldr	r3, [pc, #204]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f0      	bne.n	8008816 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d036      	beq.n	80088ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d019      	beq.n	800887c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008848:	4b2b      	ldr	r3, [pc, #172]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800884a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800884c:	4a2a      	ldr	r2, [pc, #168]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008854:	f7fa fd38 	bl	80032c8 <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800885c:	f7fa fd34 	bl	80032c8 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e21a      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800886e:	4b22      	ldr	r3, [pc, #136]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x45c>
 800887a:	e018      	b.n	80088ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800887c:	4b1e      	ldr	r3, [pc, #120]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 800887e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008880:	4a1d      	ldr	r2, [pc, #116]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 8008882:	f023 0301 	bic.w	r3, r3, #1
 8008886:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008888:	f7fa fd1e 	bl	80032c8 <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008890:	f7fa fd1a 	bl	80032c8 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e200      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088a2:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80088a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f0      	bne.n	8008890 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d039      	beq.n	800892e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01c      	beq.n	80088fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80088c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088ce:	f7fa fcfb 	bl	80032c8 <HAL_GetTick>
 80088d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088d4:	e008      	b.n	80088e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088d6:	f7fa fcf7 	bl	80032c8 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e1dd      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088e8:	4b03      	ldr	r3, [pc, #12]	@ (80088f8 <HAL_RCC_OscConfig+0x4f8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0f0      	beq.n	80088d6 <HAL_RCC_OscConfig+0x4d6>
 80088f4:	e01b      	b.n	800892e <HAL_RCC_OscConfig+0x52e>
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088fc:	4b9b      	ldr	r3, [pc, #620]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a9a      	ldr	r2, [pc, #616]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008908:	f7fa fcde 	bl	80032c8 <HAL_GetTick>
 800890c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008910:	f7fa fcda 	bl	80032c8 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e1c0      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008922:	4b92      	ldr	r3, [pc, #584]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1f0      	bne.n	8008910 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8081 	beq.w	8008a3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800893c:	4b8c      	ldr	r3, [pc, #560]	@ (8008b70 <HAL_RCC_OscConfig+0x770>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a8b      	ldr	r2, [pc, #556]	@ (8008b70 <HAL_RCC_OscConfig+0x770>)
 8008942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008948:	f7fa fcbe 	bl	80032c8 <HAL_GetTick>
 800894c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008950:	f7fa fcba 	bl	80032c8 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	@ 0x64
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e1a0      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008962:	4b83      	ldr	r3, [pc, #524]	@ (8008b70 <HAL_RCC_OscConfig+0x770>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0f0      	beq.n	8008950 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d106      	bne.n	8008984 <HAL_RCC_OscConfig+0x584>
 8008976:	4b7d      	ldr	r3, [pc, #500]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800897a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	6713      	str	r3, [r2, #112]	@ 0x70
 8008982:	e02d      	b.n	80089e0 <HAL_RCC_OscConfig+0x5e0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10c      	bne.n	80089a6 <HAL_RCC_OscConfig+0x5a6>
 800898c:	4b77      	ldr	r3, [pc, #476]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 800898e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008990:	4a76      	ldr	r2, [pc, #472]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	6713      	str	r3, [r2, #112]	@ 0x70
 8008998:	4b74      	ldr	r3, [pc, #464]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 800899a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899c:	4a73      	ldr	r2, [pc, #460]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 800899e:	f023 0304 	bic.w	r3, r3, #4
 80089a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089a4:	e01c      	b.n	80089e0 <HAL_RCC_OscConfig+0x5e0>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d10c      	bne.n	80089c8 <HAL_RCC_OscConfig+0x5c8>
 80089ae:	4b6f      	ldr	r3, [pc, #444]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b2:	4a6e      	ldr	r2, [pc, #440]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089b4:	f043 0304 	orr.w	r3, r3, #4
 80089b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ba:	4b6c      	ldr	r3, [pc, #432]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089be:	4a6b      	ldr	r2, [pc, #428]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c6:	e00b      	b.n	80089e0 <HAL_RCC_OscConfig+0x5e0>
 80089c8:	4b68      	ldr	r3, [pc, #416]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089cc:	4a67      	ldr	r2, [pc, #412]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089d4:	4b65      	ldr	r3, [pc, #404]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d8:	4a64      	ldr	r2, [pc, #400]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 80089da:	f023 0304 	bic.w	r3, r3, #4
 80089de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d015      	beq.n	8008a14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e8:	f7fa fc6e 	bl	80032c8 <HAL_GetTick>
 80089ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ee:	e00a      	b.n	8008a06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089f0:	f7fa fc6a 	bl	80032c8 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e14e      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a06:	4b59      	ldr	r3, [pc, #356]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0ee      	beq.n	80089f0 <HAL_RCC_OscConfig+0x5f0>
 8008a12:	e014      	b.n	8008a3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a14:	f7fa fc58 	bl	80032c8 <HAL_GetTick>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a1a:	e00a      	b.n	8008a32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a1c:	f7fa fc54 	bl	80032c8 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e138      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a32:	4b4e      	ldr	r3, [pc, #312]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1ee      	bne.n	8008a1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 812d 	beq.w	8008ca2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a48:	4b48      	ldr	r3, [pc, #288]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a50:	2b18      	cmp	r3, #24
 8008a52:	f000 80bd 	beq.w	8008bd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	f040 809e 	bne.w	8008b9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a60:	4b42      	ldr	r3, [pc, #264]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a41      	ldr	r2, [pc, #260]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6c:	f7fa fc2c 	bl	80032c8 <HAL_GetTick>
 8008a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a74:	f7fa fc28 	bl	80032c8 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e10e      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a86:	4b39      	ldr	r3, [pc, #228]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f0      	bne.n	8008a74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a92:	4b36      	ldr	r3, [pc, #216]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a96:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <HAL_RCC_OscConfig+0x774>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008aa2:	0112      	lsls	r2, r2, #4
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	4931      	ldr	r1, [pc, #196]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	628b      	str	r3, [r1, #40]	@ 0x28
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	3b01      	subs	r3, #1
 8008abc:	025b      	lsls	r3, r3, #9
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	061b      	lsls	r3, r3, #24
 8008ad8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008adc:	4923      	ldr	r1, [pc, #140]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ae2:	4b22      	ldr	r3, [pc, #136]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae6:	4a21      	ldr	r2, [pc, #132]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008aee:	4b1f      	ldr	r3, [pc, #124]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af2:	4b21      	ldr	r3, [pc, #132]	@ (8008b78 <HAL_RCC_OscConfig+0x778>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008afa:	00d2      	lsls	r2, r2, #3
 8008afc:	491b      	ldr	r1, [pc, #108]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b02:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	f023 020c 	bic.w	r2, r3, #12
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	4917      	ldr	r1, [pc, #92]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b14:	4b15      	ldr	r3, [pc, #84]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	f023 0202 	bic.w	r2, r3, #2
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b20:	4912      	ldr	r1, [pc, #72]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b26:	4b11      	ldr	r3, [pc, #68]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	4a10      	ldr	r2, [pc, #64]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b32:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	4a0d      	ldr	r2, [pc, #52]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	4a0a      	ldr	r2, [pc, #40]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008b4a:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	4a07      	ldr	r2, [pc, #28]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b50:	f043 0301 	orr.w	r3, r3, #1
 8008b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b56:	4b05      	ldr	r3, [pc, #20]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a04      	ldr	r2, [pc, #16]	@ (8008b6c <HAL_RCC_OscConfig+0x76c>)
 8008b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b62:	f7fa fbb1 	bl	80032c8 <HAL_GetTick>
 8008b66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b68:	e011      	b.n	8008b8e <HAL_RCC_OscConfig+0x78e>
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	58024800 	.word	0x58024800
 8008b74:	fffffc0c 	.word	0xfffffc0c
 8008b78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b7c:	f7fa fba4 	bl	80032c8 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e08a      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b8e:	4b47      	ldr	r3, [pc, #284]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <HAL_RCC_OscConfig+0x77c>
 8008b9a:	e082      	b.n	8008ca2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b9c:	4b43      	ldr	r3, [pc, #268]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a42      	ldr	r2, [pc, #264]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba8:	f7fa fb8e 	bl	80032c8 <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bb0:	f7fa fb8a 	bl	80032c8 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e070      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x7b0>
 8008bce:	e068      	b.n	8008ca2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bd0:	4b36      	ldr	r3, [pc, #216]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bd6:	4b35      	ldr	r3, [pc, #212]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d031      	beq.n	8008c48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f003 0203 	and.w	r2, r3, #3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d12a      	bne.n	8008c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	091b      	lsrs	r3, r3, #4
 8008bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d122      	bne.n	8008c48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d11a      	bne.n	8008c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	0a5b      	lsrs	r3, r3, #9
 8008c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d111      	bne.n	8008c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	0c1b      	lsrs	r3, r3, #16
 8008c28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d108      	bne.n	8008c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	0e1b      	lsrs	r3, r3, #24
 8008c3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e02b      	b.n	8008ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008c4c:	4b17      	ldr	r3, [pc, #92]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c50:	08db      	lsrs	r3, r3, #3
 8008c52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d01f      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008c62:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	4a11      	ldr	r2, [pc, #68]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c6e:	f7fa fb2b 	bl	80032c8 <HAL_GetTick>
 8008c72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008c74:	bf00      	nop
 8008c76:	f7fa fb27 	bl	80032c8 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d0f9      	beq.n	8008c76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c82:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c86:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <HAL_RCC_OscConfig+0x8b0>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c8e:	00d2      	lsls	r2, r2, #3
 8008c90:	4906      	ldr	r1, [pc, #24]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008c96:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	4a04      	ldr	r2, [pc, #16]	@ (8008cac <HAL_RCC_OscConfig+0x8ac>)
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3730      	adds	r7, #48	@ 0x30
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	ffff0007 	.word	0xffff0007

08008cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e19c      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d910      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd6:	4b87      	ldr	r3, [pc, #540]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	4985      	ldr	r1, [pc, #532]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b83      	ldr	r3, [pc, #524]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e184      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	4b7b      	ldr	r3, [pc, #492]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d908      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d14:	4b78      	ldr	r3, [pc, #480]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	4975      	ldr	r1, [pc, #468]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	4b70      	ldr	r3, [pc, #448]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d908      	bls.n	8008d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d42:	4b6d      	ldr	r3, [pc, #436]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	496a      	ldr	r1, [pc, #424]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	4b64      	ldr	r3, [pc, #400]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d908      	bls.n	8008d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d70:	4b61      	ldr	r3, [pc, #388]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	495e      	ldr	r1, [pc, #376]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d010      	beq.n	8008db0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	4b59      	ldr	r3, [pc, #356]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d908      	bls.n	8008db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d9e:	4b56      	ldr	r3, [pc, #344]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4953      	ldr	r1, [pc, #332]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d908      	bls.n	8008dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f023 020f 	bic.w	r2, r3, #15
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4947      	ldr	r1, [pc, #284]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d055      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008dea:	4b43      	ldr	r3, [pc, #268]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	4940      	ldr	r1, [pc, #256]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d107      	bne.n	8008e14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e04:	4b3c      	ldr	r3, [pc, #240]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d121      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e0f6      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e1c:	4b36      	ldr	r3, [pc, #216]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d115      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0ea      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e34:	4b30      	ldr	r3, [pc, #192]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e0de      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e44:	4b2c      	ldr	r3, [pc, #176]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e0d6      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e54:	4b28      	ldr	r3, [pc, #160]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f023 0207 	bic.w	r2, r3, #7
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4925      	ldr	r1, [pc, #148]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e66:	f7fa fa2f 	bl	80032c8 <HAL_GetTick>
 8008e6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6c:	e00a      	b.n	8008e84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e6e:	f7fa fa2b 	bl	80032c8 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e0be      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e84:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d1eb      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d010      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d208      	bcs.n	8008ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb2:	4b11      	ldr	r3, [pc, #68]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	f023 020f 	bic.w	r2, r3, #15
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	490e      	ldr	r1, [pc, #56]	@ (8008ef8 <HAL_RCC_ClockConfig+0x244>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d214      	bcs.n	8008efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed2:	4b08      	ldr	r3, [pc, #32]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f023 020f 	bic.w	r2, r3, #15
 8008eda:	4906      	ldr	r1, [pc, #24]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ee2:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <HAL_RCC_ClockConfig+0x240>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d005      	beq.n	8008efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e086      	b.n	8009002 <HAL_RCC_ClockConfig+0x34e>
 8008ef4:	52002000 	.word	0x52002000
 8008ef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d208      	bcs.n	8008f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f18:	4b3c      	ldr	r3, [pc, #240]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4939      	ldr	r1, [pc, #228]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	4b34      	ldr	r3, [pc, #208]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d208      	bcs.n	8008f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f46:	4b31      	ldr	r3, [pc, #196]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	492e      	ldr	r1, [pc, #184]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	4b28      	ldr	r3, [pc, #160]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d208      	bcs.n	8008f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f74:	4b25      	ldr	r3, [pc, #148]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	4922      	ldr	r1, [pc, #136]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d208      	bcs.n	8008fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	4917      	ldr	r1, [pc, #92]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fb4:	f000 f834 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b14      	ldr	r3, [pc, #80]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	4912      	ldr	r1, [pc, #72]	@ (8009010 <HAL_RCC_ClockConfig+0x35c>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <HAL_RCC_ClockConfig+0x358>)
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	4a0d      	ldr	r2, [pc, #52]	@ (8009010 <HAL_RCC_ClockConfig+0x35c>)
 8008fdc:	5cd3      	ldrb	r3, [r2, r3]
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8009014 <HAL_RCC_ClockConfig+0x360>)
 8008fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fec:	4a0a      	ldr	r2, [pc, #40]	@ (8009018 <HAL_RCC_ClockConfig+0x364>)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <HAL_RCC_ClockConfig+0x368>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f7 ff26 	bl	8000e48 <HAL_InitTick>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	58024400 	.word	0x58024400
 8009010:	08018c54 	.word	0x08018c54
 8009014:	24000070 	.word	0x24000070
 8009018:	2400006c 	.word	0x2400006c
 800901c:	24000074 	.word	0x24000074

08009020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009020:	b480      	push	{r7}
 8009022:	b089      	sub	sp, #36	@ 0x24
 8009024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009026:	4bb3      	ldr	r3, [pc, #716]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800902e:	2b18      	cmp	r3, #24
 8009030:	f200 8155 	bhi.w	80092de <HAL_RCC_GetSysClockFreq+0x2be>
 8009034:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	080090a1 	.word	0x080090a1
 8009040:	080092df 	.word	0x080092df
 8009044:	080092df 	.word	0x080092df
 8009048:	080092df 	.word	0x080092df
 800904c:	080092df 	.word	0x080092df
 8009050:	080092df 	.word	0x080092df
 8009054:	080092df 	.word	0x080092df
 8009058:	080092df 	.word	0x080092df
 800905c:	080090c7 	.word	0x080090c7
 8009060:	080092df 	.word	0x080092df
 8009064:	080092df 	.word	0x080092df
 8009068:	080092df 	.word	0x080092df
 800906c:	080092df 	.word	0x080092df
 8009070:	080092df 	.word	0x080092df
 8009074:	080092df 	.word	0x080092df
 8009078:	080092df 	.word	0x080092df
 800907c:	080090cd 	.word	0x080090cd
 8009080:	080092df 	.word	0x080092df
 8009084:	080092df 	.word	0x080092df
 8009088:	080092df 	.word	0x080092df
 800908c:	080092df 	.word	0x080092df
 8009090:	080092df 	.word	0x080092df
 8009094:	080092df 	.word	0x080092df
 8009098:	080092df 	.word	0x080092df
 800909c:	080090d3 	.word	0x080090d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a0:	4b94      	ldr	r3, [pc, #592]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d009      	beq.n	80090c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090ac:	4b91      	ldr	r3, [pc, #580]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	08db      	lsrs	r3, r3, #3
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	4a90      	ldr	r2, [pc, #576]	@ (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090b8:	fa22 f303 	lsr.w	r3, r2, r3
 80090bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80090be:	e111      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090c0:	4b8d      	ldr	r3, [pc, #564]	@ (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090c2:	61bb      	str	r3, [r7, #24]
      break;
 80090c4:	e10e      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80090c6:	4b8d      	ldr	r3, [pc, #564]	@ (80092fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090c8:	61bb      	str	r3, [r7, #24]
      break;
 80090ca:	e10b      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80090cc:	4b8c      	ldr	r3, [pc, #560]	@ (8009300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090ce:	61bb      	str	r3, [r7, #24]
      break;
 80090d0:	e108      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090d2:	4b88      	ldr	r3, [pc, #544]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80090dc:	4b85      	ldr	r3, [pc, #532]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e0:	091b      	lsrs	r3, r3, #4
 80090e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090e8:	4b82      	ldr	r3, [pc, #520]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090f2:	4b80      	ldr	r3, [pc, #512]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f6:	08db      	lsrs	r3, r3, #3
 80090f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80e1 	beq.w	80092d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f000 8083 	beq.w	8009224 <HAL_RCC_GetSysClockFreq+0x204>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f200 80a1 	bhi.w	8009268 <HAL_RCC_GetSysClockFreq+0x248>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x114>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d056      	beq.n	80091e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009132:	e099      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009134:	4b6f      	ldr	r3, [pc, #444]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d02d      	beq.n	800919c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009140:	4b6c      	ldr	r3, [pc, #432]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	08db      	lsrs	r3, r3, #3
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	4a6b      	ldr	r2, [pc, #428]	@ (80092f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800914c:	fa22 f303 	lsr.w	r3, r2, r3
 8009150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b62      	ldr	r3, [pc, #392]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a02 	vldr	s12, [r7, #8]
 800917e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800919a:	e087      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80091aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ae:	4b51      	ldr	r3, [pc, #324]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	ed97 6a02 	vldr	s12, [r7, #8]
 80091c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091de:	e065      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800930c <HAL_RCC_GetSysClockFreq+0x2ec>
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b40      	ldr	r3, [pc, #256]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a02 	vldr	s12, [r7, #8]
 8009206:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009222:	e043      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b2f      	ldr	r3, [pc, #188]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a02 	vldr	s12, [r7, #8]
 800924a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009266:	e021      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800930c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927a:	4b1e      	ldr	r3, [pc, #120]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928a:	ed97 6a02 	vldr	s12, [r7, #8]
 800928e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800929e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80092ac:	4b11      	ldr	r3, [pc, #68]	@ (80092f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b0:	0a5b      	lsrs	r3, r3, #9
 80092b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b6:	3301      	adds	r3, #1
 80092b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	ee17 3a90 	vmov	r3, s15
 80092d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80092d6:	e005      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	61bb      	str	r3, [r7, #24]
      break;
 80092dc:	e002      	b.n	80092e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80092de:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092e0:	61bb      	str	r3, [r7, #24]
      break;
 80092e2:	bf00      	nop
  }

  return sysclockfreq;
 80092e4:	69bb      	ldr	r3, [r7, #24]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3724      	adds	r7, #36	@ 0x24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	03d09000 	.word	0x03d09000
 80092fc:	003d0900 	.word	0x003d0900
 8009300:	017d7840 	.word	0x017d7840
 8009304:	46000000 	.word	0x46000000
 8009308:	4c742400 	.word	0x4c742400
 800930c:	4a742400 	.word	0x4a742400
 8009310:	4bbebc20 	.word	0x4bbebc20

08009314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800931a:	f7ff fe81 	bl	8009020 <HAL_RCC_GetSysClockFreq>
 800931e:	4602      	mov	r2, r0
 8009320:	4b10      	ldr	r3, [pc, #64]	@ (8009364 <HAL_RCC_GetHCLKFreq+0x50>)
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	490f      	ldr	r1, [pc, #60]	@ (8009368 <HAL_RCC_GetHCLKFreq+0x54>)
 800932c:	5ccb      	ldrb	r3, [r1, r3]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	fa22 f303 	lsr.w	r3, r2, r3
 8009336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009338:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <HAL_RCC_GetHCLKFreq+0x50>)
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	4a09      	ldr	r2, [pc, #36]	@ (8009368 <HAL_RCC_GetHCLKFreq+0x54>)
 8009342:	5cd3      	ldrb	r3, [r2, r3]
 8009344:	f003 031f 	and.w	r3, r3, #31
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	fa22 f303 	lsr.w	r3, r2, r3
 800934e:	4a07      	ldr	r2, [pc, #28]	@ (800936c <HAL_RCC_GetHCLKFreq+0x58>)
 8009350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009352:	4a07      	ldr	r2, [pc, #28]	@ (8009370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <HAL_RCC_GetHCLKFreq+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	58024400 	.word	0x58024400
 8009368:	08018c54 	.word	0x08018c54
 800936c:	24000070 	.word	0x24000070
 8009370:	2400006c 	.word	0x2400006c

08009374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009378:	f7ff ffcc 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b06      	ldr	r3, [pc, #24]	@ (8009398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	4904      	ldr	r1, [pc, #16]	@ (800939c <HAL_RCC_GetPCLK1Freq+0x28>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009394:	4618      	mov	r0, r3
 8009396:	bd80      	pop	{r7, pc}
 8009398:	58024400 	.word	0x58024400
 800939c:	08018c54 	.word	0x08018c54

080093a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80093a4:	f7ff ffb6 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	4904      	ldr	r1, [pc, #16]	@ (80093c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093b6:	5ccb      	ldrb	r3, [r1, r3]
 80093b8:	f003 031f 	and.w	r3, r3, #31
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	58024400 	.word	0x58024400
 80093c8:	08018c54 	.word	0x08018c54

080093cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	223f      	movs	r2, #63	@ 0x3f
 80093da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	f003 0207 	and.w	r2, r3, #7
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80093e8:	4b17      	ldr	r3, [pc, #92]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80093f4:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 020f 	and.w	r2, r3, #15
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009400:	4b11      	ldr	r3, [pc, #68]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800940c:	4b0e      	ldr	r3, [pc, #56]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009418:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <HAL_RCC_GetClockConfig+0x7c>)
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009430:	4b06      	ldr	r3, [pc, #24]	@ (800944c <HAL_RCC_GetClockConfig+0x80>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	601a      	str	r2, [r3, #0]
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	58024400 	.word	0x58024400
 800944c:	52002000 	.word	0x52002000

08009450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009454:	b0cc      	sub	sp, #304	@ 0x130
 8009456:	af00      	add	r7, sp, #0
 8009458:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800945c:	2300      	movs	r3, #0
 800945e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009462:	2300      	movs	r3, #0
 8009464:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009474:	2500      	movs	r5, #0
 8009476:	ea54 0305 	orrs.w	r3, r4, r5
 800947a:	d049      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800947c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009486:	d02f      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800948c:	d828      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800948e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009492:	d01a      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009498:	d822      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800949e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094a2:	d007      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094a4:	e01c      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a6:	4bb8      	ldr	r3, [pc, #736]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094aa:	4ab7      	ldr	r2, [pc, #732]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094b2:	e01a      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094b8:	3308      	adds	r3, #8
 80094ba:	2102      	movs	r1, #2
 80094bc:	4618      	mov	r0, r3
 80094be:	f001 fd25 	bl	800af0c <RCCEx_PLL2_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094c8:	e00f      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094ce:	3328      	adds	r3, #40	@ 0x28
 80094d0:	2102      	movs	r1, #2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fdcc 	bl	800b070 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094de:	e004      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80094e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80094f2:	4ba5      	ldr	r3, [pc, #660]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80094fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009500:	4aa1      	ldr	r2, [pc, #644]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009502:	430b      	orrs	r3, r1
 8009504:	6513      	str	r3, [r2, #80]	@ 0x50
 8009506:	e003      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009508:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800950c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800951c:	f04f 0900 	mov.w	r9, #0
 8009520:	ea58 0309 	orrs.w	r3, r8, r9
 8009524:	d047      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800952a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800952c:	2b04      	cmp	r3, #4
 800952e:	d82a      	bhi.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009530:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009536:	bf00      	nop
 8009538:	0800954d 	.word	0x0800954d
 800953c:	0800955b 	.word	0x0800955b
 8009540:	08009571 	.word	0x08009571
 8009544:	0800958f 	.word	0x0800958f
 8009548:	0800958f 	.word	0x0800958f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800954c:	4b8e      	ldr	r3, [pc, #568]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800954e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009550:	4a8d      	ldr	r2, [pc, #564]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009558:	e01a      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800955a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800955e:	3308      	adds	r3, #8
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fcd2 	bl	800af0c <RCCEx_PLL2_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800956e:	e00f      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009574:	3328      	adds	r3, #40	@ 0x28
 8009576:	2100      	movs	r1, #0
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fd79 	bl	800b070 <RCCEx_PLL3_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009584:	e004      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800958c:	e000      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800958e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009590:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009598:	4b7b      	ldr	r3, [pc, #492]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	f023 0107 	bic.w	r1, r3, #7
 80095a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095a6:	4a78      	ldr	r2, [pc, #480]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095a8:	430b      	orrs	r3, r1
 80095aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80095ac:	e003      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80095b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80095b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80095c2:	f04f 0b00 	mov.w	fp, #0
 80095c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80095ca:	d04c      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80095cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d6:	d030      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095dc:	d829      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095de:	2bc0      	cmp	r3, #192	@ 0xc0
 80095e0:	d02d      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095e4:	d825      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095e6:	2b80      	cmp	r3, #128	@ 0x80
 80095e8:	d018      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80095ea:	2b80      	cmp	r3, #128	@ 0x80
 80095ec:	d821      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80095f2:	2b40      	cmp	r3, #64	@ 0x40
 80095f4:	d007      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80095f6:	e01c      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f8:	4b63      	ldr	r3, [pc, #396]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	4a62      	ldr	r2, [pc, #392]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009604:	e01c      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800960a:	3308      	adds	r3, #8
 800960c:	2100      	movs	r1, #0
 800960e:	4618      	mov	r0, r3
 8009610:	f001 fc7c 	bl	800af0c <RCCEx_PLL2_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800961a:	e011      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800961c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009620:	3328      	adds	r3, #40	@ 0x28
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f001 fd23 	bl	800b070 <RCCEx_PLL3_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009630:	e006      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009638:	e002      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800963a:	bf00      	nop
 800963c:	e000      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800963e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009648:	4b4f      	ldr	r3, [pc, #316]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800964a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800964c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009656:	4a4c      	ldr	r2, [pc, #304]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009658:	430b      	orrs	r3, r1
 800965a:	6513      	str	r3, [r2, #80]	@ 0x50
 800965c:	e003      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009662:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009672:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009676:	2300      	movs	r3, #0
 8009678:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800967c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8009680:	460b      	mov	r3, r1
 8009682:	4313      	orrs	r3, r2
 8009684:	d053      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800968a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800968e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009692:	d035      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009694:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009698:	d82e      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800969a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800969e:	d031      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80096a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80096a4:	d828      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80096a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096aa:	d01a      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80096ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096b0:	d822      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80096b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096ba:	d007      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80096bc:	e01c      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096be:	4b32      	ldr	r3, [pc, #200]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	4a31      	ldr	r2, [pc, #196]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096ca:	e01c      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096d0:	3308      	adds	r3, #8
 80096d2:	2100      	movs	r1, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fc19 	bl	800af0c <RCCEx_PLL2_Config>
 80096da:	4603      	mov	r3, r0
 80096dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096e0:	e011      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096e6:	3328      	adds	r3, #40	@ 0x28
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fcc0 	bl	800b070 <RCCEx_PLL3_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096f6:	e006      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80096fe:	e002      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009706:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10b      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800970e:	4b1e      	ldr	r3, [pc, #120]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009712:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800971a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800971e:	4a1a      	ldr	r2, [pc, #104]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009720:	430b      	orrs	r3, r1
 8009722:	6593      	str	r3, [r2, #88]	@ 0x58
 8009724:	e003      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009726:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800972a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800972e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800973a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800973e:	2300      	movs	r3, #0
 8009740:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009744:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009748:	460b      	mov	r3, r1
 800974a:	4313      	orrs	r3, r2
 800974c:	d056      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800974e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800975a:	d038      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800975c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009760:	d831      	bhi.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009766:	d034      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009768:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800976c:	d82b      	bhi.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800976e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009772:	d01d      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009778:	d825      	bhi.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d006      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800977e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009782:	d00a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009784:	e01f      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978c:	4ba2      	ldr	r3, [pc, #648]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	4aa1      	ldr	r2, [pc, #644]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009798:	e01c      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800979a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800979e:	3308      	adds	r3, #8
 80097a0:	2100      	movs	r1, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 fbb2 	bl	800af0c <RCCEx_PLL2_Config>
 80097a8:	4603      	mov	r3, r0
 80097aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097ae:	e011      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097b4:	3328      	adds	r3, #40	@ 0x28
 80097b6:	2100      	movs	r1, #0
 80097b8:	4618      	mov	r0, r3
 80097ba:	f001 fc59 	bl	800b070 <RCCEx_PLL3_Config>
 80097be:	4603      	mov	r3, r0
 80097c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097c4:	e006      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80097cc:	e002      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80097ce:	bf00      	nop
 80097d0:	e000      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80097d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10b      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097dc:	4b8e      	ldr	r3, [pc, #568]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80097e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ec:	4a8a      	ldr	r2, [pc, #552]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ee:	430b      	orrs	r3, r1
 80097f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80097f2:	e003      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80097f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009808:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800980c:	2300      	movs	r3, #0
 800980e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009812:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009816:	460b      	mov	r3, r1
 8009818:	4313      	orrs	r3, r2
 800981a:	d03a      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800981c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009822:	2b30      	cmp	r3, #48	@ 0x30
 8009824:	d01f      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009826:	2b30      	cmp	r3, #48	@ 0x30
 8009828:	d819      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800982a:	2b20      	cmp	r3, #32
 800982c:	d00c      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800982e:	2b20      	cmp	r3, #32
 8009830:	d815      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d019      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009836:	2b10      	cmp	r3, #16
 8009838:	d111      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983a:	4b77      	ldr	r3, [pc, #476]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	4a76      	ldr	r2, [pc, #472]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009846:	e011      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800984c:	3308      	adds	r3, #8
 800984e:	2102      	movs	r1, #2
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fb5b 	bl	800af0c <RCCEx_PLL2_Config>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800985c:	e006      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009864:	e002      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009866:	bf00      	nop
 8009868:	e000      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800986a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009874:	4b68      	ldr	r3, [pc, #416]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009878:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800987c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009882:	4a65      	ldr	r2, [pc, #404]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009884:	430b      	orrs	r3, r1
 8009886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009888:	e003      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800988e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800989e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098a2:	2300      	movs	r3, #0
 80098a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098a8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80098ac:	460b      	mov	r3, r1
 80098ae:	4313      	orrs	r3, r2
 80098b0:	d051      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80098b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098bc:	d035      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80098be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098c2:	d82e      	bhi.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c8:	d031      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80098ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098ce:	d828      	bhi.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d4:	d01a      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80098d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098da:	d822      	bhi.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80098e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e4:	d007      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80098e6:	e01c      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e8:	4b4b      	ldr	r3, [pc, #300]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ec:	4a4a      	ldr	r2, [pc, #296]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098f4:	e01c      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098fa:	3308      	adds	r3, #8
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fb04 	bl	800af0c <RCCEx_PLL2_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800990a:	e011      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800990c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009910:	3328      	adds	r3, #40	@ 0x28
 8009912:	2100      	movs	r1, #0
 8009914:	4618      	mov	r0, r3
 8009916:	f001 fbab 	bl	800b070 <RCCEx_PLL3_Config>
 800991a:	4603      	mov	r3, r0
 800991c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009920:	e006      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009928:	e002      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800992a:	bf00      	nop
 800992c:	e000      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800992e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009930:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009938:	4b37      	ldr	r3, [pc, #220]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800993a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800993c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009946:	4a34      	ldr	r2, [pc, #208]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009948:	430b      	orrs	r3, r1
 800994a:	6513      	str	r3, [r2, #80]	@ 0x50
 800994c:	e003      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009952:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009962:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009966:	2300      	movs	r3, #0
 8009968:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800996c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009970:	460b      	mov	r3, r1
 8009972:	4313      	orrs	r3, r2
 8009974:	d056      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800997a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800997c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009980:	d033      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009986:	d82c      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800998c:	d02f      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800998e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009992:	d826      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009998:	d02b      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800999a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800999e:	d820      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80099a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a4:	d012      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80099a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099aa:	d81a      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d022      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b4:	d115      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80099ba:	3308      	adds	r3, #8
 80099bc:	2101      	movs	r1, #1
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 faa4 	bl	800af0c <RCCEx_PLL2_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099ca:	e015      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80099d0:	3328      	adds	r3, #40	@ 0x28
 80099d2:	2101      	movs	r1, #1
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fb4b 	bl	800b070 <RCCEx_PLL3_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099e0:	e00a      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80099e8:	e006      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099ea:	bf00      	nop
 80099ec:	e004      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099ee:	bf00      	nop
 80099f0:	e002      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10d      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a00:	4b05      	ldr	r3, [pc, #20]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a0e:	4a02      	ldr	r2, [pc, #8]	@ (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a14:	e006      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a16:	bf00      	nop
 8009a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009a20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009a30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009a3a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4313      	orrs	r3, r2
 8009a42:	d055      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a50:	d033      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a56:	d82c      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5c:	d02f      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a62:	d826      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a68:	d02b      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009a6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a6e:	d820      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a74:	d012      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a7a:	d81a      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d022      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a84:	d115      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 fa3c 	bl	800af0c <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a9a:	e015      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009aa0:	3328      	adds	r3, #40	@ 0x28
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 fae3 	bl	800b070 <RCCEx_PLL3_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009ab0:	e00a      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009ab8:	e006      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009aba:	bf00      	nop
 8009abc:	e004      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009abe:	bf00      	nop
 8009ac0:	e002      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ad0:	4bb6      	ldr	r3, [pc, #728]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ae0:	4ab2      	ldr	r2, [pc, #712]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ae6:	e003      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009aec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8009afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b00:	2300      	movs	r3, #0
 8009b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	d02a      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8009b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8009b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b1e:	d10a      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b24:	3308      	adds	r3, #8
 8009b26:	2101      	movs	r1, #1
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 f9ef 	bl	800af0c <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8009b34:	e004      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8009b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009b48:	4b98      	ldr	r3, [pc, #608]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b56:	4a95      	ldr	r2, [pc, #596]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b5c:	e003      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009b62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009b72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b7c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b80:	460b      	mov	r3, r1
 8009b82:	4313      	orrs	r3, r2
 8009b84:	d037      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b90:	d00e      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8009b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b96:	d816      	bhi.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d018      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba0:	d111      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba2:	4b82      	ldr	r3, [pc, #520]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	4a81      	ldr	r2, [pc, #516]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009bae:	e00f      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 f9a7 	bl	800af0c <RCCEx_PLL2_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009bc4:	e004      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009bcc:	e000      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8009bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009bd8:	4b74      	ldr	r3, [pc, #464]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be6:	4a71      	ldr	r2, [pc, #452]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6513      	str	r3, [r2, #80]	@ 0x50
 8009bec:	e003      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009bf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009c02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c06:	2300      	movs	r3, #0
 8009c08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c0c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4313      	orrs	r3, r2
 8009c14:	d03a      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d81d      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8009c20:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c65 	.word	0x08009c65
 8009c2c:	08009c39 	.word	0x08009c39
 8009c30:	08009c47 	.word	0x08009c47
 8009c34:	08009c65 	.word	0x08009c65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c38:	4b5c      	ldr	r3, [pc, #368]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	4a5b      	ldr	r2, [pc, #364]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c44:	e00f      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 f95c 	bl	800af0c <RCCEx_PLL2_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c5a:	e004      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8009c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c72:	f023 0103 	bic.w	r1, r3, #3
 8009c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c7e:	430b      	orrs	r3, r1
 8009c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c82:	e003      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009c88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f000 80a0 	beq.w	8009dee <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cae:	4b40      	ldr	r3, [pc, #256]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cba:	f7f9 fb05 	bl	80032c8 <HAL_GetTick>
 8009cbe:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cc2:	e00b      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cc4:	f7f9 fb00 	bl	80032c8 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b64      	cmp	r3, #100	@ 0x64
 8009cd2:	d903      	bls.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009cda:	e005      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cdc:	4b34      	ldr	r3, [pc, #208]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0ed      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8009ce8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d17a      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009cf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cfc:	4053      	eors	r3, r2
 8009cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d015      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d06:	4b29      	ldr	r3, [pc, #164]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d12:	4b26      	ldr	r3, [pc, #152]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d16:	4a25      	ldr	r2, [pc, #148]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d1e:	4b23      	ldr	r3, [pc, #140]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d22:	4a22      	ldr	r2, [pc, #136]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d2a:	4a20      	ldr	r2, [pc, #128]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009d30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d3e:	d118      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d40:	f7f9 fac2 	bl	80032c8 <HAL_GetTick>
 8009d44:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d48:	e00d      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d4a:	f7f9 fabd 	bl	80032c8 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d54:	1ad2      	subs	r2, r2, r3
 8009d56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d903      	bls.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8009d64:	e005      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d66:	4b11      	ldr	r3, [pc, #68]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0eb      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8009d72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d130      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d8a:	d115      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8009d8c:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009d9c:	091a      	lsrs	r2, r3, #4
 8009d9e:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	4a02      	ldr	r2, [pc, #8]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6113      	str	r3, [r2, #16]
 8009da8:	e00c      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8009daa:	bf00      	nop
 8009dac:	58024400 	.word	0x58024400
 8009db0:	58024800 	.word	0x58024800
 8009db4:	00ffffcf 	.word	0x00ffffcf
 8009db8:	4bd4      	ldr	r3, [pc, #848]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4ad3      	ldr	r2, [pc, #844]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009dbe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009dc2:	6113      	str	r3, [r2, #16]
 8009dc4:	4bd1      	ldr	r3, [pc, #836]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009dc6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009dcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd4:	4acd      	ldr	r2, [pc, #820]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dda:	e008      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ddc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009de0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8009de4:	e003      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009dea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f002 0301 	and.w	r3, r2, #1
 8009dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	f000 808b 	beq.w	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e18:	2b28      	cmp	r3, #40	@ 0x28
 8009e1a:	d86b      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009efd 	.word	0x08009efd
 8009e28:	08009ef5 	.word	0x08009ef5
 8009e2c:	08009ef5 	.word	0x08009ef5
 8009e30:	08009ef5 	.word	0x08009ef5
 8009e34:	08009ef5 	.word	0x08009ef5
 8009e38:	08009ef5 	.word	0x08009ef5
 8009e3c:	08009ef5 	.word	0x08009ef5
 8009e40:	08009ef5 	.word	0x08009ef5
 8009e44:	08009ec9 	.word	0x08009ec9
 8009e48:	08009ef5 	.word	0x08009ef5
 8009e4c:	08009ef5 	.word	0x08009ef5
 8009e50:	08009ef5 	.word	0x08009ef5
 8009e54:	08009ef5 	.word	0x08009ef5
 8009e58:	08009ef5 	.word	0x08009ef5
 8009e5c:	08009ef5 	.word	0x08009ef5
 8009e60:	08009ef5 	.word	0x08009ef5
 8009e64:	08009edf 	.word	0x08009edf
 8009e68:	08009ef5 	.word	0x08009ef5
 8009e6c:	08009ef5 	.word	0x08009ef5
 8009e70:	08009ef5 	.word	0x08009ef5
 8009e74:	08009ef5 	.word	0x08009ef5
 8009e78:	08009ef5 	.word	0x08009ef5
 8009e7c:	08009ef5 	.word	0x08009ef5
 8009e80:	08009ef5 	.word	0x08009ef5
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009ef5 	.word	0x08009ef5
 8009e8c:	08009ef5 	.word	0x08009ef5
 8009e90:	08009ef5 	.word	0x08009ef5
 8009e94:	08009ef5 	.word	0x08009ef5
 8009e98:	08009ef5 	.word	0x08009ef5
 8009e9c:	08009ef5 	.word	0x08009ef5
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	08009efd 	.word	0x08009efd
 8009ea8:	08009ef5 	.word	0x08009ef5
 8009eac:	08009ef5 	.word	0x08009ef5
 8009eb0:	08009ef5 	.word	0x08009ef5
 8009eb4:	08009ef5 	.word	0x08009ef5
 8009eb8:	08009ef5 	.word	0x08009ef5
 8009ebc:	08009ef5 	.word	0x08009ef5
 8009ec0:	08009ef5 	.word	0x08009ef5
 8009ec4:	08009efd 	.word	0x08009efd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ecc:	3308      	adds	r3, #8
 8009ece:	2101      	movs	r1, #1
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f81b 	bl	800af0c <RCCEx_PLL2_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009edc:	e00f      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ee2:	3328      	adds	r3, #40	@ 0x28
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f8c2 	bl	800b070 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ef2:	e004      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009efa:	e000      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8009efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10b      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f06:	4b81      	ldr	r3, [pc, #516]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f16:	4a7d      	ldr	r2, [pc, #500]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f1c:	e003      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f002 0302 	and.w	r3, r2, #2
 8009f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f36:	2300      	movs	r3, #0
 8009f38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009f3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d042      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d825      	bhi.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8009f50:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009fa5 	.word	0x08009fa5
 8009f5c:	08009f71 	.word	0x08009f71
 8009f60:	08009f87 	.word	0x08009f87
 8009f64:	08009fa5 	.word	0x08009fa5
 8009f68:	08009fa5 	.word	0x08009fa5
 8009f6c:	08009fa5 	.word	0x08009fa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f74:	3308      	adds	r3, #8
 8009f76:	2101      	movs	r1, #1
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 ffc7 	bl	800af0c <RCCEx_PLL2_Config>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f84:	e00f      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f8a:	3328      	adds	r3, #40	@ 0x28
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 f86e 	bl	800b070 <RCCEx_PLL3_Config>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f9a:	e004      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009fa2:	e000      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8009fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fae:	4b57      	ldr	r3, [pc, #348]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb2:	f023 0107 	bic.w	r1, r3, #7
 8009fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fbc:	4a53      	ldr	r2, [pc, #332]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009fbe:	430b      	orrs	r3, r1
 8009fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fc2:	e003      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009fc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f002 0304 	and.w	r3, r2, #4
 8009fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fe2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	d044      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ff4:	2b05      	cmp	r3, #5
 8009ff6:	d825      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8009ff8:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a04d 	.word	0x0800a04d
 800a004:	0800a019 	.word	0x0800a019
 800a008:	0800a02f 	.word	0x0800a02f
 800a00c:	0800a04d 	.word	0x0800a04d
 800a010:	0800a04d 	.word	0x0800a04d
 800a014:	0800a04d 	.word	0x0800a04d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a01c:	3308      	adds	r3, #8
 800a01e:	2101      	movs	r1, #1
 800a020:	4618      	mov	r0, r3
 800a022:	f000 ff73 	bl	800af0c <RCCEx_PLL2_Config>
 800a026:	4603      	mov	r3, r0
 800a028:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a02c:	e00f      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a02e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a032:	3328      	adds	r3, #40	@ 0x28
 800a034:	2101      	movs	r1, #1
 800a036:	4618      	mov	r0, r3
 800a038:	f001 f81a 	bl	800b070 <RCCEx_PLL3_Config>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a042:	e004      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a04a:	e000      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800a04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a04e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10b      	bne.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a056:	4b2d      	ldr	r3, [pc, #180]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05a:	f023 0107 	bic.w	r1, r3, #7
 800a05e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a062:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a066:	4a29      	ldr	r2, [pc, #164]	@ (800a10c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a068:	430b      	orrs	r3, r1
 800a06a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a06c:	e003      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a06e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a072:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f002 0320 	and.w	r3, r2, #32
 800a082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a086:	2300      	movs	r3, #0
 800a088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a08c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a090:	460b      	mov	r3, r1
 800a092:	4313      	orrs	r3, r2
 800a094:	d057      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0a2:	d035      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800a0a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0a8:	d82c      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ae:	d031      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800a0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b4:	d826      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a0b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0ba:	d02d      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800a0bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0c0:	d820      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a0c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0c6:	d012      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800a0c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0cc:	d81a      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d024      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800a0d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0d6:	d115      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0dc:	3308      	adds	r3, #8
 800a0de:	2100      	movs	r1, #0
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 ff13 	bl	800af0c <RCCEx_PLL2_Config>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a0ec:	e017      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0f2:	3328      	adds	r3, #40	@ 0x28
 800a0f4:	2102      	movs	r1, #2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 ffba 	bl	800b070 <RCCEx_PLL3_Config>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a102:	e00c      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a10a:	e008      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800a10c:	58024400 	.word	0x58024400
        break;
 800a110:	bf00      	nop
 800a112:	e004      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a114:	bf00      	nop
 800a116:	e002      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a118:	bf00      	nop
 800a11a:	e000      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a11e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a126:	4bc2      	ldr	r3, [pc, #776]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a12a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a12e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a136:	4abe      	ldr	r2, [pc, #760]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a138:	430b      	orrs	r3, r1
 800a13a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a13c:	e003      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a142:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a15c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a160:	460b      	mov	r3, r1
 800a162:	4313      	orrs	r3, r2
 800a164:	d055      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a16a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a16e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a172:	d033      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800a174:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a178:	d82c      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a17a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a17e:	d02f      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800a180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a184:	d826      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a186:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a18a:	d02b      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800a18c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a190:	d820      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a196:	d012      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800a198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a19c:	d81a      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d022      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800a1a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1a6:	d115      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 feab 	bl	800af0c <RCCEx_PLL2_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1bc:	e015      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1c2:	3328      	adds	r3, #40	@ 0x28
 800a1c4:	2102      	movs	r1, #2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 ff52 	bl	800b070 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1d2:	e00a      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a1da:	e006      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a1dc:	bf00      	nop
 800a1de:	e004      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10b      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1f2:	4b8f      	ldr	r3, [pc, #572]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a1fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a202:	4a8b      	ldr	r2, [pc, #556]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a204:	430b      	orrs	r3, r1
 800a206:	6593      	str	r3, [r2, #88]	@ 0x58
 800a208:	e003      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a20a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a20e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a21e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a222:	2300      	movs	r3, #0
 800a224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a228:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a22c:	460b      	mov	r3, r1
 800a22e:	4313      	orrs	r3, r2
 800a230:	d055      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a23a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a23e:	d033      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800a240:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a244:	d82c      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a24a:	d02f      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800a24c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a250:	d826      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a252:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a256:	d02b      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800a258:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a25c:	d820      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a25e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a262:	d012      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800a264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a268:	d81a      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d022      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800a26e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a272:	d115      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a278:	3308      	adds	r3, #8
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fe45 	bl	800af0c <RCCEx_PLL2_Config>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a288:	e015      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a28a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a28e:	3328      	adds	r3, #40	@ 0x28
 800a290:	2102      	movs	r1, #2
 800a292:	4618      	mov	r0, r3
 800a294:	f000 feec 	bl	800b070 <RCCEx_PLL3_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a29e:	e00a      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a2a6:	e006      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a2a8:	bf00      	nop
 800a2aa:	e004      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a2ac:	bf00      	nop
 800a2ae:	e002      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a2b0:	bf00      	nop
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10b      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2be:	4b5c      	ldr	r3, [pc, #368]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2c2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a2c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2ce:	4a58      	ldr	r2, [pc, #352]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2d4:	e003      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a2de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f002 0308 	and.w	r3, r2, #8
 800a2ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	d01e      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a2fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a30a:	d10c      	bne.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a30c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a310:	3328      	adds	r3, #40	@ 0x28
 800a312:	2102      	movs	r1, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f000 feab 	bl	800b070 <RCCEx_PLL3_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a326:	4b42      	ldr	r3, [pc, #264]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a32e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a336:	4a3e      	ldr	r2, [pc, #248]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a338:	430b      	orrs	r3, r1
 800a33a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a33c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f002 0310 	and.w	r3, r2, #16
 800a348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a34c:	2300      	movs	r3, #0
 800a34e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a352:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a356:	460b      	mov	r3, r1
 800a358:	4313      	orrs	r3, r2
 800a35a:	d01e      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a35c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a360:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a368:	d10c      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a36a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a36e:	3328      	adds	r3, #40	@ 0x28
 800a370:	2102      	movs	r1, #2
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fe7c 	bl	800b070 <RCCEx_PLL3_Config>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a384:	4b2a      	ldr	r3, [pc, #168]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a388:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a38c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a390:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a394:	4a26      	ldr	r2, [pc, #152]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a396:	430b      	orrs	r3, r1
 800a398:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a39a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a3a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d040      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a3ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a3c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3c6:	d022      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3cc:	d81b      	bhi.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800a3d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d6:	d00b      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800a3d8:	e015      	b.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3de:	3308      	adds	r3, #8
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fd92 	bl	800af0c <RCCEx_PLL2_Config>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a3ee:	e00f      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3f4:	3328      	adds	r3, #40	@ 0x28
 800a3f6:	2102      	movs	r1, #2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fe39 	bl	800b070 <RCCEx_PLL3_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a404:	e004      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800a40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a410:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10d      	bne.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a418:	4b05      	ldr	r3, [pc, #20]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a41a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a428:	4a01      	ldr	r2, [pc, #4]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a42a:	430b      	orrs	r3, r1
 800a42c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a42e:	e005      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a434:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a438:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a43c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a448:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a44a:	2300      	movs	r3, #0
 800a44c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a44e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a452:	460b      	mov	r3, r1
 800a454:	4313      	orrs	r3, r2
 800a456:	d03b      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a460:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a464:	d01f      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800a466:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a46a:	d818      	bhi.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800a46c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a470:	d003      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800a472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a476:	d007      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800a478:	e011      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47a:	4b64      	ldr	r3, [pc, #400]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	4a63      	ldr	r2, [pc, #396]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a486:	e00f      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a488:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a48c:	3328      	adds	r3, #40	@ 0x28
 800a48e:	2101      	movs	r1, #1
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fded 	bl	800b070 <RCCEx_PLL3_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a49c:	e004      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a4a4:	e000      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800a4a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4b0:	4b56      	ldr	r3, [pc, #344]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a4b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4c0:	4a52      	ldr	r2, [pc, #328]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4c6:	e003      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a4cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a4d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a4dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4de:	2300      	movs	r3, #0
 800a4e0:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4e2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	d031      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a4ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800a4f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4fa:	d007      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800a4fc:	e011      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fe:	4b43      	ldr	r3, [pc, #268]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a502:	4a42      	ldr	r2, [pc, #264]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a50a:	e00e      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a50c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a510:	3308      	adds	r3, #8
 800a512:	2102      	movs	r1, #2
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fcf9 	bl	800af0c <RCCEx_PLL2_Config>
 800a51a:	4603      	mov	r3, r0
 800a51c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a520:	e003      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a52a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10a      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a532:	4b36      	ldr	r3, [pc, #216]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a53a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a53e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a540:	4a32      	ldr	r2, [pc, #200]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a542:	430b      	orrs	r3, r1
 800a544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a548:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a54c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a55c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a55e:	2300      	movs	r3, #0
 800a560:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a562:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a566:	460b      	mov	r3, r1
 800a568:	4313      	orrs	r3, r2
 800a56a:	d00c      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a570:	3328      	adds	r3, #40	@ 0x28
 800a572:	2102      	movs	r1, #2
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fd7b 	bl	800b070 <RCCEx_PLL3_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a592:	663b      	str	r3, [r7, #96]	@ 0x60
 800a594:	2300      	movs	r3, #0
 800a596:	667b      	str	r3, [r7, #100]	@ 0x64
 800a598:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a59c:	460b      	mov	r3, r1
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	d03a      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a5a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5ae:	d018      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800a5b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5b4:	d811      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a5b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5ba:	d014      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800a5bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5c0:	d80b      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d011      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800a5c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ca:	d106      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	4a0e      	ldr	r2, [pc, #56]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a5d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a5d8:	e008      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a5e0:	e004      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a5e2:	bf00      	nop
 800a5e4:	e002      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a5e6:	bf00      	nop
 800a5e8:	e000      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10d      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5f4:	4b05      	ldr	r3, [pc, #20]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a604:	4a01      	ldr	r2, [pc, #4]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a606:	430b      	orrs	r3, r1
 800a608:	6553      	str	r3, [r2, #84]	@ 0x54
 800a60a:	e005      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800a60c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a614:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a624:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a626:	2300      	movs	r3, #0
 800a628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a62a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a62e:	460b      	mov	r3, r1
 800a630:	4313      	orrs	r3, r2
 800a632:	d009      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a634:	4baa      	ldr	r3, [pc, #680]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a638:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a63c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a642:	4aa7      	ldr	r2, [pc, #668]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a644:	430b      	orrs	r3, r1
 800a646:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a654:	653b      	str	r3, [r7, #80]	@ 0x50
 800a656:	2300      	movs	r3, #0
 800a658:	657b      	str	r3, [r7, #84]	@ 0x54
 800a65a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a65e:	460b      	mov	r3, r1
 800a660:	4313      	orrs	r3, r2
 800a662:	d00a      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a664:	4b9e      	ldr	r3, [pc, #632]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a66c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a670:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a674:	4a9a      	ldr	r2, [pc, #616]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a676:	430b      	orrs	r3, r1
 800a678:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a67a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a686:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a688:	2300      	movs	r3, #0
 800a68a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a68c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d009      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a696:	4b92      	ldr	r3, [pc, #584]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a69a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a69e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6a4:	4a8e      	ldr	r2, [pc, #568]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6a6:	430b      	orrs	r3, r1
 800a6a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a6b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	d00e      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6c6:	4b86      	ldr	r3, [pc, #536]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	4a85      	ldr	r2, [pc, #532]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6d0:	6113      	str	r3, [r2, #16]
 800a6d2:	4b83      	ldr	r3, [pc, #524]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6d4:	6919      	ldr	r1, [r3, #16]
 800a6d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6de:	4a80      	ldr	r2, [pc, #512]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a6f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	d009      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a700:	4b77      	ldr	r3, [pc, #476]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a704:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70e:	4a74      	ldr	r2, [pc, #464]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a710:	430b      	orrs	r3, r1
 800a712:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30
 800a722:	2300      	movs	r3, #0
 800a724:	637b      	str	r3, [r7, #52]	@ 0x34
 800a726:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a72a:	460b      	mov	r3, r1
 800a72c:	4313      	orrs	r3, r2
 800a72e:	d00a      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a730:	4b6b      	ldr	r3, [pc, #428]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a734:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a740:	4a67      	ldr	r2, [pc, #412]	@ (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a742:	430b      	orrs	r3, r1
 800a744:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	2100      	movs	r1, #0
 800a750:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a758:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a75c:	460b      	mov	r3, r1
 800a75e:	4313      	orrs	r3, r2
 800a760:	d011      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a766:	3308      	adds	r3, #8
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 fbce 	bl	800af0c <RCCEx_PLL2_Config>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a782:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	2100      	movs	r1, #0
 800a790:	6239      	str	r1, [r7, #32]
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	627b      	str	r3, [r7, #36]	@ 0x24
 800a798:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a79c:	460b      	mov	r3, r1
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	d011      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 fbae 	bl	800af0c <RCCEx_PLL2_Config>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a7b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a7c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a7c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	61b9      	str	r1, [r7, #24]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	61fb      	str	r3, [r7, #28]
 800a7d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	d011      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	2102      	movs	r1, #2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fb8e 	bl	800af0c <RCCEx_PLL2_Config>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a7f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a802:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a806:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	2100      	movs	r1, #0
 800a810:	6139      	str	r1, [r7, #16]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a81c:	460b      	mov	r3, r1
 800a81e:	4313      	orrs	r3, r2
 800a820:	d011      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a826:	3328      	adds	r3, #40	@ 0x28
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fc20 	bl	800b070 <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800a836:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	2100      	movs	r1, #0
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	f003 0310 	and.w	r3, r3, #16
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a85c:	460b      	mov	r3, r1
 800a85e:	4313      	orrs	r3, r2
 800a860:	d011      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a866:	3328      	adds	r3, #40	@ 0x28
 800a868:	2101      	movs	r1, #1
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fc00 	bl	800b070 <RCCEx_PLL3_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a876:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a882:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	2100      	movs	r1, #0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	f003 0320 	and.w	r3, r3, #32
 800a896:	607b      	str	r3, [r7, #4]
 800a898:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a89c:	460b      	mov	r3, r1
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	d011      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a8a6:	3328      	adds	r3, #40	@ 0x28
 800a8a8:	2102      	movs	r1, #2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fbe0 	bl	800b070 <RCCEx_PLL3_Config>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a8b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a8c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800a8c6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e000      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8e0:	58024400 	.word	0x58024400

0800a8e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8e8:	f7fe fd14 	bl	8009314 <HAL_RCC_GetHCLKFreq>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	4b06      	ldr	r3, [pc, #24]	@ (800a908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	091b      	lsrs	r3, r3, #4
 800a8f4:	f003 0307 	and.w	r3, r3, #7
 800a8f8:	4904      	ldr	r1, [pc, #16]	@ (800a90c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8fa:	5ccb      	ldrb	r3, [r1, r3]
 800a8fc:	f003 031f 	and.w	r3, r3, #31
 800a900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a904:	4618      	mov	r0, r3
 800a906:	bd80      	pop	{r7, pc}
 800a908:	58024400 	.word	0x58024400
 800a90c:	08018c54 	.word	0x08018c54

0800a910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a910:	b480      	push	{r7}
 800a912:	b089      	sub	sp, #36	@ 0x24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a918:	4ba1      	ldr	r3, [pc, #644]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a922:	4b9f      	ldr	r3, [pc, #636]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a926:	0b1b      	lsrs	r3, r3, #12
 800a928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a92c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a92e:	4b9c      	ldr	r3, [pc, #624]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	091b      	lsrs	r3, r3, #4
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a93a:	4b99      	ldr	r3, [pc, #612]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93e:	08db      	lsrs	r3, r3, #3
 800a940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 8111 	beq.w	800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b02      	cmp	r3, #2
 800a962:	f000 8083 	beq.w	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b02      	cmp	r3, #2
 800a96a:	f200 80a1 	bhi.w	800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d056      	beq.n	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a97a:	e099      	b.n	800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a97c:	4b88      	ldr	r3, [pc, #544]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b00      	cmp	r3, #0
 800a986:	d02d      	beq.n	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a988:	4b85      	ldr	r3, [pc, #532]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	08db      	lsrs	r3, r3, #3
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	4a84      	ldr	r2, [pc, #528]	@ (800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b2:	4b7b      	ldr	r3, [pc, #492]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9e2:	e087      	b.n	800aaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f6:	4b6a      	ldr	r3, [pc, #424]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa26:	e065      	b.n	800aaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b59      	ldr	r3, [pc, #356]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6a:	e043      	b.n	800aaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7e:	4b48      	ldr	r3, [pc, #288]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaae:	e021      	b.n	800aaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b37      	ldr	r3, [pc, #220]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	0a5b      	lsrs	r3, r3, #9
 800aafa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1a:	ee17 2a90 	vmov	r2, s15
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab22:	4b1f      	ldr	r3, [pc, #124]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	0c1b      	lsrs	r3, r3, #16
 800ab28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab2c:	ee07 3a90 	vmov	s15, r3
 800ab30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab48:	ee17 2a90 	vmov	r2, s15
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab50:	4b13      	ldr	r3, [pc, #76]	@ (800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab54:	0e1b      	lsrs	r3, r3, #24
 800ab56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab76:	ee17 2a90 	vmov	r2, s15
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab7e:	e008      	b.n	800ab92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	609a      	str	r2, [r3, #8]
}
 800ab92:	bf00      	nop
 800ab94:	3724      	adds	r7, #36	@ 0x24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
 800aba4:	03d09000 	.word	0x03d09000
 800aba8:	46000000 	.word	0x46000000
 800abac:	4c742400 	.word	0x4c742400
 800abb0:	4a742400 	.word	0x4a742400
 800abb4:	4bbebc20 	.word	0x4bbebc20

0800abb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	@ 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abc0:	4ba1      	ldr	r3, [pc, #644]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800abca:	4b9f      	ldr	r3, [pc, #636]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	0d1b      	lsrs	r3, r3, #20
 800abd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abd6:	4b9c      	ldr	r3, [pc, #624]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abda:	0a1b      	lsrs	r3, r3, #8
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800abe2:	4b99      	ldr	r3, [pc, #612]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 8111 	beq.w	800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	f000 8083 	beq.w	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	f200 80a1 	bhi.w	800ad58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d056      	beq.n	800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac22:	e099      	b.n	800ad58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac24:	4b88      	ldr	r3, [pc, #544]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d02d      	beq.n	800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac30:	4b85      	ldr	r3, [pc, #532]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	08db      	lsrs	r3, r3, #3
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	4a84      	ldr	r2, [pc, #528]	@ (800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5a:	4b7b      	ldr	r3, [pc, #492]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac8a:	e087      	b.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9e:	4b6a      	ldr	r3, [pc, #424]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acce:	e065      	b.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace2:	4b59      	ldr	r3, [pc, #356]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad12:	e043      	b.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad26:	4b48      	ldr	r3, [pc, #288]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad56:	e021      	b.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6a:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad9c:	4b2a      	ldr	r3, [pc, #168]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada0:	0a5b      	lsrs	r3, r3, #9
 800ada2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc2:	ee17 2a90 	vmov	r2, s15
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800adca:	4b1f      	ldr	r3, [pc, #124]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	0c1b      	lsrs	r3, r3, #16
 800add0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800addc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ade0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf0:	ee17 2a90 	vmov	r2, s15
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800adf8:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfc:	0e1b      	lsrs	r3, r3, #24
 800adfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1e:	ee17 2a90 	vmov	r2, s15
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae26:	e008      	b.n	800ae3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	609a      	str	r2, [r3, #8]
}
 800ae3a:	bf00      	nop
 800ae3c:	3724      	adds	r7, #36	@ 0x24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	58024400 	.word	0x58024400
 800ae4c:	03d09000 	.word	0x03d09000
 800ae50:	46000000 	.word	0x46000000
 800ae54:	4c742400 	.word	0x4c742400
 800ae58:	4a742400 	.word	0x4a742400
 800ae5c:	4bbebc20 	.word	0x4bbebc20

0800ae60 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *pInit)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800ae68:	4b26      	ldr	r3, [pc, #152]	@ (800af04 <HAL_RCCEx_CRSConfig+0xa4>)
 800ae6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae6e:	4a25      	ldr	r2, [pc, #148]	@ (800af04 <HAL_RCCEx_CRSConfig+0xa4>)
 800ae70:	f043 0302 	orr.w	r3, r3, #2
 800ae74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800ae78:	4b22      	ldr	r3, [pc, #136]	@ (800af04 <HAL_RCCEx_CRSConfig+0xa4>)
 800ae7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae7e:	4a21      	ldr	r2, [pc, #132]	@ (800af04 <HAL_RCCEx_CRSConfig+0xa4>)
 800ae80:	f023 0302 	bic.w	r3, r3, #2
 800ae84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800ae88:	f7f8 fa4e 	bl	8003328 <HAL_GetREVID>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d80b      	bhi.n	800aeae <HAL_RCCEx_CRSConfig+0x4e>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae9e:	d106      	bne.n	800aeae <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	e008      	b.n	800aec0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	041b      	lsls	r3, r3, #16
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800aed6:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <HAL_RCCEx_CRSConfig+0xa8>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800aedc:	4b0a      	ldr	r3, [pc, #40]	@ (800af08 <HAL_RCCEx_CRSConfig+0xa8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	4907      	ldr	r1, [pc, #28]	@ (800af08 <HAL_RCCEx_CRSConfig+0xa8>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800aef0:	4b05      	ldr	r3, [pc, #20]	@ (800af08 <HAL_RCCEx_CRSConfig+0xa8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a04      	ldr	r2, [pc, #16]	@ (800af08 <HAL_RCCEx_CRSConfig+0xa8>)
 800aef6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aefa:	6013      	str	r3, [r2, #0]
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	58024400 	.word	0x58024400
 800af08:	40008400 	.word	0x40008400

0800af0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af1a:	4b53      	ldr	r3, [pc, #332]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	2b03      	cmp	r3, #3
 800af24:	d101      	bne.n	800af2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e099      	b.n	800b05e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af2a:	4b4f      	ldr	r3, [pc, #316]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a4e      	ldr	r2, [pc, #312]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af36:	f7f8 f9c7 	bl	80032c8 <HAL_GetTick>
 800af3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af3c:	e008      	b.n	800af50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af3e:	f7f8 f9c3 	bl	80032c8 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d901      	bls.n	800af50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e086      	b.n	800b05e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af50:	4b45      	ldr	r3, [pc, #276]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f0      	bne.n	800af3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af5c:	4b42      	ldr	r3, [pc, #264]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	031b      	lsls	r3, r3, #12
 800af6a:	493f      	ldr	r1, [pc, #252]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	628b      	str	r3, [r1, #40]	@ 0x28
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	3b01      	subs	r3, #1
 800af76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	3b01      	subs	r3, #1
 800af80:	025b      	lsls	r3, r3, #9
 800af82:	b29b      	uxth	r3, r3
 800af84:	431a      	orrs	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	041b      	lsls	r3, r3, #16
 800af8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af92:	431a      	orrs	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	3b01      	subs	r3, #1
 800af9a:	061b      	lsls	r3, r3, #24
 800af9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afa0:	4931      	ldr	r1, [pc, #196]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800afa6:	4b30      	ldr	r3, [pc, #192]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	492d      	ldr	r1, [pc, #180]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800afb8:	4b2b      	ldr	r3, [pc, #172]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	f023 0220 	bic.w	r2, r3, #32
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	4928      	ldr	r1, [pc, #160]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800afca:	4b27      	ldr	r3, [pc, #156]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	4a26      	ldr	r2, [pc, #152]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afd0:	f023 0310 	bic.w	r3, r3, #16
 800afd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800afd6:	4b24      	ldr	r3, [pc, #144]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afda:	4b24      	ldr	r3, [pc, #144]	@ (800b06c <RCCEx_PLL2_Config+0x160>)
 800afdc:	4013      	ands	r3, r2
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	69d2      	ldr	r2, [r2, #28]
 800afe2:	00d2      	lsls	r2, r2, #3
 800afe4:	4920      	ldr	r1, [pc, #128]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800afea:	4b1f      	ldr	r3, [pc, #124]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800afec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afee:	4a1e      	ldr	r2, [pc, #120]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800aff0:	f043 0310 	orr.w	r3, r3, #16
 800aff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d106      	bne.n	800b00a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800affc:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800affe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b000:	4a19      	ldr	r2, [pc, #100]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b008:	e00f      	b.n	800b02a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d106      	bne.n	800b01e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b010:	4b15      	ldr	r3, [pc, #84]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	4a14      	ldr	r2, [pc, #80]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b01a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b01c:	e005      	b.n	800b02a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b01e:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b022:	4a11      	ldr	r2, [pc, #68]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b024:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b028:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b02a:	4b0f      	ldr	r3, [pc, #60]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a0e      	ldr	r2, [pc, #56]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b036:	f7f8 f947 	bl	80032c8 <HAL_GetTick>
 800b03a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b03c:	e008      	b.n	800b050 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b03e:	f7f8 f943 	bl	80032c8 <HAL_GetTick>
 800b042:	4602      	mov	r2, r0
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d901      	bls.n	800b050 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e006      	b.n	800b05e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b050:	4b05      	ldr	r3, [pc, #20]	@ (800b068 <RCCEx_PLL2_Config+0x15c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0f0      	beq.n	800b03e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	58024400 	.word	0x58024400
 800b06c:	ffff0007 	.word	0xffff0007

0800b070 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b07e:	4b53      	ldr	r3, [pc, #332]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b03      	cmp	r3, #3
 800b088:	d101      	bne.n	800b08e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e099      	b.n	800b1c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b08e:	4b4f      	ldr	r3, [pc, #316]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a4e      	ldr	r2, [pc, #312]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b09a:	f7f8 f915 	bl	80032c8 <HAL_GetTick>
 800b09e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0a2:	f7f8 f911 	bl	80032c8 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e086      	b.n	800b1c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0b4:	4b45      	ldr	r3, [pc, #276]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0c0:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	051b      	lsls	r3, r3, #20
 800b0ce:	493f      	ldr	r1, [pc, #252]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	025b      	lsls	r3, r3, #9
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	061b      	lsls	r3, r3, #24
 800b100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b104:	4931      	ldr	r1, [pc, #196]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b106:	4313      	orrs	r3, r2
 800b108:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b10a:	4b30      	ldr	r3, [pc, #192]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	492d      	ldr	r1, [pc, #180]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b11c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b120:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	4928      	ldr	r1, [pc, #160]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b12e:	4b27      	ldr	r3, [pc, #156]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b132:	4a26      	ldr	r2, [pc, #152]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b13a:	4b24      	ldr	r3, [pc, #144]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b13c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b13e:	4b24      	ldr	r3, [pc, #144]	@ (800b1d0 <RCCEx_PLL3_Config+0x160>)
 800b140:	4013      	ands	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	69d2      	ldr	r2, [r2, #28]
 800b146:	00d2      	lsls	r2, r2, #3
 800b148:	4920      	ldr	r1, [pc, #128]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b14e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b152:	4a1e      	ldr	r2, [pc, #120]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b160:	4b1a      	ldr	r3, [pc, #104]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	4a19      	ldr	r2, [pc, #100]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b16a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b16c:	e00f      	b.n	800b18e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d106      	bne.n	800b182 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b174:	4b15      	ldr	r3, [pc, #84]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a14      	ldr	r2, [pc, #80]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b17a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b180:	e005      	b.n	800b18e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b182:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b186:	4a11      	ldr	r2, [pc, #68]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b18c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b18e:	4b0f      	ldr	r3, [pc, #60]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a0e      	ldr	r2, [pc, #56]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b19a:	f7f8 f895 	bl	80032c8 <HAL_GetTick>
 800b19e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1a0:	e008      	b.n	800b1b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1a2:	f7f8 f891 	bl	80032c8 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e006      	b.n	800b1c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <RCCEx_PLL3_Config+0x15c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0f0      	beq.n	800b1a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	ffff0007 	.word	0xffff0007

0800b1d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e049      	b.n	800b27a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f841 	bl	800b282 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3304      	adds	r3, #4
 800b210:	4619      	mov	r1, r3
 800b212:	4610      	mov	r0, r2
 800b214:	f000 f9e8 	bl	800b5e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b28a:	bf00      	nop
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d001      	beq.n	800b2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e054      	b.n	800b35a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a26      	ldr	r2, [pc, #152]	@ (800b368 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d022      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2da:	d01d      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a22      	ldr	r2, [pc, #136]	@ (800b36c <HAL_TIM_Base_Start_IT+0xd4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d018      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a21      	ldr	r2, [pc, #132]	@ (800b370 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b374 <HAL_TIM_Base_Start_IT+0xdc>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00e      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b378 <HAL_TIM_Base_Start_IT+0xe0>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d009      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1c      	ldr	r2, [pc, #112]	@ (800b37c <HAL_TIM_Base_Start_IT+0xe4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d004      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a1b      	ldr	r2, [pc, #108]	@ (800b380 <HAL_TIM_Base_Start_IT+0xe8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d115      	bne.n	800b344 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	4b19      	ldr	r3, [pc, #100]	@ (800b384 <HAL_TIM_Base_Start_IT+0xec>)
 800b320:	4013      	ands	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b06      	cmp	r3, #6
 800b328:	d015      	beq.n	800b356 <HAL_TIM_Base_Start_IT+0xbe>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b330:	d011      	beq.n	800b356 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f042 0201 	orr.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b342:	e008      	b.n	800b356 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0201 	orr.w	r2, r2, #1
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	e000      	b.n	800b358 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	40010000 	.word	0x40010000
 800b36c:	40000400 	.word	0x40000400
 800b370:	40000800 	.word	0x40000800
 800b374:	40000c00 	.word	0x40000c00
 800b378:	40010400 	.word	0x40010400
 800b37c:	40001800 	.word	0x40001800
 800b380:	40014000 	.word	0x40014000
 800b384:	00010007 	.word	0x00010007

0800b388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d020      	beq.n	800b3ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01b      	beq.n	800b3ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f06f 0202 	mvn.w	r2, #2
 800b3bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f8e9 	bl	800b5aa <HAL_TIM_IC_CaptureCallback>
 800b3d8:	e005      	b.n	800b3e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f8db 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f8ec 	bl	800b5be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f003 0304 	and.w	r3, r3, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d020      	beq.n	800b438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01b      	beq.n	800b438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f06f 0204 	mvn.w	r2, #4
 800b408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2202      	movs	r2, #2
 800b40e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f8c3 	bl	800b5aa <HAL_TIM_IC_CaptureCallback>
 800b424:	e005      	b.n	800b432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f8b5 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f8c6 	bl	800b5be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f003 0308 	and.w	r3, r3, #8
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d020      	beq.n	800b484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f003 0308 	and.w	r3, r3, #8
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01b      	beq.n	800b484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f06f 0208 	mvn.w	r2, #8
 800b454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2204      	movs	r2, #4
 800b45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f89d 	bl	800b5aa <HAL_TIM_IC_CaptureCallback>
 800b470:	e005      	b.n	800b47e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f88f 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f8a0 	bl	800b5be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f003 0310 	and.w	r3, r3, #16
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d020      	beq.n	800b4d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01b      	beq.n	800b4d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f06f 0210 	mvn.w	r2, #16
 800b4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f877 	bl	800b5aa <HAL_TIM_IC_CaptureCallback>
 800b4bc:	e005      	b.n	800b4ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f869 	bl	800b596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f87a 	bl	800b5be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00c      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d007      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f06f 0201 	mvn.w	r2, #1
 800b4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7f5 fc70 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d104      	bne.n	800b508 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00c      	beq.n	800b522 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d007      	beq.n	800b522 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f90d 	bl	800b73c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00c      	beq.n	800b546 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b532:	2b00      	cmp	r3, #0
 800b534:	d007      	beq.n	800b546 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f905 	bl	800b750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00c      	beq.n	800b56a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b556:	2b00      	cmp	r3, #0
 800b558:	d007      	beq.n	800b56a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f834 	bl	800b5d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	f003 0320 	and.w	r3, r3, #32
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00c      	beq.n	800b58e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f003 0320 	and.w	r3, r3, #32
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d007      	beq.n	800b58e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f06f 0220 	mvn.w	r2, #32
 800b586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f8cd 	bl	800b728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b58e:	bf00      	nop
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b596:	b480      	push	{r7}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5b2:	bf00      	nop
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5c6:	bf00      	nop
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5da:	bf00      	nop
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
	...

0800b5e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a43      	ldr	r2, [pc, #268]	@ (800b708 <TIM_Base_SetConfig+0x120>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d013      	beq.n	800b628 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b606:	d00f      	beq.n	800b628 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a40      	ldr	r2, [pc, #256]	@ (800b70c <TIM_Base_SetConfig+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00b      	beq.n	800b628 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a3f      	ldr	r2, [pc, #252]	@ (800b710 <TIM_Base_SetConfig+0x128>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d007      	beq.n	800b628 <TIM_Base_SetConfig+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a3e      	ldr	r2, [pc, #248]	@ (800b714 <TIM_Base_SetConfig+0x12c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_Base_SetConfig+0x40>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a3d      	ldr	r2, [pc, #244]	@ (800b718 <TIM_Base_SetConfig+0x130>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d108      	bne.n	800b63a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b62e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a32      	ldr	r2, [pc, #200]	@ (800b708 <TIM_Base_SetConfig+0x120>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01f      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b648:	d01b      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2f      	ldr	r2, [pc, #188]	@ (800b70c <TIM_Base_SetConfig+0x124>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d017      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a2e      	ldr	r2, [pc, #184]	@ (800b710 <TIM_Base_SetConfig+0x128>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d013      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a2d      	ldr	r2, [pc, #180]	@ (800b714 <TIM_Base_SetConfig+0x12c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00f      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2c      	ldr	r2, [pc, #176]	@ (800b718 <TIM_Base_SetConfig+0x130>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d00b      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a2b      	ldr	r2, [pc, #172]	@ (800b71c <TIM_Base_SetConfig+0x134>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d007      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a2a      	ldr	r2, [pc, #168]	@ (800b720 <TIM_Base_SetConfig+0x138>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d003      	beq.n	800b682 <TIM_Base_SetConfig+0x9a>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a29      	ldr	r2, [pc, #164]	@ (800b724 <TIM_Base_SetConfig+0x13c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d108      	bne.n	800b694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	689a      	ldr	r2, [r3, #8]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a14      	ldr	r2, [pc, #80]	@ (800b708 <TIM_Base_SetConfig+0x120>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <TIM_Base_SetConfig+0xf2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a16      	ldr	r2, [pc, #88]	@ (800b718 <TIM_Base_SetConfig+0x130>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00b      	beq.n	800b6da <TIM_Base_SetConfig+0xf2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a15      	ldr	r2, [pc, #84]	@ (800b71c <TIM_Base_SetConfig+0x134>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_Base_SetConfig+0xf2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a14      	ldr	r2, [pc, #80]	@ (800b720 <TIM_Base_SetConfig+0x138>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_Base_SetConfig+0xf2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a13      	ldr	r2, [pc, #76]	@ (800b724 <TIM_Base_SetConfig+0x13c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d103      	bne.n	800b6e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	691a      	ldr	r2, [r3, #16]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f043 0204 	orr.w	r2, r3, #4
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	601a      	str	r2, [r3, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	40010000 	.word	0x40010000
 800b70c:	40000400 	.word	0x40000400
 800b710:	40000800 	.word	0x40000800
 800b714:	40000c00 	.word	0x40000c00
 800b718:	40010400 	.word	0x40010400
 800b71c:	40014000 	.word	0x40014000
 800b720:	40014400 	.word	0x40014400
 800b724:	40014800 	.word	0x40014800

0800b728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e042      	b.n	800b7fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7f5 fd05 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2224      	movs	r2, #36	@ 0x24
 800b792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0201 	bic.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f001 fa88 	bl	800ccc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fd1d 	bl	800c1f4 <UART_SetConfig>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e01b      	b.n	800b7fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b7d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fb07 	bl	800ce08 <UART_CheckIdleState>
 800b7fa:	4603      	mov	r3, r0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e031      	b.n	800b87a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2224      	movs	r2, #36	@ 0x24
 800b81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0201 	bic.w	r2, r2, #1
 800b82c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2200      	movs	r2, #0
 800b844:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7f5 fd5c 	bl	8001304 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	@ 0x28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d137      	bne.n	800b90c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d002      	beq.n	800b8a8 <HAL_UART_Receive_IT+0x24>
 800b8a2:	88fb      	ldrh	r3, [r7, #6]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e030      	b.n	800b90e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a18      	ldr	r2, [pc, #96]	@ (800b918 <HAL_UART_Receive_IT+0x94>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d01f      	beq.n	800b8fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d018      	beq.n	800b8fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	623b      	str	r3, [r7, #32]
 800b8ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	69f9      	ldr	r1, [r7, #28]
 800b8ee:	6a3a      	ldr	r2, [r7, #32]
 800b8f0:	e841 2300 	strex	r3, r2, [r1]
 800b8f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e6      	bne.n	800b8ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	461a      	mov	r2, r3
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f001 fb98 	bl	800d038 <UART_Start_Receive_IT>
 800b908:	4603      	mov	r3, r0
 800b90a:	e000      	b.n	800b90e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b90c:	2302      	movs	r3, #2
  }
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3728      	adds	r7, #40	@ 0x28
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	58000c00 	.word	0x58000c00

0800b91c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08a      	sub	sp, #40	@ 0x28
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b930:	2b20      	cmp	r3, #32
 800b932:	d167      	bne.n	800ba04 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <HAL_UART_Transmit_DMA+0x24>
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e060      	b.n	800ba06 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	88fa      	ldrh	r2, [r7, #6]
 800b94e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	88fa      	ldrh	r2, [r7, #6]
 800b956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2221      	movs	r2, #33	@ 0x21
 800b966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d028      	beq.n	800b9c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b976:	4a26      	ldr	r2, [pc, #152]	@ (800ba10 <HAL_UART_Transmit_DMA+0xf4>)
 800b978:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b97e:	4a25      	ldr	r2, [pc, #148]	@ (800ba14 <HAL_UART_Transmit_DMA+0xf8>)
 800b980:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b986:	4a24      	ldr	r2, [pc, #144]	@ (800ba18 <HAL_UART_Transmit_DMA+0xfc>)
 800b988:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b98e:	2200      	movs	r2, #0
 800b990:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b99a:	4619      	mov	r1, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3328      	adds	r3, #40	@ 0x28
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	f7f8 fb67 	bl	8004078 <HAL_DMA_Start_IT>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d009      	beq.n	800b9c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2210      	movs	r2, #16
 800b9b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e020      	b.n	800ba06 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2240      	movs	r2, #64	@ 0x40
 800b9ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	613b      	str	r3, [r7, #16]
   return(result);
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ec:	623a      	str	r2, [r7, #32]
 800b9ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f0:	69f9      	ldr	r1, [r7, #28]
 800b9f2:	6a3a      	ldr	r2, [r7, #32]
 800b9f4:	e841 2300 	strex	r3, r2, [r1]
 800b9f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1e5      	bne.n	800b9cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	e000      	b.n	800ba06 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ba04:	2302      	movs	r3, #2
  }
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3728      	adds	r7, #40	@ 0x28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800d3cd 	.word	0x0800d3cd
 800ba14:	0800d463 	.word	0x0800d463
 800ba18:	0800d47f 	.word	0x0800d47f

0800ba1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b0ba      	sub	sp, #232	@ 0xe8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ba46:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d11b      	bne.n	800ba90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d015      	beq.n	800ba90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d105      	bne.n	800ba7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 8393 	beq.w	800c1ac <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
      }
      return;
 800ba8e:	e38d      	b.n	800c1ac <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 8123 	beq.w	800bce0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba9e:	4b8d      	ldr	r3, [pc, #564]	@ (800bcd4 <HAL_UART_IRQHandler+0x2b8>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800baa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800baaa:	4b8b      	ldr	r3, [pc, #556]	@ (800bcd8 <HAL_UART_IRQHandler+0x2bc>)
 800baac:	4013      	ands	r3, r2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 8116 	beq.w	800bce0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	d011      	beq.n	800bae4 <HAL_UART_IRQHandler+0xc8>
 800bac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00b      	beq.n	800bae4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2201      	movs	r2, #1
 800bad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bada:	f043 0201 	orr.w	r2, r3, #1
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	2b00      	cmp	r3, #0
 800baee:	d011      	beq.n	800bb14 <HAL_UART_IRQHandler+0xf8>
 800baf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00b      	beq.n	800bb14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2202      	movs	r2, #2
 800bb02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb0a:	f043 0204 	orr.w	r2, r3, #4
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d011      	beq.n	800bb44 <HAL_UART_IRQHandler+0x128>
 800bb20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00b      	beq.n	800bb44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2204      	movs	r2, #4
 800bb32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb3a:	f043 0202 	orr.w	r2, r3, #2
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d017      	beq.n	800bb80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb54:	f003 0320 	and.w	r3, r3, #32
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d105      	bne.n	800bb68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb60:	4b5c      	ldr	r3, [pc, #368]	@ (800bcd4 <HAL_UART_IRQHandler+0x2b8>)
 800bb62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb76:	f043 0208 	orr.w	r2, r3, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d012      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x196>
 800bb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00c      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bba8:	f043 0220 	orr.w	r2, r3, #32
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 82f9 	beq.w	800c1b0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d013      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbce:	f003 0320 	and.w	r3, r3, #32
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d105      	bne.n	800bbe2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc06:	2b40      	cmp	r3, #64	@ 0x40
 800bc08:	d005      	beq.n	800bc16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bc0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d054      	beq.n	800bcc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 fb72 	bl	800d300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc26:	2b40      	cmp	r3, #64	@ 0x40
 800bc28:	d146      	bne.n	800bcb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3308      	adds	r3, #8
 800bc30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3308      	adds	r3, #8
 800bc52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1d9      	bne.n	800bc2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d017      	beq.n	800bcb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc86:	4a15      	ldr	r2, [pc, #84]	@ (800bcdc <HAL_UART_IRQHandler+0x2c0>)
 800bc88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f8 ff79 	bl	8004b88 <HAL_DMA_Abort_IT>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d019      	beq.n	800bcd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcae:	e00f      	b.n	800bcd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7f6 f887 	bl	8001dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb6:	e00b      	b.n	800bcd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7f6 f883 	bl	8001dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcbe:	e007      	b.n	800bcd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7f6 f87f 	bl	8001dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bcce:	e26f      	b.n	800c1b0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd0:	bf00      	nop
    return;
 800bcd2:	e26d      	b.n	800c1b0 <HAL_UART_IRQHandler+0x794>
 800bcd4:	10000001 	.word	0x10000001
 800bcd8:	04000120 	.word	0x04000120
 800bcdc:	0800d4ff 	.word	0x0800d4ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	f040 8203 	bne.w	800c0f0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 81fc 	beq.w	800c0f0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bcf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 81f5 	beq.w	800c0f0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2210      	movs	r2, #16
 800bd0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd18:	2b40      	cmp	r3, #64	@ 0x40
 800bd1a:	f040 816d 	bne.w	800bff8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4aa4      	ldr	r2, [pc, #656]	@ (800bfb8 <HAL_UART_IRQHandler+0x59c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d068      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4aa1      	ldr	r2, [pc, #644]	@ (800bfbc <HAL_UART_IRQHandler+0x5a0>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d061      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a9f      	ldr	r2, [pc, #636]	@ (800bfc0 <HAL_UART_IRQHandler+0x5a4>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d05a      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a9c      	ldr	r2, [pc, #624]	@ (800bfc4 <HAL_UART_IRQHandler+0x5a8>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d053      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a9a      	ldr	r2, [pc, #616]	@ (800bfc8 <HAL_UART_IRQHandler+0x5ac>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d04c      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a97      	ldr	r2, [pc, #604]	@ (800bfcc <HAL_UART_IRQHandler+0x5b0>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d045      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a95      	ldr	r2, [pc, #596]	@ (800bfd0 <HAL_UART_IRQHandler+0x5b4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d03e      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a92      	ldr	r2, [pc, #584]	@ (800bfd4 <HAL_UART_IRQHandler+0x5b8>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d037      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a90      	ldr	r2, [pc, #576]	@ (800bfd8 <HAL_UART_IRQHandler+0x5bc>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d030      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a8d      	ldr	r2, [pc, #564]	@ (800bfdc <HAL_UART_IRQHandler+0x5c0>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d029      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a8b      	ldr	r2, [pc, #556]	@ (800bfe0 <HAL_UART_IRQHandler+0x5c4>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d022      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a88      	ldr	r2, [pc, #544]	@ (800bfe4 <HAL_UART_IRQHandler+0x5c8>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d01b      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a86      	ldr	r2, [pc, #536]	@ (800bfe8 <HAL_UART_IRQHandler+0x5cc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d014      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a83      	ldr	r2, [pc, #524]	@ (800bfec <HAL_UART_IRQHandler+0x5d0>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00d      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a81      	ldr	r2, [pc, #516]	@ (800bff0 <HAL_UART_IRQHandler+0x5d4>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d006      	beq.n	800bdfe <HAL_UART_IRQHandler+0x3e2>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a7e      	ldr	r2, [pc, #504]	@ (800bff4 <HAL_UART_IRQHandler+0x5d8>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d106      	bne.n	800be0c <HAL_UART_IRQHandler+0x3f0>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	e005      	b.n	800be18 <HAL_UART_IRQHandler+0x3fc>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 80ad 	beq.w	800bf80 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be30:	429a      	cmp	r2, r3
 800be32:	f080 80a5 	bcs.w	800bf80 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be4c:	f000 8087 	beq.w	800bf5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800be86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800be92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1da      	bne.n	800be50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800beaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3308      	adds	r3, #8
 800beba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bebe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e1      	bne.n	800be9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3308      	adds	r3, #8
 800bedc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800beec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3308      	adds	r3, #8
 800bef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800befa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800befc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e3      	bne.n	800bed6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf2c:	f023 0310 	bic.w	r3, r3, #16
 800bf30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e4      	bne.n	800bf1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f8 faf7 	bl	800454c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2202      	movs	r2, #2
 800bf62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f92f 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bf7e:	e119      	b.n	800c1b4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	f040 8112 	bne.w	800c1b4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9c:	f040 810a 	bne.w	800c1b4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f914 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
      return;
 800bfb4:	e0fe      	b.n	800c1b4 <HAL_UART_IRQHandler+0x798>
 800bfb6:	bf00      	nop
 800bfb8:	40020010 	.word	0x40020010
 800bfbc:	40020028 	.word	0x40020028
 800bfc0:	40020040 	.word	0x40020040
 800bfc4:	40020058 	.word	0x40020058
 800bfc8:	40020070 	.word	0x40020070
 800bfcc:	40020088 	.word	0x40020088
 800bfd0:	400200a0 	.word	0x400200a0
 800bfd4:	400200b8 	.word	0x400200b8
 800bfd8:	40020410 	.word	0x40020410
 800bfdc:	40020428 	.word	0x40020428
 800bfe0:	40020440 	.word	0x40020440
 800bfe4:	40020458 	.word	0x40020458
 800bfe8:	40020470 	.word	0x40020470
 800bfec:	40020488 	.word	0x40020488
 800bff0:	400204a0 	.word	0x400204a0
 800bff4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c004:	b29b      	uxth	r3, r3
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c012:	b29b      	uxth	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80cf 	beq.w	800c1b8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800c01a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 80ca 	beq.w	800c1b8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	461a      	mov	r2, r3
 800c042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c046:	647b      	str	r3, [r7, #68]	@ 0x44
 800c048:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c04c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e4      	bne.n	800c024 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	623b      	str	r3, [r7, #32]
   return(result);
 800c06a:	6a3a      	ldr	r2, [r7, #32]
 800c06c:	4b55      	ldr	r3, [pc, #340]	@ (800c1c4 <HAL_UART_IRQHandler+0x7a8>)
 800c06e:	4013      	ands	r3, r2
 800c070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c07e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e3      	bne.n	800c05a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0310 	bic.w	r3, r3, #16
 800c0ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0cc:	69b9      	ldr	r1, [r7, #24]
 800c0ce:	69fa      	ldr	r2, [r7, #28]
 800c0d0:	e841 2300 	strex	r3, r2, [r1]
 800c0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1e4      	bne.n	800c0a6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f877 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0ee:	e063      	b.n	800c1b8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00e      	beq.n	800c11a <HAL_UART_IRQHandler+0x6fe>
 800c0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f001 ff50 	bl	800dfb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c118:	e051      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c122:	2b00      	cmp	r3, #0
 800c124:	d014      	beq.n	800c150 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d008      	beq.n	800c150 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c142:	2b00      	cmp	r3, #0
 800c144:	d03a      	beq.n	800c1bc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
    }
    return;
 800c14e:	e035      	b.n	800c1bc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d009      	beq.n	800c170 <HAL_UART_IRQHandler+0x754>
 800c15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c164:	2b00      	cmp	r3, #0
 800c166:	d003      	beq.n	800c170 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 f9da 	bl	800d522 <UART_EndTransmit_IT>
    return;
 800c16e:	e026      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d009      	beq.n	800c190 <HAL_UART_IRQHandler+0x774>
 800c17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c180:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d003      	beq.n	800c190 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 ff29 	bl	800dfe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c18e:	e016      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d010      	beq.n	800c1be <HAL_UART_IRQHandler+0x7a2>
 800c19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	da0c      	bge.n	800c1be <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f001 ff11 	bl	800dfcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1aa:	e008      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800c1ac:	bf00      	nop
 800c1ae:	e006      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
    return;
 800c1b0:	bf00      	nop
 800c1b2:	e004      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800c1b4:	bf00      	nop
 800c1b6:	e002      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800c1b8:	bf00      	nop
 800c1ba:	e000      	b.n	800c1be <HAL_UART_IRQHandler+0x7a2>
    return;
 800c1bc:	bf00      	nop
  }
}
 800c1be:	37e8      	adds	r7, #232	@ 0xe8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	effffffe 	.word	0xeffffffe

0800c1c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1f8:	b092      	sub	sp, #72	@ 0x48
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	689a      	ldr	r2, [r3, #8]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	431a      	orrs	r2, r3
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	431a      	orrs	r2, r3
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	4313      	orrs	r3, r2
 800c21a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4bbe      	ldr	r3, [pc, #760]	@ (800c51c <UART_SetConfig+0x328>)
 800c224:	4013      	ands	r3, r2
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c22c:	430b      	orrs	r3, r1
 800c22e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4ab3      	ldr	r2, [pc, #716]	@ (800c520 <UART_SetConfig+0x32c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d004      	beq.n	800c260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c25c:	4313      	orrs	r3, r2
 800c25e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	4baf      	ldr	r3, [pc, #700]	@ (800c524 <UART_SetConfig+0x330>)
 800c268:	4013      	ands	r3, r2
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	6812      	ldr	r2, [r2, #0]
 800c26e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c270:	430b      	orrs	r3, r1
 800c272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27a:	f023 010f 	bic.w	r1, r3, #15
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4aa6      	ldr	r2, [pc, #664]	@ (800c528 <UART_SetConfig+0x334>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d177      	bne.n	800c384 <UART_SetConfig+0x190>
 800c294:	4ba5      	ldr	r3, [pc, #660]	@ (800c52c <UART_SetConfig+0x338>)
 800c296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c29c:	2b28      	cmp	r3, #40	@ 0x28
 800c29e:	d86d      	bhi.n	800c37c <UART_SetConfig+0x188>
 800c2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a8 <UART_SetConfig+0xb4>)
 800c2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a6:	bf00      	nop
 800c2a8:	0800c34d 	.word	0x0800c34d
 800c2ac:	0800c37d 	.word	0x0800c37d
 800c2b0:	0800c37d 	.word	0x0800c37d
 800c2b4:	0800c37d 	.word	0x0800c37d
 800c2b8:	0800c37d 	.word	0x0800c37d
 800c2bc:	0800c37d 	.word	0x0800c37d
 800c2c0:	0800c37d 	.word	0x0800c37d
 800c2c4:	0800c37d 	.word	0x0800c37d
 800c2c8:	0800c355 	.word	0x0800c355
 800c2cc:	0800c37d 	.word	0x0800c37d
 800c2d0:	0800c37d 	.word	0x0800c37d
 800c2d4:	0800c37d 	.word	0x0800c37d
 800c2d8:	0800c37d 	.word	0x0800c37d
 800c2dc:	0800c37d 	.word	0x0800c37d
 800c2e0:	0800c37d 	.word	0x0800c37d
 800c2e4:	0800c37d 	.word	0x0800c37d
 800c2e8:	0800c35d 	.word	0x0800c35d
 800c2ec:	0800c37d 	.word	0x0800c37d
 800c2f0:	0800c37d 	.word	0x0800c37d
 800c2f4:	0800c37d 	.word	0x0800c37d
 800c2f8:	0800c37d 	.word	0x0800c37d
 800c2fc:	0800c37d 	.word	0x0800c37d
 800c300:	0800c37d 	.word	0x0800c37d
 800c304:	0800c37d 	.word	0x0800c37d
 800c308:	0800c365 	.word	0x0800c365
 800c30c:	0800c37d 	.word	0x0800c37d
 800c310:	0800c37d 	.word	0x0800c37d
 800c314:	0800c37d 	.word	0x0800c37d
 800c318:	0800c37d 	.word	0x0800c37d
 800c31c:	0800c37d 	.word	0x0800c37d
 800c320:	0800c37d 	.word	0x0800c37d
 800c324:	0800c37d 	.word	0x0800c37d
 800c328:	0800c36d 	.word	0x0800c36d
 800c32c:	0800c37d 	.word	0x0800c37d
 800c330:	0800c37d 	.word	0x0800c37d
 800c334:	0800c37d 	.word	0x0800c37d
 800c338:	0800c37d 	.word	0x0800c37d
 800c33c:	0800c37d 	.word	0x0800c37d
 800c340:	0800c37d 	.word	0x0800c37d
 800c344:	0800c37d 	.word	0x0800c37d
 800c348:	0800c375 	.word	0x0800c375
 800c34c:	2301      	movs	r3, #1
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c352:	e222      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c354:	2304      	movs	r3, #4
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35a:	e21e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c35c:	2308      	movs	r3, #8
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c362:	e21a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c364:	2310      	movs	r3, #16
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36a:	e216      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c36c:	2320      	movs	r3, #32
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e212      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c374:	2340      	movs	r3, #64	@ 0x40
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e20e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c37c:	2380      	movs	r3, #128	@ 0x80
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e20a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a69      	ldr	r2, [pc, #420]	@ (800c530 <UART_SetConfig+0x33c>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d130      	bne.n	800c3f0 <UART_SetConfig+0x1fc>
 800c38e:	4b67      	ldr	r3, [pc, #412]	@ (800c52c <UART_SetConfig+0x338>)
 800c390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	2b05      	cmp	r3, #5
 800c398:	d826      	bhi.n	800c3e8 <UART_SetConfig+0x1f4>
 800c39a:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a0 <UART_SetConfig+0x1ac>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3b9 	.word	0x0800c3b9
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	0800c3c9 	.word	0x0800c3c9
 800c3ac:	0800c3d1 	.word	0x0800c3d1
 800c3b0:	0800c3d9 	.word	0x0800c3d9
 800c3b4:	0800c3e1 	.word	0x0800c3e1
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3be:	e1ec      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e1e8      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ce:	e1e4      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3d0:	2310      	movs	r3, #16
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d6:	e1e0      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3d8:	2320      	movs	r3, #32
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3de:	e1dc      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3e0:	2340      	movs	r3, #64	@ 0x40
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e1d8      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3e8:	2380      	movs	r3, #128	@ 0x80
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e1d4      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a4f      	ldr	r2, [pc, #316]	@ (800c534 <UART_SetConfig+0x340>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d130      	bne.n	800c45c <UART_SetConfig+0x268>
 800c3fa:	4b4c      	ldr	r3, [pc, #304]	@ (800c52c <UART_SetConfig+0x338>)
 800c3fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	2b05      	cmp	r3, #5
 800c404:	d826      	bhi.n	800c454 <UART_SetConfig+0x260>
 800c406:	a201      	add	r2, pc, #4	@ (adr r2, 800c40c <UART_SetConfig+0x218>)
 800c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40c:	0800c425 	.word	0x0800c425
 800c410:	0800c42d 	.word	0x0800c42d
 800c414:	0800c435 	.word	0x0800c435
 800c418:	0800c43d 	.word	0x0800c43d
 800c41c:	0800c445 	.word	0x0800c445
 800c420:	0800c44d 	.word	0x0800c44d
 800c424:	2300      	movs	r3, #0
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e1b6      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c42c:	2304      	movs	r3, #4
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e1b2      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c434:	2308      	movs	r3, #8
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e1ae      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c43c:	2310      	movs	r3, #16
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e1aa      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c444:	2320      	movs	r3, #32
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e1a6      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c44c:	2340      	movs	r3, #64	@ 0x40
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e1a2      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c454:	2380      	movs	r3, #128	@ 0x80
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e19e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a35      	ldr	r2, [pc, #212]	@ (800c538 <UART_SetConfig+0x344>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d130      	bne.n	800c4c8 <UART_SetConfig+0x2d4>
 800c466:	4b31      	ldr	r3, [pc, #196]	@ (800c52c <UART_SetConfig+0x338>)
 800c468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b05      	cmp	r3, #5
 800c470:	d826      	bhi.n	800c4c0 <UART_SetConfig+0x2cc>
 800c472:	a201      	add	r2, pc, #4	@ (adr r2, 800c478 <UART_SetConfig+0x284>)
 800c474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c478:	0800c491 	.word	0x0800c491
 800c47c:	0800c499 	.word	0x0800c499
 800c480:	0800c4a1 	.word	0x0800c4a1
 800c484:	0800c4a9 	.word	0x0800c4a9
 800c488:	0800c4b1 	.word	0x0800c4b1
 800c48c:	0800c4b9 	.word	0x0800c4b9
 800c490:	2300      	movs	r3, #0
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e180      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c498:	2304      	movs	r3, #4
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e17c      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4a0:	2308      	movs	r3, #8
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e178      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e174      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4b0:	2320      	movs	r3, #32
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e170      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4b8:	2340      	movs	r3, #64	@ 0x40
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e16c      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4c0:	2380      	movs	r3, #128	@ 0x80
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e168      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c53c <UART_SetConfig+0x348>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d142      	bne.n	800c558 <UART_SetConfig+0x364>
 800c4d2:	4b16      	ldr	r3, [pc, #88]	@ (800c52c <UART_SetConfig+0x338>)
 800c4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b05      	cmp	r3, #5
 800c4dc:	d838      	bhi.n	800c550 <UART_SetConfig+0x35c>
 800c4de:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e4 <UART_SetConfig+0x2f0>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c4fd 	.word	0x0800c4fd
 800c4e8:	0800c505 	.word	0x0800c505
 800c4ec:	0800c50d 	.word	0x0800c50d
 800c4f0:	0800c515 	.word	0x0800c515
 800c4f4:	0800c541 	.word	0x0800c541
 800c4f8:	0800c549 	.word	0x0800c549
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c502:	e14a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c504:	2304      	movs	r3, #4
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e146      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c50c:	2308      	movs	r3, #8
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e142      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c514:	2310      	movs	r3, #16
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e13e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c51c:	cfff69f3 	.word	0xcfff69f3
 800c520:	58000c00 	.word	0x58000c00
 800c524:	11fff4ff 	.word	0x11fff4ff
 800c528:	40011000 	.word	0x40011000
 800c52c:	58024400 	.word	0x58024400
 800c530:	40004400 	.word	0x40004400
 800c534:	40004800 	.word	0x40004800
 800c538:	40004c00 	.word	0x40004c00
 800c53c:	40005000 	.word	0x40005000
 800c540:	2320      	movs	r3, #32
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c546:	e128      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c548:	2340      	movs	r3, #64	@ 0x40
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54e:	e124      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c550:	2380      	movs	r3, #128	@ 0x80
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c556:	e120      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4acb      	ldr	r2, [pc, #812]	@ (800c88c <UART_SetConfig+0x698>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d176      	bne.n	800c650 <UART_SetConfig+0x45c>
 800c562:	4bcb      	ldr	r3, [pc, #812]	@ (800c890 <UART_SetConfig+0x69c>)
 800c564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c56a:	2b28      	cmp	r3, #40	@ 0x28
 800c56c:	d86c      	bhi.n	800c648 <UART_SetConfig+0x454>
 800c56e:	a201      	add	r2, pc, #4	@ (adr r2, 800c574 <UART_SetConfig+0x380>)
 800c570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c574:	0800c619 	.word	0x0800c619
 800c578:	0800c649 	.word	0x0800c649
 800c57c:	0800c649 	.word	0x0800c649
 800c580:	0800c649 	.word	0x0800c649
 800c584:	0800c649 	.word	0x0800c649
 800c588:	0800c649 	.word	0x0800c649
 800c58c:	0800c649 	.word	0x0800c649
 800c590:	0800c649 	.word	0x0800c649
 800c594:	0800c621 	.word	0x0800c621
 800c598:	0800c649 	.word	0x0800c649
 800c59c:	0800c649 	.word	0x0800c649
 800c5a0:	0800c649 	.word	0x0800c649
 800c5a4:	0800c649 	.word	0x0800c649
 800c5a8:	0800c649 	.word	0x0800c649
 800c5ac:	0800c649 	.word	0x0800c649
 800c5b0:	0800c649 	.word	0x0800c649
 800c5b4:	0800c629 	.word	0x0800c629
 800c5b8:	0800c649 	.word	0x0800c649
 800c5bc:	0800c649 	.word	0x0800c649
 800c5c0:	0800c649 	.word	0x0800c649
 800c5c4:	0800c649 	.word	0x0800c649
 800c5c8:	0800c649 	.word	0x0800c649
 800c5cc:	0800c649 	.word	0x0800c649
 800c5d0:	0800c649 	.word	0x0800c649
 800c5d4:	0800c631 	.word	0x0800c631
 800c5d8:	0800c649 	.word	0x0800c649
 800c5dc:	0800c649 	.word	0x0800c649
 800c5e0:	0800c649 	.word	0x0800c649
 800c5e4:	0800c649 	.word	0x0800c649
 800c5e8:	0800c649 	.word	0x0800c649
 800c5ec:	0800c649 	.word	0x0800c649
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c639 	.word	0x0800c639
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	0800c649 	.word	0x0800c649
 800c600:	0800c649 	.word	0x0800c649
 800c604:	0800c649 	.word	0x0800c649
 800c608:	0800c649 	.word	0x0800c649
 800c60c:	0800c649 	.word	0x0800c649
 800c610:	0800c649 	.word	0x0800c649
 800c614:	0800c641 	.word	0x0800c641
 800c618:	2301      	movs	r3, #1
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61e:	e0bc      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c620:	2304      	movs	r3, #4
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c626:	e0b8      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c628:	2308      	movs	r3, #8
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c62e:	e0b4      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c630:	2310      	movs	r3, #16
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c636:	e0b0      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c638:	2320      	movs	r3, #32
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c63e:	e0ac      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c640:	2340      	movs	r3, #64	@ 0x40
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e0a8      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c648:	2380      	movs	r3, #128	@ 0x80
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e0a4      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a8f      	ldr	r2, [pc, #572]	@ (800c894 <UART_SetConfig+0x6a0>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d130      	bne.n	800c6bc <UART_SetConfig+0x4c8>
 800c65a:	4b8d      	ldr	r3, [pc, #564]	@ (800c890 <UART_SetConfig+0x69c>)
 800c65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b05      	cmp	r3, #5
 800c664:	d826      	bhi.n	800c6b4 <UART_SetConfig+0x4c0>
 800c666:	a201      	add	r2, pc, #4	@ (adr r2, 800c66c <UART_SetConfig+0x478>)
 800c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66c:	0800c685 	.word	0x0800c685
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c69d 	.word	0x0800c69d
 800c67c:	0800c6a5 	.word	0x0800c6a5
 800c680:	0800c6ad 	.word	0x0800c6ad
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68a:	e086      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c692:	e082      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69a:	e07e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a2:	e07a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6aa:	e076      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c6ac:	2340      	movs	r3, #64	@ 0x40
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b2:	e072      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c6b4:	2380      	movs	r3, #128	@ 0x80
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	e06e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a75      	ldr	r2, [pc, #468]	@ (800c898 <UART_SetConfig+0x6a4>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d130      	bne.n	800c728 <UART_SetConfig+0x534>
 800c6c6:	4b72      	ldr	r3, [pc, #456]	@ (800c890 <UART_SetConfig+0x69c>)
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d826      	bhi.n	800c720 <UART_SetConfig+0x52c>
 800c6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d8 <UART_SetConfig+0x4e4>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c6f1 	.word	0x0800c6f1
 800c6dc:	0800c6f9 	.word	0x0800c6f9
 800c6e0:	0800c701 	.word	0x0800c701
 800c6e4:	0800c709 	.word	0x0800c709
 800c6e8:	0800c711 	.word	0x0800c711
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6f6:	e050      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fe:	e04c      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c700:	2308      	movs	r3, #8
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c706:	e048      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c708:	2310      	movs	r3, #16
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70e:	e044      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c710:	2320      	movs	r3, #32
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c716:	e040      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c718:	2340      	movs	r3, #64	@ 0x40
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71e:	e03c      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c720:	2380      	movs	r3, #128	@ 0x80
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c726:	e038      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a5b      	ldr	r2, [pc, #364]	@ (800c89c <UART_SetConfig+0x6a8>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d130      	bne.n	800c794 <UART_SetConfig+0x5a0>
 800c732:	4b57      	ldr	r3, [pc, #348]	@ (800c890 <UART_SetConfig+0x69c>)
 800c734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c736:	f003 0307 	and.w	r3, r3, #7
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d826      	bhi.n	800c78c <UART_SetConfig+0x598>
 800c73e:	a201      	add	r2, pc, #4	@ (adr r2, 800c744 <UART_SetConfig+0x550>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c75d 	.word	0x0800c75d
 800c748:	0800c765 	.word	0x0800c765
 800c74c:	0800c76d 	.word	0x0800c76d
 800c750:	0800c775 	.word	0x0800c775
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c785 	.word	0x0800c785
 800c75c:	2302      	movs	r3, #2
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c762:	e01a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c764:	2304      	movs	r3, #4
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76a:	e016      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c76c:	2308      	movs	r3, #8
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c772:	e012      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c774:	2310      	movs	r3, #16
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77a:	e00e      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c77c:	2320      	movs	r3, #32
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c782:	e00a      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c784:	2340      	movs	r3, #64	@ 0x40
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78a:	e006      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c78c:	2380      	movs	r3, #128	@ 0x80
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c792:	e002      	b.n	800c79a <UART_SetConfig+0x5a6>
 800c794:	2380      	movs	r3, #128	@ 0x80
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a3f      	ldr	r2, [pc, #252]	@ (800c89c <UART_SetConfig+0x6a8>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	f040 80f8 	bne.w	800c996 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	2b20      	cmp	r3, #32
 800c7ac:	dc46      	bgt.n	800c83c <UART_SetConfig+0x648>
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	f2c0 8082 	blt.w	800c8b8 <UART_SetConfig+0x6c4>
 800c7b4:	3b02      	subs	r3, #2
 800c7b6:	2b1e      	cmp	r3, #30
 800c7b8:	d87e      	bhi.n	800c8b8 <UART_SetConfig+0x6c4>
 800c7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c0 <UART_SetConfig+0x5cc>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c843 	.word	0x0800c843
 800c7c4:	0800c8b9 	.word	0x0800c8b9
 800c7c8:	0800c84b 	.word	0x0800c84b
 800c7cc:	0800c8b9 	.word	0x0800c8b9
 800c7d0:	0800c8b9 	.word	0x0800c8b9
 800c7d4:	0800c8b9 	.word	0x0800c8b9
 800c7d8:	0800c85b 	.word	0x0800c85b
 800c7dc:	0800c8b9 	.word	0x0800c8b9
 800c7e0:	0800c8b9 	.word	0x0800c8b9
 800c7e4:	0800c8b9 	.word	0x0800c8b9
 800c7e8:	0800c8b9 	.word	0x0800c8b9
 800c7ec:	0800c8b9 	.word	0x0800c8b9
 800c7f0:	0800c8b9 	.word	0x0800c8b9
 800c7f4:	0800c8b9 	.word	0x0800c8b9
 800c7f8:	0800c86b 	.word	0x0800c86b
 800c7fc:	0800c8b9 	.word	0x0800c8b9
 800c800:	0800c8b9 	.word	0x0800c8b9
 800c804:	0800c8b9 	.word	0x0800c8b9
 800c808:	0800c8b9 	.word	0x0800c8b9
 800c80c:	0800c8b9 	.word	0x0800c8b9
 800c810:	0800c8b9 	.word	0x0800c8b9
 800c814:	0800c8b9 	.word	0x0800c8b9
 800c818:	0800c8b9 	.word	0x0800c8b9
 800c81c:	0800c8b9 	.word	0x0800c8b9
 800c820:	0800c8b9 	.word	0x0800c8b9
 800c824:	0800c8b9 	.word	0x0800c8b9
 800c828:	0800c8b9 	.word	0x0800c8b9
 800c82c:	0800c8b9 	.word	0x0800c8b9
 800c830:	0800c8b9 	.word	0x0800c8b9
 800c834:	0800c8b9 	.word	0x0800c8b9
 800c838:	0800c8ab 	.word	0x0800c8ab
 800c83c:	2b40      	cmp	r3, #64	@ 0x40
 800c83e:	d037      	beq.n	800c8b0 <UART_SetConfig+0x6bc>
 800c840:	e03a      	b.n	800c8b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c842:	f7fe f84f 	bl	800a8e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c848:	e03c      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe f85e 	bl	800a910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c858:	e034      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85a:	f107 0318 	add.w	r3, r7, #24
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fe f9aa 	bl	800abb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c868:	e02c      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86a:	4b09      	ldr	r3, [pc, #36]	@ (800c890 <UART_SetConfig+0x69c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b00      	cmp	r3, #0
 800c874:	d016      	beq.n	800c8a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c876:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <UART_SetConfig+0x69c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	08db      	lsrs	r3, r3, #3
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	4a07      	ldr	r2, [pc, #28]	@ (800c8a0 <UART_SetConfig+0x6ac>)
 800c882:	fa22 f303 	lsr.w	r3, r2, r3
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c888:	e01c      	b.n	800c8c4 <UART_SetConfig+0x6d0>
 800c88a:	bf00      	nop
 800c88c:	40011400 	.word	0x40011400
 800c890:	58024400 	.word	0x58024400
 800c894:	40007800 	.word	0x40007800
 800c898:	40007c00 	.word	0x40007c00
 800c89c:	58000c00 	.word	0x58000c00
 800c8a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c8a4:	4b9d      	ldr	r3, [pc, #628]	@ (800cb1c <UART_SetConfig+0x928>)
 800c8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8a8:	e00c      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8aa:	4b9d      	ldr	r3, [pc, #628]	@ (800cb20 <UART_SetConfig+0x92c>)
 800c8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ae:	e009      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8b6:	e005      	b.n	800c8c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 81de 	beq.w	800cc88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	4a94      	ldr	r2, [pc, #592]	@ (800cb24 <UART_SetConfig+0x930>)
 800c8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	4413      	add	r3, r2
 800c8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d305      	bcc.n	800c8fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d903      	bls.n	800c904 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c902:	e1c1      	b.n	800cc88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c906:	2200      	movs	r2, #0
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	60fa      	str	r2, [r7, #12]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c910:	4a84      	ldr	r2, [pc, #528]	@ (800cb24 <UART_SetConfig+0x930>)
 800c912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c916:	b29b      	uxth	r3, r3
 800c918:	2200      	movs	r2, #0
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c926:	f7f3 fdff 	bl	8000528 <__aeabi_uldivmod>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4610      	mov	r0, r2
 800c930:	4619      	mov	r1, r3
 800c932:	f04f 0200 	mov.w	r2, #0
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	020b      	lsls	r3, r1, #8
 800c93c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c940:	0202      	lsls	r2, r0, #8
 800c942:	6979      	ldr	r1, [r7, #20]
 800c944:	6849      	ldr	r1, [r1, #4]
 800c946:	0849      	lsrs	r1, r1, #1
 800c948:	2000      	movs	r0, #0
 800c94a:	460c      	mov	r4, r1
 800c94c:	4605      	mov	r5, r0
 800c94e:	eb12 0804 	adds.w	r8, r2, r4
 800c952:	eb43 0905 	adc.w	r9, r3, r5
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	469a      	mov	sl, r3
 800c95e:	4693      	mov	fp, r2
 800c960:	4652      	mov	r2, sl
 800c962:	465b      	mov	r3, fp
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f3 fdde 	bl	8000528 <__aeabi_uldivmod>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	4613      	mov	r3, r2
 800c972:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c97a:	d308      	bcc.n	800c98e <UART_SetConfig+0x79a>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c982:	d204      	bcs.n	800c98e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c98a:	60da      	str	r2, [r3, #12]
 800c98c:	e17c      	b.n	800cc88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c994:	e178      	b.n	800cc88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c99e:	f040 80c5 	bne.w	800cb2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c9a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9a6:	2b20      	cmp	r3, #32
 800c9a8:	dc48      	bgt.n	800ca3c <UART_SetConfig+0x848>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	db7b      	blt.n	800caa6 <UART_SetConfig+0x8b2>
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	d879      	bhi.n	800caa6 <UART_SetConfig+0x8b2>
 800c9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b8 <UART_SetConfig+0x7c4>)
 800c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b8:	0800ca43 	.word	0x0800ca43
 800c9bc:	0800ca4b 	.word	0x0800ca4b
 800c9c0:	0800caa7 	.word	0x0800caa7
 800c9c4:	0800caa7 	.word	0x0800caa7
 800c9c8:	0800ca53 	.word	0x0800ca53
 800c9cc:	0800caa7 	.word	0x0800caa7
 800c9d0:	0800caa7 	.word	0x0800caa7
 800c9d4:	0800caa7 	.word	0x0800caa7
 800c9d8:	0800ca63 	.word	0x0800ca63
 800c9dc:	0800caa7 	.word	0x0800caa7
 800c9e0:	0800caa7 	.word	0x0800caa7
 800c9e4:	0800caa7 	.word	0x0800caa7
 800c9e8:	0800caa7 	.word	0x0800caa7
 800c9ec:	0800caa7 	.word	0x0800caa7
 800c9f0:	0800caa7 	.word	0x0800caa7
 800c9f4:	0800caa7 	.word	0x0800caa7
 800c9f8:	0800ca73 	.word	0x0800ca73
 800c9fc:	0800caa7 	.word	0x0800caa7
 800ca00:	0800caa7 	.word	0x0800caa7
 800ca04:	0800caa7 	.word	0x0800caa7
 800ca08:	0800caa7 	.word	0x0800caa7
 800ca0c:	0800caa7 	.word	0x0800caa7
 800ca10:	0800caa7 	.word	0x0800caa7
 800ca14:	0800caa7 	.word	0x0800caa7
 800ca18:	0800caa7 	.word	0x0800caa7
 800ca1c:	0800caa7 	.word	0x0800caa7
 800ca20:	0800caa7 	.word	0x0800caa7
 800ca24:	0800caa7 	.word	0x0800caa7
 800ca28:	0800caa7 	.word	0x0800caa7
 800ca2c:	0800caa7 	.word	0x0800caa7
 800ca30:	0800caa7 	.word	0x0800caa7
 800ca34:	0800caa7 	.word	0x0800caa7
 800ca38:	0800ca99 	.word	0x0800ca99
 800ca3c:	2b40      	cmp	r3, #64	@ 0x40
 800ca3e:	d02e      	beq.n	800ca9e <UART_SetConfig+0x8aa>
 800ca40:	e031      	b.n	800caa6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca42:	f7fc fc97 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800ca46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca48:	e033      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca4a:	f7fc fca9 	bl	80093a0 <HAL_RCC_GetPCLK2Freq>
 800ca4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca50:	e02f      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fd ff5a 	bl	800a910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca60:	e027      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca62:	f107 0318 	add.w	r3, r7, #24
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe f8a6 	bl	800abb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca70:	e01f      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca72:	4b2d      	ldr	r3, [pc, #180]	@ (800cb28 <UART_SetConfig+0x934>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca7e:	4b2a      	ldr	r3, [pc, #168]	@ (800cb28 <UART_SetConfig+0x934>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	08db      	lsrs	r3, r3, #3
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	4a24      	ldr	r2, [pc, #144]	@ (800cb1c <UART_SetConfig+0x928>)
 800ca8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca90:	e00f      	b.n	800cab2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca92:	4b22      	ldr	r3, [pc, #136]	@ (800cb1c <UART_SetConfig+0x928>)
 800ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca96:	e00c      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca98:	4b21      	ldr	r3, [pc, #132]	@ (800cb20 <UART_SetConfig+0x92c>)
 800ca9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca9c:	e009      	b.n	800cab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa4:	e005      	b.n	800cab2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 80e7 	beq.w	800cc88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cabe:	4a19      	ldr	r2, [pc, #100]	@ (800cb24 <UART_SetConfig+0x930>)
 800cac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cac4:	461a      	mov	r2, r3
 800cac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cacc:	005a      	lsls	r2, r3, #1
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	085b      	lsrs	r3, r3, #1
 800cad4:	441a      	add	r2, r3
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	fbb2 f3f3 	udiv	r3, r2, r3
 800cade:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae2:	2b0f      	cmp	r3, #15
 800cae4:	d916      	bls.n	800cb14 <UART_SetConfig+0x920>
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caec:	d212      	bcs.n	800cb14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	f023 030f 	bic.w	r3, r3, #15
 800caf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafa:	085b      	lsrs	r3, r3, #1
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f003 0307 	and.w	r3, r3, #7
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb06:	4313      	orrs	r3, r2
 800cb08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cb10:	60da      	str	r2, [r3, #12]
 800cb12:	e0b9      	b.n	800cc88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb1a:	e0b5      	b.n	800cc88 <UART_SetConfig+0xa94>
 800cb1c:	03d09000 	.word	0x03d09000
 800cb20:	003d0900 	.word	0x003d0900
 800cb24:	08018c6c 	.word	0x08018c6c
 800cb28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb30:	2b20      	cmp	r3, #32
 800cb32:	dc49      	bgt.n	800cbc8 <UART_SetConfig+0x9d4>
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	db7c      	blt.n	800cc32 <UART_SetConfig+0xa3e>
 800cb38:	2b20      	cmp	r3, #32
 800cb3a:	d87a      	bhi.n	800cc32 <UART_SetConfig+0xa3e>
 800cb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb44 <UART_SetConfig+0x950>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cbcf 	.word	0x0800cbcf
 800cb48:	0800cbd7 	.word	0x0800cbd7
 800cb4c:	0800cc33 	.word	0x0800cc33
 800cb50:	0800cc33 	.word	0x0800cc33
 800cb54:	0800cbdf 	.word	0x0800cbdf
 800cb58:	0800cc33 	.word	0x0800cc33
 800cb5c:	0800cc33 	.word	0x0800cc33
 800cb60:	0800cc33 	.word	0x0800cc33
 800cb64:	0800cbef 	.word	0x0800cbef
 800cb68:	0800cc33 	.word	0x0800cc33
 800cb6c:	0800cc33 	.word	0x0800cc33
 800cb70:	0800cc33 	.word	0x0800cc33
 800cb74:	0800cc33 	.word	0x0800cc33
 800cb78:	0800cc33 	.word	0x0800cc33
 800cb7c:	0800cc33 	.word	0x0800cc33
 800cb80:	0800cc33 	.word	0x0800cc33
 800cb84:	0800cbff 	.word	0x0800cbff
 800cb88:	0800cc33 	.word	0x0800cc33
 800cb8c:	0800cc33 	.word	0x0800cc33
 800cb90:	0800cc33 	.word	0x0800cc33
 800cb94:	0800cc33 	.word	0x0800cc33
 800cb98:	0800cc33 	.word	0x0800cc33
 800cb9c:	0800cc33 	.word	0x0800cc33
 800cba0:	0800cc33 	.word	0x0800cc33
 800cba4:	0800cc33 	.word	0x0800cc33
 800cba8:	0800cc33 	.word	0x0800cc33
 800cbac:	0800cc33 	.word	0x0800cc33
 800cbb0:	0800cc33 	.word	0x0800cc33
 800cbb4:	0800cc33 	.word	0x0800cc33
 800cbb8:	0800cc33 	.word	0x0800cc33
 800cbbc:	0800cc33 	.word	0x0800cc33
 800cbc0:	0800cc33 	.word	0x0800cc33
 800cbc4:	0800cc25 	.word	0x0800cc25
 800cbc8:	2b40      	cmp	r3, #64	@ 0x40
 800cbca:	d02e      	beq.n	800cc2a <UART_SetConfig+0xa36>
 800cbcc:	e031      	b.n	800cc32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbce:	f7fc fbd1 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 800cbd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbd4:	e033      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbd6:	f7fc fbe3 	bl	80093a0 <HAL_RCC_GetPCLK2Freq>
 800cbda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbdc:	e02f      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fd fe94 	bl	800a910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbec:	e027      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbee:	f107 0318 	add.w	r3, r7, #24
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fd ffe0 	bl	800abb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbfc:	e01f      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbfe:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb4 <UART_SetConfig+0xac0>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0320 	and.w	r3, r3, #32
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc0a:	4b2a      	ldr	r3, [pc, #168]	@ (800ccb4 <UART_SetConfig+0xac0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	08db      	lsrs	r3, r3, #3
 800cc10:	f003 0303 	and.w	r3, r3, #3
 800cc14:	4a28      	ldr	r2, [pc, #160]	@ (800ccb8 <UART_SetConfig+0xac4>)
 800cc16:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc1c:	e00f      	b.n	800cc3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cc1e:	4b26      	ldr	r3, [pc, #152]	@ (800ccb8 <UART_SetConfig+0xac4>)
 800cc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc22:	e00c      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc24:	4b25      	ldr	r3, [pc, #148]	@ (800ccbc <UART_SetConfig+0xac8>)
 800cc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc28:	e009      	b.n	800cc3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc30:	e005      	b.n	800cc3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cc32:	2300      	movs	r3, #0
 800cc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc3c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d021      	beq.n	800cc88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc48:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc0 <UART_SetConfig+0xacc>)
 800cc4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc52:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	441a      	add	r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6a:	2b0f      	cmp	r3, #15
 800cc6c:	d909      	bls.n	800cc82 <UART_SetConfig+0xa8e>
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc74:	d205      	bcs.n	800cc82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60da      	str	r2, [r3, #12]
 800cc80:	e002      	b.n	800cc88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2200      	movs	r2, #0
 800cca2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cca4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3748      	adds	r7, #72	@ 0x48
 800ccac:	46bd      	mov	sp, r7
 800ccae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccb2:	bf00      	nop
 800ccb4:	58024400 	.word	0x58024400
 800ccb8:	03d09000 	.word	0x03d09000
 800ccbc:	003d0900 	.word	0x003d0900
 800ccc0:	08018c6c 	.word	0x08018c6c

0800ccc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd0:	f003 0308 	and.w	r3, r3, #8
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	430a      	orrs	r2, r1
 800cd0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd14:	f003 0302 	and.w	r3, r3, #2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00a      	beq.n	800cd54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd58:	f003 0310 	and.w	r3, r3, #16
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00a      	beq.n	800cd76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	430a      	orrs	r2, r1
 800cd74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00a      	beq.n	800cd98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01a      	beq.n	800cdda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdc2:	d10a      	bne.n	800cdda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00a      	beq.n	800cdfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	605a      	str	r2, [r3, #4]
  }
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b098      	sub	sp, #96	@ 0x60
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce18:	f7f6 fa56 	bl	80032c8 <HAL_GetTick>
 800ce1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0308 	and.w	r3, r3, #8
 800ce28:	2b08      	cmp	r3, #8
 800ce2a:	d12f      	bne.n	800ce8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce34:	2200      	movs	r2, #0
 800ce36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f88e 	bl	800cf5c <UART_WaitOnFlagUntilTimeout>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d022      	beq.n	800ce8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	e853 3f00 	ldrex	r3, [r3]
 800ce52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	461a      	mov	r2, r3
 800ce62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce6c:	e841 2300 	strex	r3, r2, [r1]
 800ce70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1e6      	bne.n	800ce46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e063      	b.n	800cf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	d149      	bne.n	800cf2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea2:	2200      	movs	r2, #0
 800cea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f857 	bl	800cf5c <UART_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d03c      	beq.n	800cf2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	623b      	str	r3, [r7, #32]
   return(result);
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ced2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ced4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ced8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceda:	e841 2300 	strex	r3, r2, [r1]
 800cede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1e6      	bne.n	800ceb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3308      	adds	r3, #8
 800ceec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	e853 3f00 	ldrex	r3, [r3]
 800cef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f023 0301 	bic.w	r3, r3, #1
 800cefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3308      	adds	r3, #8
 800cf04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf06:	61fa      	str	r2, [r7, #28]
 800cf08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0a:	69b9      	ldr	r1, [r7, #24]
 800cf0c:	69fa      	ldr	r2, [r7, #28]
 800cf0e:	e841 2300 	strex	r3, r2, [r1]
 800cf12:	617b      	str	r3, [r7, #20]
   return(result);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1e5      	bne.n	800cee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e012      	b.n	800cf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3758      	adds	r7, #88	@ 0x58
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf6c:	e04f      	b.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf74:	d04b      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf76:	f7f6 f9a7 	bl	80032c8 <HAL_GetTick>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d302      	bcc.n	800cf8c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e04e      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0304 	and.w	r3, r3, #4
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d037      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b80      	cmp	r3, #128	@ 0x80
 800cfa2:	d034      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2b40      	cmp	r3, #64	@ 0x40
 800cfa8:	d031      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	69db      	ldr	r3, [r3, #28]
 800cfb0:	f003 0308 	and.w	r3, r3, #8
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d110      	bne.n	800cfda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f000 f99d 	bl	800d300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2208      	movs	r2, #8
 800cfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e029      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfe8:	d111      	bne.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f983 	bl	800d300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e00f      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	69da      	ldr	r2, [r3, #28]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	4013      	ands	r3, r2
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	bf0c      	ite	eq
 800d01e:	2301      	moveq	r3, #1
 800d020:	2300      	movne	r3, #0
 800d022:	b2db      	uxtb	r3, r3
 800d024:	461a      	mov	r2, r3
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d0a0      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d038:	b480      	push	{r7}
 800d03a:	b0a3      	sub	sp, #140	@ 0x8c
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	88fa      	ldrh	r2, [r7, #6]
 800d050:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	88fa      	ldrh	r2, [r7, #6]
 800d058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d06a:	d10e      	bne.n	800d08a <UART_Start_Receive_IT+0x52>
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d105      	bne.n	800d080 <UART_Start_Receive_IT+0x48>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d07a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d07e:	e02d      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	22ff      	movs	r2, #255	@ 0xff
 800d084:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d088:	e028      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10d      	bne.n	800d0ae <UART_Start_Receive_IT+0x76>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d104      	bne.n	800d0a4 <UART_Start_Receive_IT+0x6c>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	22ff      	movs	r2, #255	@ 0xff
 800d09e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0a2:	e01b      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	227f      	movs	r2, #127	@ 0x7f
 800d0a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0ac:	e016      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0b6:	d10d      	bne.n	800d0d4 <UART_Start_Receive_IT+0x9c>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d104      	bne.n	800d0ca <UART_Start_Receive_IT+0x92>
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	227f      	movs	r2, #127	@ 0x7f
 800d0c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0c8:	e008      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	223f      	movs	r2, #63	@ 0x3f
 800d0ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0d2:	e003      	b.n	800d0dc <UART_Start_Receive_IT+0xa4>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2222      	movs	r2, #34	@ 0x22
 800d0e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0f6:	e853 3f00 	ldrex	r3, [r3]
 800d0fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d0fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0fe:	f043 0301 	orr.w	r3, r3, #1
 800d102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3308      	adds	r3, #8
 800d10c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d110:	673a      	str	r2, [r7, #112]	@ 0x70
 800d112:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d114:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d116:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d118:	e841 2300 	strex	r3, r2, [r1]
 800d11c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d11e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e3      	bne.n	800d0ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d12c:	d14f      	bne.n	800d1ce <UART_Start_Receive_IT+0x196>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d134:	88fa      	ldrh	r2, [r7, #6]
 800d136:	429a      	cmp	r2, r3
 800d138:	d349      	bcc.n	800d1ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d142:	d107      	bne.n	800d154 <UART_Start_Receive_IT+0x11c>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4a47      	ldr	r2, [pc, #284]	@ (800d26c <UART_Start_Receive_IT+0x234>)
 800d150:	675a      	str	r2, [r3, #116]	@ 0x74
 800d152:	e002      	b.n	800d15a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4a46      	ldr	r2, [pc, #280]	@ (800d270 <UART_Start_Receive_IT+0x238>)
 800d158:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d01a      	beq.n	800d198 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16a:	e853 3f00 	ldrex	r3, [r3]
 800d16e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d176:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d186:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d188:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d18a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d18c:	e841 2300 	strex	r3, r2, [r1]
 800d190:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1e4      	bne.n	800d162 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3308      	adds	r3, #8
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a2:	e853 3f00 	ldrex	r3, [r3]
 800d1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d1b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d1ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1c0:	e841 2300 	strex	r3, r2, [r1]
 800d1c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e5      	bne.n	800d198 <UART_Start_Receive_IT+0x160>
 800d1cc:	e046      	b.n	800d25c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1d6:	d107      	bne.n	800d1e8 <UART_Start_Receive_IT+0x1b0>
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d103      	bne.n	800d1e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4a24      	ldr	r2, [pc, #144]	@ (800d274 <UART_Start_Receive_IT+0x23c>)
 800d1e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800d1e6:	e002      	b.n	800d1ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	4a23      	ldr	r2, [pc, #140]	@ (800d278 <UART_Start_Receive_IT+0x240>)
 800d1ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d019      	beq.n	800d22a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fe:	e853 3f00 	ldrex	r3, [r3]
 800d202:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d206:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d20a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	461a      	mov	r2, r3
 800d212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d214:	637b      	str	r3, [r7, #52]	@ 0x34
 800d216:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d218:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d21a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d21c:	e841 2300 	strex	r3, r2, [r1]
 800d220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1e6      	bne.n	800d1f6 <UART_Start_Receive_IT+0x1be>
 800d228:	e018      	b.n	800d25c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	e853 3f00 	ldrex	r3, [r3]
 800d236:	613b      	str	r3, [r7, #16]
   return(result);
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	f043 0320 	orr.w	r3, r3, #32
 800d23e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	461a      	mov	r2, r3
 800d246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d248:	623b      	str	r3, [r7, #32]
 800d24a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24c:	69f9      	ldr	r1, [r7, #28]
 800d24e:	6a3a      	ldr	r2, [r7, #32]
 800d250:	e841 2300 	strex	r3, r2, [r1]
 800d254:	61bb      	str	r3, [r7, #24]
   return(result);
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e6      	bne.n	800d22a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	378c      	adds	r7, #140	@ 0x8c
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	0800dc4d 	.word	0x0800dc4d
 800d270:	0800d8e9 	.word	0x0800d8e9
 800d274:	0800d731 	.word	0x0800d731
 800d278:	0800d579 	.word	0x0800d579

0800d27c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b08f      	sub	sp, #60	@ 0x3c
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	e853 3f00 	ldrex	r3, [r3]
 800d290:	61fb      	str	r3, [r7, #28]
   return(result);
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d298:	637b      	str	r3, [r7, #52]	@ 0x34
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2aa:	e841 2300 	strex	r3, r2, [r1]
 800d2ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1e6      	bne.n	800d284 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	e853 3f00 	ldrex	r3, [r3]
 800d2c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d2cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d6:	61ba      	str	r2, [r7, #24]
 800d2d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2da:	6979      	ldr	r1, [r7, #20]
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	e841 2300 	strex	r3, r2, [r1]
 800d2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1e5      	bne.n	800d2b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2220      	movs	r2, #32
 800d2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d2f2:	bf00      	nop
 800d2f4:	373c      	adds	r7, #60	@ 0x3c
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
	...

0800d300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d300:	b480      	push	{r7}
 800d302:	b095      	sub	sp, #84	@ 0x54
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d310:	e853 3f00 	ldrex	r3, [r3]
 800d314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d31c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	461a      	mov	r2, r3
 800d324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d326:	643b      	str	r3, [r7, #64]	@ 0x40
 800d328:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d32c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e6      	bne.n	800d308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	3308      	adds	r3, #8
 800d340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	e853 3f00 	ldrex	r3, [r3]
 800d348:	61fb      	str	r3, [r7, #28]
   return(result);
 800d34a:	69fa      	ldr	r2, [r7, #28]
 800d34c:	4b1e      	ldr	r3, [pc, #120]	@ (800d3c8 <UART_EndRxTransfer+0xc8>)
 800d34e:	4013      	ands	r3, r2
 800d350:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3308      	adds	r3, #8
 800d358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d35a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d35c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d362:	e841 2300 	strex	r3, r2, [r1]
 800d366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1e5      	bne.n	800d33a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d372:	2b01      	cmp	r3, #1
 800d374:	d118      	bne.n	800d3a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	60bb      	str	r3, [r7, #8]
   return(result);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f023 0310 	bic.w	r3, r3, #16
 800d38a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	461a      	mov	r2, r3
 800d392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d394:	61bb      	str	r3, [r7, #24]
 800d396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d398:	6979      	ldr	r1, [r7, #20]
 800d39a:	69ba      	ldr	r2, [r7, #24]
 800d39c:	e841 2300 	strex	r3, r2, [r1]
 800d3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e6      	bne.n	800d376 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2220      	movs	r2, #32
 800d3ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d3bc:	bf00      	nop
 800d3be:	3754      	adds	r7, #84	@ 0x54
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	effffffe 	.word	0xeffffffe

0800d3cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b090      	sub	sp, #64	@ 0x40
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3e2:	d037      	beq.n	800d454 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	e853 3f00 	ldrex	r3, [r3]
 800d3fa:	623b      	str	r3, [r7, #32]
   return(result);
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d402:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3308      	adds	r3, #8
 800d40a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d40c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d414:	e841 2300 	strex	r3, r2, [r1]
 800d418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e5      	bne.n	800d3ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	e853 3f00 	ldrex	r3, [r3]
 800d42c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d434:	637b      	str	r3, [r7, #52]	@ 0x34
 800d436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d43e:	61fb      	str	r3, [r7, #28]
 800d440:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	69b9      	ldr	r1, [r7, #24]
 800d444:	69fa      	ldr	r2, [r7, #28]
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	617b      	str	r3, [r7, #20]
   return(result);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e6      	bne.n	800d420 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d452:	e002      	b.n	800d45a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d454:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d456:	f7f4 fc6b 	bl	8001d30 <HAL_UART_TxCpltCallback>
}
 800d45a:	bf00      	nop
 800d45c:	3740      	adds	r7, #64	@ 0x40
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d46e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7fe fea9 	bl	800c1c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d492:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d49a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4a6:	2b80      	cmp	r3, #128	@ 0x80
 800d4a8:	d109      	bne.n	800d4be <UART_DMAError+0x40>
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2b21      	cmp	r3, #33	@ 0x21
 800d4ae:	d106      	bne.n	800d4be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d4b8:	6978      	ldr	r0, [r7, #20]
 800d4ba:	f7ff fedf 	bl	800d27c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4c8:	2b40      	cmp	r3, #64	@ 0x40
 800d4ca:	d109      	bne.n	800d4e0 <UART_DMAError+0x62>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b22      	cmp	r3, #34	@ 0x22
 800d4d0:	d106      	bne.n	800d4e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d4da:	6978      	ldr	r0, [r7, #20]
 800d4dc:	f7ff ff10 	bl	800d300 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4e6:	f043 0210 	orr.w	r2, r3, #16
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4f0:	6978      	ldr	r0, [r7, #20]
 800d4f2:	f7f4 fc67 	bl	8001dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4f6:	bf00      	nop
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d50a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f7f4 fc55 	bl	8001dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d51a:	bf00      	nop
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b088      	sub	sp, #32
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	e853 3f00 	ldrex	r3, [r3]
 800d536:	60bb      	str	r3, [r7, #8]
   return(result);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	6979      	ldr	r1, [r7, #20]
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	613b      	str	r3, [r7, #16]
   return(result);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e6      	bne.n	800d52a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2220      	movs	r2, #32
 800d560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7f4 fbe0 	bl	8001d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d570:	bf00      	nop
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b09c      	sub	sp, #112	@ 0x70
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d586:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d590:	2b22      	cmp	r3, #34	@ 0x22
 800d592:	f040 80be 	bne.w	800d712 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d5a4:	b2d9      	uxtb	r1, r3
 800d5a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5b0:	400a      	ands	r2, r1
 800d5b2:	b2d2      	uxtb	r2, r2
 800d5b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f040 80a1 	bne.w	800d722 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d600:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d606:	e841 2300 	strex	r3, r2, [r1]
 800d60a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1e6      	bne.n	800d5e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	3308      	adds	r3, #8
 800d618:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61c:	e853 3f00 	ldrex	r3, [r3]
 800d620:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d624:	f023 0301 	bic.w	r3, r3, #1
 800d628:	667b      	str	r3, [r7, #100]	@ 0x64
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3308      	adds	r3, #8
 800d630:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d632:	647a      	str	r2, [r7, #68]	@ 0x44
 800d634:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e5      	bne.n	800d612 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2220      	movs	r2, #32
 800d64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a33      	ldr	r2, [pc, #204]	@ (800d72c <UART_RxISR_8BIT+0x1b4>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d01f      	beq.n	800d6a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d018      	beq.n	800d6a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	623b      	str	r3, [r7, #32]
   return(result);
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d686:	663b      	str	r3, [r7, #96]	@ 0x60
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d690:	633b      	str	r3, [r7, #48]	@ 0x30
 800d692:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e6      	bne.n	800d672 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d12e      	bne.n	800d70a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	e853 3f00 	ldrex	r3, [r3]
 800d6be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f023 0310 	bic.w	r3, r3, #16
 800d6c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6d0:	61fb      	str	r3, [r7, #28]
 800d6d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	69b9      	ldr	r1, [r7, #24]
 800d6d6:	69fa      	ldr	r2, [r7, #28]
 800d6d8:	e841 2300 	strex	r3, r2, [r1]
 800d6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e6      	bne.n	800d6b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	f003 0310 	and.w	r3, r3, #16
 800d6ee:	2b10      	cmp	r3, #16
 800d6f0:	d103      	bne.n	800d6fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2210      	movs	r2, #16
 800d6f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7fe fd6a 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d708:	e00b      	b.n	800d722 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7f4 fb24 	bl	8001d58 <HAL_UART_RxCpltCallback>
}
 800d710:	e007      	b.n	800d722 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	699a      	ldr	r2, [r3, #24]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f042 0208 	orr.w	r2, r2, #8
 800d720:	619a      	str	r2, [r3, #24]
}
 800d722:	bf00      	nop
 800d724:	3770      	adds	r7, #112	@ 0x70
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	58000c00 	.word	0x58000c00

0800d730 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b09c      	sub	sp, #112	@ 0x70
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d73e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d748:	2b22      	cmp	r3, #34	@ 0x22
 800d74a:	f040 80be 	bne.w	800d8ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d754:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d75c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d75e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d766:	4013      	ands	r3, r2
 800d768:	b29a      	uxth	r2, r3
 800d76a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d76c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d772:	1c9a      	adds	r2, r3, #2
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d77e:	b29b      	uxth	r3, r3
 800d780:	3b01      	subs	r3, #1
 800d782:	b29a      	uxth	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d790:	b29b      	uxth	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	f040 80a1 	bne.w	800d8da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7a0:	e853 3f00 	ldrex	r3, [r3]
 800d7a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d7a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d7be:	e841 2300 	strex	r3, r2, [r1]
 800d7c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1e6      	bne.n	800d798 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d4:	e853 3f00 	ldrex	r3, [r3]
 800d7d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d7ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800d7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7f2:	e841 2300 	strex	r3, r2, [r1]
 800d7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1e5      	bne.n	800d7ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2220      	movs	r2, #32
 800d802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a33      	ldr	r2, [pc, #204]	@ (800d8e4 <UART_RxISR_16BIT+0x1b4>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d01f      	beq.n	800d85c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d826:	2b00      	cmp	r3, #0
 800d828:	d018      	beq.n	800d85c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	e853 3f00 	ldrex	r3, [r3]
 800d836:	61fb      	str	r3, [r7, #28]
   return(result);
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d83e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d84a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d850:	e841 2300 	strex	r3, r2, [r1]
 800d854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e6      	bne.n	800d82a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d860:	2b01      	cmp	r3, #1
 800d862:	d12e      	bne.n	800d8c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	e853 3f00 	ldrex	r3, [r3]
 800d876:	60bb      	str	r3, [r7, #8]
   return(result);
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f023 0310 	bic.w	r3, r3, #16
 800d87e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	461a      	mov	r2, r3
 800d886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d888:	61bb      	str	r3, [r7, #24]
 800d88a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88c:	6979      	ldr	r1, [r7, #20]
 800d88e:	69ba      	ldr	r2, [r7, #24]
 800d890:	e841 2300 	strex	r3, r2, [r1]
 800d894:	613b      	str	r3, [r7, #16]
   return(result);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1e6      	bne.n	800d86a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	f003 0310 	and.w	r3, r3, #16
 800d8a6:	2b10      	cmp	r3, #16
 800d8a8:	d103      	bne.n	800d8b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2210      	movs	r2, #16
 800d8b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7fe fc8e 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8c0:	e00b      	b.n	800d8da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7f4 fa48 	bl	8001d58 <HAL_UART_RxCpltCallback>
}
 800d8c8:	e007      	b.n	800d8da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	699a      	ldr	r2, [r3, #24]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f042 0208 	orr.w	r2, r2, #8
 800d8d8:	619a      	str	r2, [r3, #24]
}
 800d8da:	bf00      	nop
 800d8dc:	3770      	adds	r7, #112	@ 0x70
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	58000c00 	.word	0x58000c00

0800d8e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b0ac      	sub	sp, #176	@ 0xb0
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d8f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d91e:	2b22      	cmp	r3, #34	@ 0x22
 800d920:	f040 8181 	bne.w	800dc26 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d92a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d92e:	e124      	b.n	800db7a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d936:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d93a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d93e:	b2d9      	uxtb	r1, r3
 800d940:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d944:	b2da      	uxtb	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d94a:	400a      	ands	r2, r1
 800d94c:	b2d2      	uxtb	r2, r2
 800d94e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d954:	1c5a      	adds	r2, r3, #1
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d960:	b29b      	uxth	r3, r3
 800d962:	3b01      	subs	r3, #1
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d053      	beq.n	800da2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d011      	beq.n	800d9b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d98e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00b      	beq.n	800d9b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9a8:	f043 0201 	orr.w	r2, r3, #1
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d011      	beq.n	800d9e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d9be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d8:	f043 0204 	orr.w	r2, r3, #4
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d011      	beq.n	800da12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d9ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00b      	beq.n	800da12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2204      	movs	r2, #4
 800da00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da08:	f043 0202 	orr.w	r2, r3, #2
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d006      	beq.n	800da2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7f4 f9d1 	bl	8001dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da30:	b29b      	uxth	r3, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 80a1 	bne.w	800db7a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da40:	e853 3f00 	ldrex	r3, [r3]
 800da44:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800da46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	461a      	mov	r2, r3
 800da56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da5c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800da60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800da62:	e841 2300 	strex	r3, r2, [r1]
 800da66:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800da68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e4      	bne.n	800da38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	3308      	adds	r3, #8
 800da74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da78:	e853 3f00 	ldrex	r3, [r3]
 800da7c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800da7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da80:	4b6f      	ldr	r3, [pc, #444]	@ (800dc40 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800da82:	4013      	ands	r3, r2
 800da84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3308      	adds	r3, #8
 800da8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da92:	66ba      	str	r2, [r7, #104]	@ 0x68
 800da94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da96:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800da98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800da9a:	e841 2300 	strex	r3, r2, [r1]
 800da9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800daa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1e3      	bne.n	800da6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2220      	movs	r2, #32
 800daaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a61      	ldr	r2, [pc, #388]	@ (800dc44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d021      	beq.n	800db08 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01a      	beq.n	800db08 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dada:	e853 3f00 	ldrex	r3, [r3]
 800dade:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800daf4:	657b      	str	r3, [r7, #84]	@ 0x54
 800daf6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dafa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dafc:	e841 2300 	strex	r3, r2, [r1]
 800db00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1e4      	bne.n	800dad2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d130      	bne.n	800db72 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1e:	e853 3f00 	ldrex	r3, [r3]
 800db22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db26:	f023 0310 	bic.w	r3, r3, #16
 800db2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db38:	643b      	str	r3, [r7, #64]	@ 0x40
 800db3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e4      	bne.n	800db16 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	f003 0310 	and.w	r3, r3, #16
 800db56:	2b10      	cmp	r3, #16
 800db58:	d103      	bne.n	800db62 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2210      	movs	r2, #16
 800db60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7fe fb36 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800db70:	e00e      	b.n	800db90 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f4 f8f0 	bl	8001d58 <HAL_UART_RxCpltCallback>
        break;
 800db78:	e00a      	b.n	800db90 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db7a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d006      	beq.n	800db90 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800db82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f47f aed0 	bne.w	800d930 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db96:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800db9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d049      	beq.n	800dc36 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dba8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d242      	bcs.n	800dc36 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	e853 3f00 	ldrex	r3, [r3]
 800dbbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dbd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e3      	bne.n	800dbb0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a17      	ldr	r2, [pc, #92]	@ (800dc48 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800dbec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	e853 3f00 	ldrex	r3, [r3]
 800dbfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f043 0320 	orr.w	r3, r3, #32
 800dc02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc10:	61bb      	str	r3, [r7, #24]
 800dc12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	6979      	ldr	r1, [r7, #20]
 800dc16:	69ba      	ldr	r2, [r7, #24]
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e4      	bne.n	800dbee <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc24:	e007      	b.n	800dc36 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	699a      	ldr	r2, [r3, #24]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f042 0208 	orr.w	r2, r2, #8
 800dc34:	619a      	str	r2, [r3, #24]
}
 800dc36:	bf00      	nop
 800dc38:	37b0      	adds	r7, #176	@ 0xb0
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	effffffe 	.word	0xeffffffe
 800dc44:	58000c00 	.word	0x58000c00
 800dc48:	0800d579 	.word	0x0800d579

0800dc4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b0ae      	sub	sp, #184	@ 0xb8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc5a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69db      	ldr	r3, [r3, #28]
 800dc64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc82:	2b22      	cmp	r3, #34	@ 0x22
 800dc84:	f040 8185 	bne.w	800df92 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc8e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc92:	e128      	b.n	800dee6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc9a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dca6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800dcaa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dcae:	4013      	ands	r3, r2
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcbc:	1c9a      	adds	r2, r3, #2
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	3b01      	subs	r3, #1
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dcde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dce2:	f003 0307 	and.w	r3, r3, #7
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d053      	beq.n	800dd92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dcea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d011      	beq.n	800dd1a <UART_RxISR_16BIT_FIFOEN+0xce>
 800dcf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00b      	beq.n	800dd1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2201      	movs	r2, #1
 800dd08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd10:	f043 0201 	orr.w	r2, r3, #1
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd1e:	f003 0302 	and.w	r3, r3, #2
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d011      	beq.n	800dd4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd2a:	f003 0301 	and.w	r3, r3, #1
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00b      	beq.n	800dd4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2202      	movs	r2, #2
 800dd38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd40:	f043 0204 	orr.w	r2, r3, #4
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd4e:	f003 0304 	and.w	r3, r3, #4
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d011      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dd56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd5a:	f003 0301 	and.w	r3, r3, #1
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2204      	movs	r2, #4
 800dd68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd70:	f043 0202 	orr.w	r2, r3, #2
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d006      	beq.n	800dd92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7f4 f81d 	bl	8001dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f040 80a3 	bne.w	800dee6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ddae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ddc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ddca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ddce:	e841 2300 	strex	r3, r2, [r1]
 800ddd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ddd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e2      	bne.n	800dda0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3308      	adds	r3, #8
 800dde0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dde4:	e853 3f00 	ldrex	r3, [r3]
 800dde8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ddea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ddec:	4b6f      	ldr	r3, [pc, #444]	@ (800dfac <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ddee:	4013      	ands	r3, r2
 800ddf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ddfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800de06:	e841 2300 	strex	r3, r2, [r1]
 800de0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800de0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1e3      	bne.n	800ddda <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2220      	movs	r2, #32
 800de16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a61      	ldr	r2, [pc, #388]	@ (800dfb0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d021      	beq.n	800de74 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d01a      	beq.n	800de74 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de46:	e853 3f00 	ldrex	r3, [r3]
 800de4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800de60:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de68:	e841 2300 	strex	r3, r2, [r1]
 800de6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1e4      	bne.n	800de3e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d130      	bne.n	800dede <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	e853 3f00 	ldrex	r3, [r3]
 800de8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de92:	f023 0310 	bic.w	r3, r3, #16
 800de96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	461a      	mov	r2, r3
 800dea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800deaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800deac:	e841 2300 	strex	r3, r2, [r1]
 800deb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800deb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e4      	bne.n	800de82 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	69db      	ldr	r3, [r3, #28]
 800debe:	f003 0310 	and.w	r3, r3, #16
 800dec2:	2b10      	cmp	r3, #16
 800dec4:	d103      	bne.n	800dece <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2210      	movs	r2, #16
 800decc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7fe f980 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800dedc:	e00e      	b.n	800defc <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7f3 ff3a 	bl	8001d58 <HAL_UART_RxCpltCallback>
        break;
 800dee4:	e00a      	b.n	800defc <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dee6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800deee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800def2:	f003 0320 	and.w	r3, r3, #32
 800def6:	2b00      	cmp	r3, #0
 800def8:	f47f aecc 	bne.w	800dc94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d049      	beq.n	800dfa2 <UART_RxISR_16BIT_FIFOEN+0x356>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df14:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800df18:	429a      	cmp	r2, r3
 800df1a:	d242      	bcs.n	800dfa2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3308      	adds	r3, #8
 800df22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	623b      	str	r3, [r7, #32]
   return(result);
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3308      	adds	r3, #8
 800df3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800df40:	633a      	str	r2, [r7, #48]	@ 0x30
 800df42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e3      	bne.n	800df1c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a17      	ldr	r2, [pc, #92]	@ (800dfb4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800df58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	e853 3f00 	ldrex	r3, [r3]
 800df66:	60fb      	str	r3, [r7, #12]
   return(result);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f043 0320 	orr.w	r3, r3, #32
 800df6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df7c:	61fb      	str	r3, [r7, #28]
 800df7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df80:	69b9      	ldr	r1, [r7, #24]
 800df82:	69fa      	ldr	r2, [r7, #28]
 800df84:	e841 2300 	strex	r3, r2, [r1]
 800df88:	617b      	str	r3, [r7, #20]
   return(result);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e4      	bne.n	800df5a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df90:	e007      	b.n	800dfa2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	699a      	ldr	r2, [r3, #24]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f042 0208 	orr.w	r2, r2, #8
 800dfa0:	619a      	str	r2, [r3, #24]
}
 800dfa2:	bf00      	nop
 800dfa4:	37b8      	adds	r7, #184	@ 0xb8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	effffffe 	.word	0xeffffffe
 800dfb0:	58000c00 	.word	0x58000c00
 800dfb4:	0800d731 	.word	0x0800d731

0800dfb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e002:	2b01      	cmp	r3, #1
 800e004:	d101      	bne.n	800e00a <HAL_UARTEx_DisableFifoMode+0x16>
 800e006:	2302      	movs	r3, #2
 800e008:	e027      	b.n	800e05a <HAL_UARTEx_DisableFifoMode+0x66>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2224      	movs	r2, #36	@ 0x24
 800e016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f022 0201 	bic.w	r2, r2, #1
 800e030:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3714      	adds	r7, #20
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e076:	2b01      	cmp	r3, #1
 800e078:	d101      	bne.n	800e07e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e07a:	2302      	movs	r3, #2
 800e07c:	e02d      	b.n	800e0da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2224      	movs	r2, #36	@ 0x24
 800e08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f022 0201 	bic.w	r2, r2, #1
 800e0a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f850 	bl	800e160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b084      	sub	sp, #16
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d101      	bne.n	800e0fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e02d      	b.n	800e156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2224      	movs	r2, #36	@ 0x24
 800e106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f022 0201 	bic.w	r2, r2, #1
 800e120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f812 	bl	800e160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2220      	movs	r2, #32
 800e148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d108      	bne.n	800e182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e180:	e031      	b.n	800e1e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e182:	2310      	movs	r3, #16
 800e184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e186:	2310      	movs	r3, #16
 800e188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	0e5b      	lsrs	r3, r3, #25
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0307 	and.w	r3, r3, #7
 800e198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	0f5b      	lsrs	r3, r3, #29
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	f003 0307 	and.w	r3, r3, #7
 800e1a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	7b3a      	ldrb	r2, [r7, #12]
 800e1ae:	4911      	ldr	r1, [pc, #68]	@ (800e1f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e1b0:	5c8a      	ldrb	r2, [r1, r2]
 800e1b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1b6:	7b3a      	ldrb	r2, [r7, #12]
 800e1b8:	490f      	ldr	r1, [pc, #60]	@ (800e1f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e1ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	7b7a      	ldrb	r2, [r7, #13]
 800e1cc:	4909      	ldr	r1, [pc, #36]	@ (800e1f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ce:	5c8a      	ldrb	r2, [r1, r2]
 800e1d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1d4:	7b7a      	ldrb	r2, [r7, #13]
 800e1d6:	4908      	ldr	r1, [pc, #32]	@ (800e1f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e1d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1da:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e1e6:	bf00      	nop
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	08018c84 	.word	0x08018c84
 800e1f8:	08018c8c 	.word	0x08018c8c

0800e1fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b084      	sub	sp, #16
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	f107 001c 	add.w	r0, r7, #28
 800e20a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e20e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e212:	2b01      	cmp	r3, #1
 800e214:	d121      	bne.n	800e25a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e21a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68da      	ldr	r2, [r3, #12]
 800e226:	4b2c      	ldr	r3, [pc, #176]	@ (800e2d8 <USB_CoreInit+0xdc>)
 800e228:	4013      	ands	r3, r2
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e23a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d105      	bne.n	800e24e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f001 fafa 	bl	800f848 <USB_CoreReset>
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]
 800e258:	e01b      	b.n	800e292 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f001 faee 	bl	800f848 <USB_CoreReset>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e270:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e274:	2b00      	cmp	r3, #0
 800e276:	d106      	bne.n	800e286 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e27c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	639a      	str	r2, [r3, #56]	@ 0x38
 800e284:	e005      	b.n	800e292 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e28a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e292:	7fbb      	ldrb	r3, [r7, #30]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d116      	bne.n	800e2c6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2dc <USB_CoreInit+0xe0>)
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f043 0206 	orr.w	r2, r3, #6
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	f043 0220 	orr.w	r2, r3, #32
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2d2:	b004      	add	sp, #16
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	ffbdffbf 	.word	0xffbdffbf
 800e2dc:	03ee0000 	.word	0x03ee0000

0800e2e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b087      	sub	sp, #28
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d165      	bne.n	800e3c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4a41      	ldr	r2, [pc, #260]	@ (800e3fc <USB_SetTurnaroundTime+0x11c>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d906      	bls.n	800e30a <USB_SetTurnaroundTime+0x2a>
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	4a40      	ldr	r2, [pc, #256]	@ (800e400 <USB_SetTurnaroundTime+0x120>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d202      	bcs.n	800e30a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e304:	230f      	movs	r3, #15
 800e306:	617b      	str	r3, [r7, #20]
 800e308:	e062      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	4a3c      	ldr	r2, [pc, #240]	@ (800e400 <USB_SetTurnaroundTime+0x120>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d306      	bcc.n	800e320 <USB_SetTurnaroundTime+0x40>
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	4a3b      	ldr	r2, [pc, #236]	@ (800e404 <USB_SetTurnaroundTime+0x124>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d202      	bcs.n	800e320 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e31a:	230e      	movs	r3, #14
 800e31c:	617b      	str	r3, [r7, #20]
 800e31e:	e057      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	4a38      	ldr	r2, [pc, #224]	@ (800e404 <USB_SetTurnaroundTime+0x124>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d306      	bcc.n	800e336 <USB_SetTurnaroundTime+0x56>
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	4a37      	ldr	r2, [pc, #220]	@ (800e408 <USB_SetTurnaroundTime+0x128>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d202      	bcs.n	800e336 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e330:	230d      	movs	r3, #13
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	e04c      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4a33      	ldr	r2, [pc, #204]	@ (800e408 <USB_SetTurnaroundTime+0x128>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d306      	bcc.n	800e34c <USB_SetTurnaroundTime+0x6c>
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	4a32      	ldr	r2, [pc, #200]	@ (800e40c <USB_SetTurnaroundTime+0x12c>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d802      	bhi.n	800e34c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e346:	230c      	movs	r3, #12
 800e348:	617b      	str	r3, [r7, #20]
 800e34a:	e041      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	4a2f      	ldr	r2, [pc, #188]	@ (800e40c <USB_SetTurnaroundTime+0x12c>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d906      	bls.n	800e362 <USB_SetTurnaroundTime+0x82>
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	4a2e      	ldr	r2, [pc, #184]	@ (800e410 <USB_SetTurnaroundTime+0x130>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d802      	bhi.n	800e362 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e35c:	230b      	movs	r3, #11
 800e35e:	617b      	str	r3, [r7, #20]
 800e360:	e036      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	4a2a      	ldr	r2, [pc, #168]	@ (800e410 <USB_SetTurnaroundTime+0x130>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d906      	bls.n	800e378 <USB_SetTurnaroundTime+0x98>
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	4a29      	ldr	r2, [pc, #164]	@ (800e414 <USB_SetTurnaroundTime+0x134>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d802      	bhi.n	800e378 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e372:	230a      	movs	r3, #10
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	e02b      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	4a26      	ldr	r2, [pc, #152]	@ (800e414 <USB_SetTurnaroundTime+0x134>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d906      	bls.n	800e38e <USB_SetTurnaroundTime+0xae>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	4a25      	ldr	r2, [pc, #148]	@ (800e418 <USB_SetTurnaroundTime+0x138>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d202      	bcs.n	800e38e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e388:	2309      	movs	r3, #9
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	e020      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	4a21      	ldr	r2, [pc, #132]	@ (800e418 <USB_SetTurnaroundTime+0x138>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d306      	bcc.n	800e3a4 <USB_SetTurnaroundTime+0xc4>
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	4a20      	ldr	r2, [pc, #128]	@ (800e41c <USB_SetTurnaroundTime+0x13c>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d802      	bhi.n	800e3a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e39e:	2308      	movs	r3, #8
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	e015      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	4a1d      	ldr	r2, [pc, #116]	@ (800e41c <USB_SetTurnaroundTime+0x13c>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d906      	bls.n	800e3ba <USB_SetTurnaroundTime+0xda>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	4a1c      	ldr	r2, [pc, #112]	@ (800e420 <USB_SetTurnaroundTime+0x140>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d202      	bcs.n	800e3ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e3b4:	2307      	movs	r3, #7
 800e3b6:	617b      	str	r3, [r7, #20]
 800e3b8:	e00a      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e3ba:	2306      	movs	r3, #6
 800e3bc:	617b      	str	r3, [r7, #20]
 800e3be:	e007      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e3c0:	79fb      	ldrb	r3, [r7, #7]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e3c6:	2309      	movs	r3, #9
 800e3c8:	617b      	str	r3, [r7, #20]
 800e3ca:	e001      	b.n	800e3d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e3cc:	2309      	movs	r3, #9
 800e3ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	68da      	ldr	r2, [r3, #12]
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	029b      	lsls	r3, r3, #10
 800e3e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e3e8:	431a      	orrs	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	00d8acbf 	.word	0x00d8acbf
 800e400:	00e4e1c0 	.word	0x00e4e1c0
 800e404:	00f42400 	.word	0x00f42400
 800e408:	01067380 	.word	0x01067380
 800e40c:	011a499f 	.word	0x011a499f
 800e410:	01312cff 	.word	0x01312cff
 800e414:	014ca43f 	.word	0x014ca43f
 800e418:	016e3600 	.word	0x016e3600
 800e41c:	01a6ab1f 	.word	0x01a6ab1f
 800e420:	01e84800 	.word	0x01e84800

0800e424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f043 0201 	orr.w	r2, r3, #1
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	f023 0201 	bic.w	r2, r3, #1
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e474:	2300      	movs	r3, #0
 800e476:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	2b01      	cmp	r3, #1
 800e488:	d115      	bne.n	800e4b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e496:	200a      	movs	r0, #10
 800e498:	f7f4 ff22 	bl	80032e0 <HAL_Delay>
      ms += 10U;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	330a      	adds	r3, #10
 800e4a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f001 f93f 	bl	800f726 <USB_GetMode>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d01e      	beq.n	800e4ec <USB_SetCurrentMode+0x84>
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2bc7      	cmp	r3, #199	@ 0xc7
 800e4b2:	d9f0      	bls.n	800e496 <USB_SetCurrentMode+0x2e>
 800e4b4:	e01a      	b.n	800e4ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d115      	bne.n	800e4e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e4c8:	200a      	movs	r0, #10
 800e4ca:	f7f4 ff09 	bl	80032e0 <HAL_Delay>
      ms += 10U;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	330a      	adds	r3, #10
 800e4d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f001 f926 	bl	800f726 <USB_GetMode>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <USB_SetCurrentMode+0x84>
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2bc7      	cmp	r3, #199	@ 0xc7
 800e4e4:	d9f0      	bls.n	800e4c8 <USB_SetCurrentMode+0x60>
 800e4e6:	e001      	b.n	800e4ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e005      	b.n	800e4f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2bc8      	cmp	r3, #200	@ 0xc8
 800e4f0:	d101      	bne.n	800e4f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e000      	b.n	800e4f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e500:	b084      	sub	sp, #16
 800e502:	b580      	push	{r7, lr}
 800e504:	b086      	sub	sp, #24
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e50e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e512:	2300      	movs	r3, #0
 800e514:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e51a:	2300      	movs	r3, #0
 800e51c:	613b      	str	r3, [r7, #16]
 800e51e:	e009      	b.n	800e534 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	3340      	adds	r3, #64	@ 0x40
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	2200      	movs	r2, #0
 800e52c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	3301      	adds	r3, #1
 800e532:	613b      	str	r3, [r7, #16]
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	2b0e      	cmp	r3, #14
 800e538:	d9f2      	bls.n	800e520 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e53a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d11c      	bne.n	800e57c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e550:	f043 0302 	orr.w	r3, r3, #2
 800e554:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e55a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	e005      	b.n	800e588 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e580:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e58e:	461a      	mov	r2, r3
 800e590:	2300      	movs	r3, #0
 800e592:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e594:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d10d      	bne.n	800e5b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d104      	bne.n	800e5ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f968 	bl	800e87c <USB_SetDevSpeed>
 800e5ac:	e008      	b.n	800e5c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f963 	bl	800e87c <USB_SetDevSpeed>
 800e5b6:	e003      	b.n	800e5c0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e5b8:	2103      	movs	r1, #3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f95e 	bl	800e87c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e5c0:	2110      	movs	r1, #16
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f8fa 	bl	800e7bc <USB_FlushTxFifo>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f924 	bl	800e820 <USB_FlushRxFifo>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e600:	461a      	mov	r2, r3
 800e602:	2300      	movs	r3, #0
 800e604:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e606:	2300      	movs	r3, #0
 800e608:	613b      	str	r3, [r7, #16]
 800e60a:	e043      	b.n	800e694 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e61e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e622:	d118      	bne.n	800e656 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10a      	bne.n	800e640 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	015a      	lsls	r2, r3, #5
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	4413      	add	r3, r2
 800e632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e636:	461a      	mov	r2, r3
 800e638:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e63c:	6013      	str	r3, [r2, #0]
 800e63e:	e013      	b.n	800e668 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e64c:	461a      	mov	r2, r3
 800e64e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e652:	6013      	str	r3, [r2, #0]
 800e654:	e008      	b.n	800e668 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	015a      	lsls	r2, r3, #5
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	4413      	add	r3, r2
 800e65e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e662:	461a      	mov	r2, r3
 800e664:	2300      	movs	r3, #0
 800e666:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	015a      	lsls	r2, r3, #5
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e674:	461a      	mov	r2, r3
 800e676:	2300      	movs	r3, #0
 800e678:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e686:	461a      	mov	r2, r3
 800e688:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e68c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	3301      	adds	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
 800e694:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e698:	461a      	mov	r2, r3
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d3b5      	bcc.n	800e60c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	613b      	str	r3, [r7, #16]
 800e6a4:	e043      	b.n	800e72e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6bc:	d118      	bne.n	800e6f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10a      	bne.n	800e6da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	e013      	b.n	800e702 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	015a      	lsls	r2, r3, #5
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e6ec:	6013      	str	r3, [r2, #0]
 800e6ee:	e008      	b.n	800e702 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	2300      	movs	r3, #0
 800e700:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	015a      	lsls	r2, r3, #5
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	4413      	add	r3, r2
 800e70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70e:	461a      	mov	r2, r3
 800e710:	2300      	movs	r3, #0
 800e712:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	015a      	lsls	r2, r3, #5
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4413      	add	r3, r2
 800e71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e720:	461a      	mov	r2, r3
 800e722:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	3301      	adds	r3, #1
 800e72c:	613b      	str	r3, [r7, #16]
 800e72e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e732:	461a      	mov	r2, r3
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	4293      	cmp	r3, r2
 800e738:	d3b5      	bcc.n	800e6a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e74c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e75a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e75c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e760:	2b00      	cmp	r3, #0
 800e762:	d105      	bne.n	800e770 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	f043 0210 	orr.w	r2, r3, #16
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	699a      	ldr	r2, [r3, #24]
 800e774:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b4 <USB_DevInit+0x2b4>)
 800e776:	4313      	orrs	r3, r2
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e77c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e780:	2b00      	cmp	r3, #0
 800e782:	d005      	beq.n	800e790 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	699b      	ldr	r3, [r3, #24]
 800e788:	f043 0208 	orr.w	r2, r3, #8
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e790:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e794:	2b01      	cmp	r3, #1
 800e796:	d105      	bne.n	800e7a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	699a      	ldr	r2, [r3, #24]
 800e79c:	4b06      	ldr	r3, [pc, #24]	@ (800e7b8 <USB_DevInit+0x2b8>)
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3718      	adds	r7, #24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7b0:	b004      	add	sp, #16
 800e7b2:	4770      	bx	lr
 800e7b4:	803c3800 	.word	0x803c3800
 800e7b8:	40000004 	.word	0x40000004

0800e7bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e7d6:	d901      	bls.n	800e7dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e7d8:	2303      	movs	r3, #3
 800e7da:	e01b      	b.n	800e814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	daf2      	bge.n	800e7ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	019b      	lsls	r3, r3, #6
 800e7ec:	f043 0220 	orr.w	r2, r3, #32
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e800:	d901      	bls.n	800e806 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e006      	b.n	800e814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	f003 0320 	and.w	r3, r3, #32
 800e80e:	2b20      	cmp	r3, #32
 800e810:	d0f0      	beq.n	800e7f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e828:	2300      	movs	r3, #0
 800e82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3301      	adds	r3, #1
 800e830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e838:	d901      	bls.n	800e83e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e018      	b.n	800e870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	daf2      	bge.n	800e82c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e846:	2300      	movs	r3, #0
 800e848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2210      	movs	r2, #16
 800e84e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	3301      	adds	r3, #1
 800e854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e85c:	d901      	bls.n	800e862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e85e:	2303      	movs	r3, #3
 800e860:	e006      	b.n	800e870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	f003 0310 	and.w	r3, r3, #16
 800e86a:	2b10      	cmp	r3, #16
 800e86c:	d0f0      	beq.n	800e850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3714      	adds	r7, #20
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	460b      	mov	r3, r1
 800e886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	68f9      	ldr	r1, [r7, #12]
 800e898:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e89c:	4313      	orrs	r3, r2
 800e89e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b087      	sub	sp, #28
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	f003 0306 	and.w	r3, r3, #6
 800e8c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d102      	bne.n	800e8d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	75fb      	strb	r3, [r7, #23]
 800e8d2:	e00a      	b.n	800e8ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d002      	beq.n	800e8e0 <USB_GetDevSpeed+0x32>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b06      	cmp	r3, #6
 800e8de:	d102      	bne.n	800e8e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	75fb      	strb	r3, [r7, #23]
 800e8e4:	e001      	b.n	800e8ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e8e6:	230f      	movs	r3, #15
 800e8e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	371c      	adds	r7, #28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	785b      	ldrb	r3, [r3, #1]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d139      	bne.n	800e988 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e91a:	69da      	ldr	r2, [r3, #28]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f003 030f 	and.w	r3, r3, #15
 800e924:	2101      	movs	r1, #1
 800e926:	fa01 f303 	lsl.w	r3, r1, r3
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	68f9      	ldr	r1, [r7, #12]
 800e92e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e932:	4313      	orrs	r3, r2
 800e934:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	015a      	lsls	r2, r3, #5
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d153      	bne.n	800e9f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	015a      	lsls	r2, r3, #5
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	791b      	ldrb	r3, [r3, #4]
 800e966:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e968:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	059b      	lsls	r3, r3, #22
 800e96e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e970:	431a      	orrs	r2, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	0159      	lsls	r1, r3, #5
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	440b      	add	r3, r1
 800e97a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e97e:	4619      	mov	r1, r3
 800e980:	4b20      	ldr	r3, [pc, #128]	@ (800ea04 <USB_ActivateEndpoint+0x10c>)
 800e982:	4313      	orrs	r3, r2
 800e984:	600b      	str	r3, [r1, #0]
 800e986:	e035      	b.n	800e9f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e98e:	69da      	ldr	r2, [r3, #28]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	f003 030f 	and.w	r3, r3, #15
 800e998:	2101      	movs	r1, #1
 800e99a:	fa01 f303 	lsl.w	r3, r1, r3
 800e99e:	041b      	lsls	r3, r3, #16
 800e9a0:	68f9      	ldr	r1, [r7, #12]
 800e9a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	015a      	lsls	r2, r3, #5
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d119      	bne.n	800e9f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	015a      	lsls	r2, r3, #5
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	791b      	ldrb	r3, [r3, #4]
 800e9da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	0159      	lsls	r1, r3, #5
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	440b      	add	r3, r1
 800e9e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ea04 <USB_ActivateEndpoint+0x10c>)
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	10008000 	.word	0x10008000

0800ea08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	785b      	ldrb	r3, [r3, #1]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d161      	bne.n	800eae8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	015a      	lsls	r2, r3, #5
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea3a:	d11f      	bne.n	800ea7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	0151      	lsls	r1, r2, #5
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	440a      	add	r2, r1
 800ea52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ea5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	015a      	lsls	r2, r3, #5
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4413      	add	r3, r2
 800ea64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	0151      	lsls	r1, r2, #5
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	440a      	add	r2, r1
 800ea72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 030f 	and.w	r3, r3, #15
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	43db      	mvns	r3, r3
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaa6:	69da      	ldr	r2, [r3, #28]
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	f003 030f 	and.w	r3, r3, #15
 800eab0:	2101      	movs	r1, #1
 800eab2:	fa01 f303 	lsl.w	r3, r1, r3
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	43db      	mvns	r3, r3
 800eaba:	68f9      	ldr	r1, [r7, #12]
 800eabc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eac0:	4013      	ands	r3, r2
 800eac2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	015a      	lsls	r2, r3, #5
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	4413      	add	r3, r2
 800eacc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	0159      	lsls	r1, r3, #5
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	440b      	add	r3, r1
 800eada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eade:	4619      	mov	r1, r3
 800eae0:	4b35      	ldr	r3, [pc, #212]	@ (800ebb8 <USB_DeactivateEndpoint+0x1b0>)
 800eae2:	4013      	ands	r3, r2
 800eae4:	600b      	str	r3, [r1, #0]
 800eae6:	e060      	b.n	800ebaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eafa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eafe:	d11f      	bne.n	800eb40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	0151      	lsls	r1, r2, #5
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	440a      	add	r2, r1
 800eb16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eb1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	015a      	lsls	r2, r3, #5
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4413      	add	r3, r2
 800eb28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	0151      	lsls	r1, r2, #5
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	440a      	add	r2, r1
 800eb36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	f003 030f 	and.w	r3, r3, #15
 800eb50:	2101      	movs	r1, #1
 800eb52:	fa01 f303 	lsl.w	r3, r1, r3
 800eb56:	041b      	lsls	r3, r3, #16
 800eb58:	43db      	mvns	r3, r3
 800eb5a:	68f9      	ldr	r1, [r7, #12]
 800eb5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb60:	4013      	ands	r3, r2
 800eb62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb6a:	69da      	ldr	r2, [r3, #28]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	f003 030f 	and.w	r3, r3, #15
 800eb74:	2101      	movs	r1, #1
 800eb76:	fa01 f303 	lsl.w	r3, r1, r3
 800eb7a:	041b      	lsls	r3, r3, #16
 800eb7c:	43db      	mvns	r3, r3
 800eb7e:	68f9      	ldr	r1, [r7, #12]
 800eb80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb84:	4013      	ands	r3, r2
 800eb86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	015a      	lsls	r2, r3, #5
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4413      	add	r3, r2
 800eb90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	0159      	lsls	r1, r3, #5
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	440b      	add	r3, r1
 800eb9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba2:	4619      	mov	r1, r3
 800eba4:	4b05      	ldr	r3, [pc, #20]	@ (800ebbc <USB_DeactivateEndpoint+0x1b4>)
 800eba6:	4013      	ands	r3, r2
 800eba8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	ec337800 	.word	0xec337800
 800ebbc:	eff37800 	.word	0xeff37800

0800ebc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b08a      	sub	sp, #40	@ 0x28
 800ebc4:	af02      	add	r7, sp, #8
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	4613      	mov	r3, r2
 800ebcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	785b      	ldrb	r3, [r3, #1]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	f040 8185 	bne.w	800eeec <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d132      	bne.n	800ec50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	015a      	lsls	r2, r3, #5
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebf6:	691a      	ldr	r2, [r3, #16]
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	0159      	lsls	r1, r3, #5
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	440b      	add	r3, r1
 800ec00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec04:	4619      	mov	r1, r3
 800ec06:	4ba7      	ldr	r3, [pc, #668]	@ (800eea4 <USB_EPStartXfer+0x2e4>)
 800ec08:	4013      	ands	r3, r2
 800ec0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	0151      	lsls	r1, r2, #5
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	440a      	add	r2, r1
 800ec22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	015a      	lsls	r2, r3, #5
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	4413      	add	r3, r2
 800ec34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec38:	691a      	ldr	r2, [r3, #16]
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	0159      	lsls	r1, r3, #5
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	440b      	add	r3, r1
 800ec42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec46:	4619      	mov	r1, r3
 800ec48:	4b97      	ldr	r3, [pc, #604]	@ (800eea8 <USB_EPStartXfer+0x2e8>)
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	610b      	str	r3, [r1, #16]
 800ec4e:	e097      	b.n	800ed80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	015a      	lsls	r2, r3, #5
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	4413      	add	r3, r2
 800ec58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec5c:	691a      	ldr	r2, [r3, #16]
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	0159      	lsls	r1, r3, #5
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	440b      	add	r3, r1
 800ec66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4b8e      	ldr	r3, [pc, #568]	@ (800eea8 <USB_EPStartXfer+0x2e8>)
 800ec6e:	4013      	ands	r3, r2
 800ec70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec7e:	691a      	ldr	r2, [r3, #16]
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	0159      	lsls	r1, r3, #5
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	440b      	add	r3, r1
 800ec88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4b85      	ldr	r3, [pc, #532]	@ (800eea4 <USB_EPStartXfer+0x2e4>)
 800ec90:	4013      	ands	r3, r2
 800ec92:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d11a      	bne.n	800ecd0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	691a      	ldr	r2, [r3, #16]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d903      	bls.n	800ecae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	689a      	ldr	r2, [r3, #8]
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	015a      	lsls	r2, r3, #5
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecba:	691b      	ldr	r3, [r3, #16]
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	0151      	lsls	r1, r2, #5
 800ecc0:	69fa      	ldr	r2, [r7, #28]
 800ecc2:	440a      	add	r2, r1
 800ecc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eccc:	6113      	str	r3, [r2, #16]
 800ecce:	e044      	b.n	800ed5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	691a      	ldr	r2, [r3, #16]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	4413      	add	r3, r2
 800ecda:	1e5a      	subs	r2, r3, #1
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ece4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	015a      	lsls	r2, r3, #5
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	4413      	add	r3, r2
 800ecee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecf2:	691a      	ldr	r2, [r3, #16]
 800ecf4:	8afb      	ldrh	r3, [r7, #22]
 800ecf6:	04d9      	lsls	r1, r3, #19
 800ecf8:	4b6c      	ldr	r3, [pc, #432]	@ (800eeac <USB_EPStartXfer+0x2ec>)
 800ecfa:	400b      	ands	r3, r1
 800ecfc:	69b9      	ldr	r1, [r7, #24]
 800ecfe:	0148      	lsls	r0, r1, #5
 800ed00:	69f9      	ldr	r1, [r7, #28]
 800ed02:	4401      	add	r1, r0
 800ed04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	791b      	ldrb	r3, [r3, #4]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d122      	bne.n	800ed5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	69ba      	ldr	r2, [r7, #24]
 800ed24:	0151      	lsls	r1, r2, #5
 800ed26:	69fa      	ldr	r2, [r7, #28]
 800ed28:	440a      	add	r2, r1
 800ed2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ed32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	015a      	lsls	r2, r3, #5
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	8afb      	ldrh	r3, [r7, #22]
 800ed44:	075b      	lsls	r3, r3, #29
 800ed46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ed4a:	69b9      	ldr	r1, [r7, #24]
 800ed4c:	0148      	lsls	r0, r1, #5
 800ed4e:	69f9      	ldr	r1, [r7, #28]
 800ed50:	4401      	add	r1, r0
 800ed52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ed56:	4313      	orrs	r3, r2
 800ed58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed70:	69b9      	ldr	r1, [r7, #24]
 800ed72:	0148      	lsls	r0, r1, #5
 800ed74:	69f9      	ldr	r1, [r7, #28]
 800ed76:	4401      	add	r1, r0
 800ed78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d14b      	bne.n	800ee1e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	69db      	ldr	r3, [r3, #28]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d009      	beq.n	800eda2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	015a      	lsls	r2, r3, #5
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	4413      	add	r3, r2
 800ed96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	791b      	ldrb	r3, [r3, #4]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d128      	bne.n	800edfc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d110      	bne.n	800eddc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	015a      	lsls	r2, r3, #5
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	4413      	add	r3, r2
 800edc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	0151      	lsls	r1, r2, #5
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	440a      	add	r2, r1
 800edd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	e00f      	b.n	800edfc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	0151      	lsls	r1, r2, #5
 800edee:	69fa      	ldr	r2, [r7, #28]
 800edf0:	440a      	add	r2, r1
 800edf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800edfa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	015a      	lsls	r2, r3, #5
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	0151      	lsls	r1, r2, #5
 800ee0e:	69fa      	ldr	r2, [r7, #28]
 800ee10:	440a      	add	r2, r1
 800ee12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee1a:	6013      	str	r3, [r2, #0]
 800ee1c:	e169      	b.n	800f0f2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	015a      	lsls	r2, r3, #5
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	4413      	add	r3, r2
 800ee26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	0151      	lsls	r1, r2, #5
 800ee30:	69fa      	ldr	r2, [r7, #28]
 800ee32:	440a      	add	r2, r1
 800ee34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	791b      	ldrb	r3, [r3, #4]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d015      	beq.n	800ee72 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f000 8151 	beq.w	800f0f2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f003 030f 	and.w	r3, r3, #15
 800ee60:	2101      	movs	r1, #1
 800ee62:	fa01 f303 	lsl.w	r3, r1, r3
 800ee66:	69f9      	ldr	r1, [r7, #28]
 800ee68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	634b      	str	r3, [r1, #52]	@ 0x34
 800ee70:	e13f      	b.n	800f0f2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d116      	bne.n	800eeb0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	015a      	lsls	r2, r3, #5
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	4413      	add	r3, r2
 800ee8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	69ba      	ldr	r2, [r7, #24]
 800ee92:	0151      	lsls	r1, r2, #5
 800ee94:	69fa      	ldr	r2, [r7, #28]
 800ee96:	440a      	add	r2, r1
 800ee98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	e015      	b.n	800eed0 <USB_EPStartXfer+0x310>
 800eea4:	e007ffff 	.word	0xe007ffff
 800eea8:	fff80000 	.word	0xfff80000
 800eeac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	015a      	lsls	r2, r3, #5
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	69ba      	ldr	r2, [r7, #24]
 800eec0:	0151      	lsls	r1, r2, #5
 800eec2:	69fa      	ldr	r2, [r7, #28]
 800eec4:	440a      	add	r2, r1
 800eec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eece:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	68d9      	ldr	r1, [r3, #12]
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	781a      	ldrb	r2, [r3, #0]
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	b298      	uxth	r0, r3
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	4603      	mov	r3, r0
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f000 f9b9 	bl	800f25c <USB_WritePacket>
 800eeea:	e102      	b.n	800f0f2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	015a      	lsls	r2, r3, #5
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	4413      	add	r3, r2
 800eef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eef8:	691a      	ldr	r2, [r3, #16]
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	0159      	lsls	r1, r3, #5
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	440b      	add	r3, r1
 800ef02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef06:	4619      	mov	r1, r3
 800ef08:	4b7c      	ldr	r3, [pc, #496]	@ (800f0fc <USB_EPStartXfer+0x53c>)
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	015a      	lsls	r2, r3, #5
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	4413      	add	r3, r2
 800ef16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef1a:	691a      	ldr	r2, [r3, #16]
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	0159      	lsls	r1, r3, #5
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	440b      	add	r3, r1
 800ef24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4b75      	ldr	r3, [pc, #468]	@ (800f100 <USB_EPStartXfer+0x540>)
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d12f      	bne.n	800ef96 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d003      	beq.n	800ef46 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	689a      	ldr	r2, [r3, #8]
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	689a      	ldr	r2, [r3, #8]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	015a      	lsls	r2, r3, #5
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	4413      	add	r3, r2
 800ef56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef5a:	691a      	ldr	r2, [r3, #16]
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	6a1b      	ldr	r3, [r3, #32]
 800ef60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef64:	69b9      	ldr	r1, [r7, #24]
 800ef66:	0148      	lsls	r0, r1, #5
 800ef68:	69f9      	ldr	r1, [r7, #28]
 800ef6a:	4401      	add	r1, r0
 800ef6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ef70:	4313      	orrs	r3, r2
 800ef72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	015a      	lsls	r2, r3, #5
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	0151      	lsls	r1, r2, #5
 800ef86:	69fa      	ldr	r2, [r7, #28]
 800ef88:	440a      	add	r2, r1
 800ef8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef92:	6113      	str	r3, [r2, #16]
 800ef94:	e05f      	b.n	800f056 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d123      	bne.n	800efe6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efaa:	691a      	ldr	r2, [r3, #16]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efb4:	69b9      	ldr	r1, [r7, #24]
 800efb6:	0148      	lsls	r0, r1, #5
 800efb8:	69f9      	ldr	r1, [r7, #28]
 800efba:	4401      	add	r1, r0
 800efbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800efc0:	4313      	orrs	r3, r2
 800efc2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	0151      	lsls	r1, r2, #5
 800efd6:	69fa      	ldr	r2, [r7, #28]
 800efd8:	440a      	add	r2, r1
 800efda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800efe2:	6113      	str	r3, [r2, #16]
 800efe4:	e037      	b.n	800f056 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	691a      	ldr	r2, [r3, #16]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	4413      	add	r3, r2
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	fbb2 f3f3 	udiv	r3, r2, r3
 800effa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	8afa      	ldrh	r2, [r7, #22]
 800f002:	fb03 f202 	mul.w	r2, r3, r2
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f016:	691a      	ldr	r2, [r3, #16]
 800f018:	8afb      	ldrh	r3, [r7, #22]
 800f01a:	04d9      	lsls	r1, r3, #19
 800f01c:	4b39      	ldr	r3, [pc, #228]	@ (800f104 <USB_EPStartXfer+0x544>)
 800f01e:	400b      	ands	r3, r1
 800f020:	69b9      	ldr	r1, [r7, #24]
 800f022:	0148      	lsls	r0, r1, #5
 800f024:	69f9      	ldr	r1, [r7, #28]
 800f026:	4401      	add	r1, r0
 800f028:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f02c:	4313      	orrs	r3, r2
 800f02e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f03c:	691a      	ldr	r2, [r3, #16]
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f046:	69b9      	ldr	r1, [r7, #24]
 800f048:	0148      	lsls	r0, r1, #5
 800f04a:	69f9      	ldr	r1, [r7, #28]
 800f04c:	4401      	add	r1, r0
 800f04e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f052:	4313      	orrs	r3, r2
 800f054:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d10d      	bne.n	800f078 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d009      	beq.n	800f078 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	68d9      	ldr	r1, [r3, #12]
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f074:	460a      	mov	r2, r1
 800f076:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d128      	bne.n	800f0d2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d110      	bne.n	800f0b2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	69ba      	ldr	r2, [r7, #24]
 800f0a0:	0151      	lsls	r1, r2, #5
 800f0a2:	69fa      	ldr	r2, [r7, #28]
 800f0a4:	440a      	add	r2, r1
 800f0a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	e00f      	b.n	800f0d2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	015a      	lsls	r2, r3, #5
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	69ba      	ldr	r2, [r7, #24]
 800f0c2:	0151      	lsls	r1, r2, #5
 800f0c4:	69fa      	ldr	r2, [r7, #28]
 800f0c6:	440a      	add	r2, r1
 800f0c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	015a      	lsls	r2, r3, #5
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	0151      	lsls	r1, r2, #5
 800f0e4:	69fa      	ldr	r2, [r7, #28]
 800f0e6:	440a      	add	r2, r1
 800f0e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f0f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3720      	adds	r7, #32
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	fff80000 	.word	0xfff80000
 800f100:	e007ffff 	.word	0xe007ffff
 800f104:	1ff80000 	.word	0x1ff80000

0800f108 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f108:	b480      	push	{r7}
 800f10a:	b087      	sub	sp, #28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f112:	2300      	movs	r3, #0
 800f114:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	785b      	ldrb	r3, [r3, #1]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d14a      	bne.n	800f1bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	015a      	lsls	r2, r3, #5
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	4413      	add	r3, r2
 800f130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f13a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f13e:	f040 8086 	bne.w	800f24e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	7812      	ldrb	r2, [r2, #0]
 800f156:	0151      	lsls	r1, r2, #5
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	440a      	add	r2, r1
 800f15c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f160:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f164:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	015a      	lsls	r2, r3, #5
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	4413      	add	r3, r2
 800f170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	7812      	ldrb	r2, [r2, #0]
 800f17a:	0151      	lsls	r1, r2, #5
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	440a      	add	r2, r1
 800f180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f196:	4293      	cmp	r3, r2
 800f198:	d902      	bls.n	800f1a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	75fb      	strb	r3, [r7, #23]
          break;
 800f19e:	e056      	b.n	800f24e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	015a      	lsls	r2, r3, #5
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1b8:	d0e7      	beq.n	800f18a <USB_EPStopXfer+0x82>
 800f1ba:	e048      	b.n	800f24e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	015a      	lsls	r2, r3, #5
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1d4:	d13b      	bne.n	800f24e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	015a      	lsls	r2, r3, #5
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	4413      	add	r3, r2
 800f1e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	7812      	ldrb	r2, [r2, #0]
 800f1ea:	0151      	lsls	r1, r2, #5
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	440a      	add	r2, r1
 800f1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f1f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	7812      	ldrb	r2, [r2, #0]
 800f20e:	0151      	lsls	r1, r2, #5
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	440a      	add	r2, r1
 800f214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f218:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f21c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	3301      	adds	r3, #1
 800f222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d902      	bls.n	800f234 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	75fb      	strb	r3, [r7, #23]
          break;
 800f232:	e00c      	b.n	800f24e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	015a      	lsls	r2, r3, #5
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	4413      	add	r3, r2
 800f23e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f24c:	d0e7      	beq.n	800f21e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f250:	4618      	mov	r0, r3
 800f252:	371c      	adds	r7, #28
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b089      	sub	sp, #36	@ 0x24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	4611      	mov	r1, r2
 800f268:	461a      	mov	r2, r3
 800f26a:	460b      	mov	r3, r1
 800f26c:	71fb      	strb	r3, [r7, #7]
 800f26e:	4613      	mov	r3, r2
 800f270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f27a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d123      	bne.n	800f2ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f282:	88bb      	ldrh	r3, [r7, #4]
 800f284:	3303      	adds	r3, #3
 800f286:	089b      	lsrs	r3, r3, #2
 800f288:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f28a:	2300      	movs	r3, #0
 800f28c:	61bb      	str	r3, [r7, #24]
 800f28e:	e018      	b.n	800f2c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	031a      	lsls	r2, r3, #12
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	4413      	add	r3, r2
 800f298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f29c:	461a      	mov	r2, r3
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	61bb      	str	r3, [r7, #24]
 800f2c2:	69ba      	ldr	r2, [r7, #24]
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d3e2      	bcc.n	800f290 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3724      	adds	r7, #36	@ 0x24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b08b      	sub	sp, #44	@ 0x2c
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f2ee:	88fb      	ldrh	r3, [r7, #6]
 800f2f0:	089b      	lsrs	r3, r3, #2
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f2f6:	88fb      	ldrh	r3, [r7, #6]
 800f2f8:	f003 0303 	and.w	r3, r3, #3
 800f2fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f2fe:	2300      	movs	r3, #0
 800f300:	623b      	str	r3, [r7, #32]
 800f302:	e014      	b.n	800f32e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f312:	3301      	adds	r3, #1
 800f314:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f318:	3301      	adds	r3, #1
 800f31a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31e:	3301      	adds	r3, #1
 800f320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f324:	3301      	adds	r3, #1
 800f326:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	3301      	adds	r3, #1
 800f32c:	623b      	str	r3, [r7, #32]
 800f32e:	6a3a      	ldr	r2, [r7, #32]
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	429a      	cmp	r2, r3
 800f334:	d3e6      	bcc.n	800f304 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f336:	8bfb      	ldrh	r3, [r7, #30]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d01e      	beq.n	800f37a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f346:	461a      	mov	r2, r3
 800f348:	f107 0310 	add.w	r3, r7, #16
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	b2db      	uxtb	r3, r3
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	fa22 f303 	lsr.w	r3, r2, r3
 800f35c:	b2da      	uxtb	r2, r3
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f360:	701a      	strb	r2, [r3, #0]
      i++;
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	3301      	adds	r3, #1
 800f366:	623b      	str	r3, [r7, #32]
      pDest++;
 800f368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36a:	3301      	adds	r3, #1
 800f36c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f36e:	8bfb      	ldrh	r3, [r7, #30]
 800f370:	3b01      	subs	r3, #1
 800f372:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f374:	8bfb      	ldrh	r3, [r7, #30]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1ea      	bne.n	800f350 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	372c      	adds	r7, #44	@ 0x2c
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	785b      	ldrb	r3, [r3, #1]
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d12c      	bne.n	800f3fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	015a      	lsls	r2, r3, #5
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	db12      	blt.n	800f3dc <USB_EPSetStall+0x54>
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00f      	beq.n	800f3dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	0151      	lsls	r1, r2, #5
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	440a      	add	r2, r1
 800f3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f3da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	015a      	lsls	r2, r3, #5
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	0151      	lsls	r1, r2, #5
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	440a      	add	r2, r1
 800f3f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f3fa:	6013      	str	r3, [r2, #0]
 800f3fc:	e02b      	b.n	800f456 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	015a      	lsls	r2, r3, #5
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	4413      	add	r3, r2
 800f406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	db12      	blt.n	800f436 <USB_EPSetStall+0xae>
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00f      	beq.n	800f436 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	015a      	lsls	r2, r3, #5
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	4413      	add	r3, r2
 800f41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	0151      	lsls	r1, r2, #5
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	440a      	add	r2, r1
 800f42c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f430:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f434:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	015a      	lsls	r2, r3, #5
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	4413      	add	r3, r2
 800f43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	0151      	lsls	r1, r2, #5
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	440a      	add	r2, r1
 800f44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3714      	adds	r7, #20
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	785b      	ldrb	r3, [r3, #1]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d128      	bne.n	800f4d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	015a      	lsls	r2, r3, #5
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4413      	add	r3, r2
 800f488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	0151      	lsls	r1, r2, #5
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	440a      	add	r2, r1
 800f496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f49a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f49e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	791b      	ldrb	r3, [r3, #4]
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d003      	beq.n	800f4b0 <USB_EPClearStall+0x4c>
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	791b      	ldrb	r3, [r3, #4]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d138      	bne.n	800f522 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	015a      	lsls	r2, r3, #5
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	0151      	lsls	r1, r2, #5
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	440a      	add	r2, r1
 800f4c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	e027      	b.n	800f522 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	015a      	lsls	r2, r3, #5
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	4413      	add	r3, r2
 800f4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	0151      	lsls	r1, r2, #5
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	440a      	add	r2, r1
 800f4e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f4f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	791b      	ldrb	r3, [r3, #4]
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d003      	beq.n	800f502 <USB_EPClearStall+0x9e>
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	791b      	ldrb	r3, [r3, #4]
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d10f      	bne.n	800f522 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	0151      	lsls	r1, r2, #5
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	440a      	add	r2, r1
 800f518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f51c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f520:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	460b      	mov	r3, r1
 800f53a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f54e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f552:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	78fb      	ldrb	r3, [r7, #3]
 800f55e:	011b      	lsls	r3, r3, #4
 800f560:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f564:	68f9      	ldr	r1, [r7, #12]
 800f566:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f56a:	4313      	orrs	r3, r2
 800f56c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f596:	f023 0303 	bic.w	r3, r3, #3
 800f59a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f5aa:	f023 0302 	bic.w	r3, r3, #2
 800f5ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5b0:	2300      	movs	r3, #0
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr

0800f5be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f5be:	b480      	push	{r7}
 800f5c0:	b085      	sub	sp, #20
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f5d8:	f023 0303 	bic.w	r3, r3, #3
 800f5dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	68fa      	ldr	r2, [r7, #12]
 800f5e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f5ec:	f043 0302 	orr.w	r3, r3, #2
 800f5f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	699b      	ldr	r3, [r3, #24]
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	4013      	ands	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f618:	68fb      	ldr	r3, [r7, #12]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f626:	b480      	push	{r7}
 800f628:	b085      	sub	sp, #20
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	4013      	ands	r3, r2
 800f648:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	0c1b      	lsrs	r3, r3, #16
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b085      	sub	sp, #20
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f676:	69db      	ldr	r3, [r3, #28]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	4013      	ands	r3, r2
 800f67c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	b29b      	uxth	r3, r3
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f68e:	b480      	push	{r7}
 800f690:	b085      	sub	sp, #20
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	460b      	mov	r3, r1
 800f698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	015a      	lsls	r2, r3, #5
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6b4:	695b      	ldr	r3, [r3, #20]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f6bc:	68bb      	ldr	r3, [r7, #8]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b087      	sub	sp, #28
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f6ee:	78fb      	ldrb	r3, [r7, #3]
 800f6f0:	f003 030f 	and.w	r3, r3, #15
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f6fa:	01db      	lsls	r3, r3, #7
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	693a      	ldr	r2, [r7, #16]
 800f700:	4313      	orrs	r3, r2
 800f702:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f704:	78fb      	ldrb	r3, [r7, #3]
 800f706:	015a      	lsls	r2, r3, #5
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	4013      	ands	r3, r2
 800f716:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f718:	68bb      	ldr	r3, [r7, #8]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	371c      	adds	r7, #28
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f726:	b480      	push	{r7}
 800f728:	b083      	sub	sp, #12
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	f003 0301 	and.w	r3, r3, #1
}
 800f736:	4618      	mov	r0, r3
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
	...

0800f744 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f75e:	4619      	mov	r1, r3
 800f760:	4b09      	ldr	r3, [pc, #36]	@ (800f788 <USB_ActivateSetup+0x44>)
 800f762:	4013      	ands	r3, r2
 800f764:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	fffff800 	.word	0xfffff800

0800f78c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	460b      	mov	r3, r1
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	333c      	adds	r3, #60	@ 0x3c
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	4a26      	ldr	r2, [pc, #152]	@ (800f844 <USB_EP0_OutStart+0xb8>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d90a      	bls.n	800f7c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7c0:	d101      	bne.n	800f7c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	e037      	b.n	800f836 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f7e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7f4:	f043 0318 	orr.w	r3, r3, #24
 800f7f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f800:	691b      	ldr	r3, [r3, #16]
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f808:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f80c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f80e:	7afb      	ldrb	r3, [r7, #11]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d10f      	bne.n	800f834 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f81a:	461a      	mov	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f82e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	4f54300a 	.word	0x4f54300a

0800f848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	3301      	adds	r3, #1
 800f858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f860:	d901      	bls.n	800f866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f862:	2303      	movs	r3, #3
 800f864:	e01b      	b.n	800f89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	daf2      	bge.n	800f854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f86e:	2300      	movs	r3, #0
 800f870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	f043 0201 	orr.w	r2, r3, #1
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3301      	adds	r3, #1
 800f882:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f88a:	d901      	bls.n	800f890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f88c:	2303      	movs	r3, #3
 800f88e:	e006      	b.n	800f89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	691b      	ldr	r3, [r3, #16]
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d0f0      	beq.n	800f87e <USB_CoreReset+0x36>

  return HAL_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
	...

0800f8ac <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b096      	sub	sp, #88	@ 0x58
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3303      	adds	r3, #3
 800f8be:	f023 0303 	bic.w	r3, r3, #3
 800f8c2:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800f8c8:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800f8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800f8cc:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800f8ce:	b672      	cpsid	i
#endif
    return(int_posture);
 800f8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800f8d2:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f8d4:	4b55      	ldr	r3, [pc, #340]	@ (800fa2c <_tx_byte_allocate+0x180>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8e2:	621a      	str	r2, [r3, #32]
 800f8e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ea:	f383 8810 	msr	PRIMASK, r3
}
 800f8ee:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800f8f0:	6879      	ldr	r1, [r7, #4]
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 f9b2 	bl	800fc5c <_tx_byte_pool_search>
 800f8f8:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800f8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800f900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800f902:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f904:	b672      	cpsid	i
    return(int_posture);
 800f906:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800f908:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800f90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d002      	beq.n	800f916 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800f910:	2301      	movs	r3, #1
 800f912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f914:	e006      	b.n	800f924 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d101      	bne.n	800f924 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800f920:	2301      	movs	r3, #1
 800f922:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800f924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f926:	2b00      	cmp	r3, #0
 800f928:	d0d9      	beq.n	800f8de <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f92e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800f930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f932:	2b00      	cmp	r3, #0
 800f934:	d008      	beq.n	800f948 <_tx_byte_allocate+0x9c>
 800f936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f938:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	f383 8810 	msr	PRIMASK, r3
}
 800f940:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800f942:	2300      	movs	r3, #0
 800f944:	653b      	str	r3, [r7, #80]	@ 0x50
 800f946:	e06c      	b.n	800fa22 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d061      	beq.n	800fa12 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f94e:	4b38      	ldr	r3, [pc, #224]	@ (800fa30 <_tx_byte_allocate+0x184>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d007      	beq.n	800f966 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800f956:	2310      	movs	r3, #16
 800f958:	653b      	str	r3, [r7, #80]	@ 0x50
 800f95a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f95c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	f383 8810 	msr	PRIMASK, r3
}
 800f964:	e05d      	b.n	800fa22 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800f966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f968:	4a32      	ldr	r2, [pc, #200]	@ (800fa34 <_tx_byte_allocate+0x188>)
 800f96a:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800f96c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800f972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800f978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f980:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f988:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f990:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f996:	1c5a      	adds	r2, r3, #1
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d109      	bne.n	800f9b6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9a6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9ac:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f9ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9b2:	675a      	str	r2, [r3, #116]	@ 0x74
 800f9b4:	e011      	b.n	800f9da <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f9bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9c0:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f9c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9cc:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9d2:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9d8:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800f9da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9dc:	2209      	movs	r2, #9
 800f9de:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f9e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f9e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f9ec:	4b10      	ldr	r3, [pc, #64]	@ (800fa30 <_tx_byte_allocate+0x184>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	4a0f      	ldr	r2, [pc, #60]	@ (800fa30 <_tx_byte_allocate+0x184>)
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	f383 8810 	msr	PRIMASK, r3
}
 800fa00:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fa02:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fa04:	f002 fc86 	bl	8012314 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fa08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa0e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa10:	e007      	b.n	800fa22 <_tx_byte_allocate+0x176>
 800fa12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa14:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	f383 8810 	msr	PRIMASK, r3
}
 800fa1c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800fa1e:	2310      	movs	r3, #16
 800fa20:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800fa22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3758      	adds	r7, #88	@ 0x58
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	240017a0 	.word	0x240017a0
 800fa30:	24001838 	.word	0x24001838
 800fa34:	0800fa39 	.word	0x0800fa39

0800fa38 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08e      	sub	sp, #56	@ 0x38
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa42:	f3ef 8310 	mrs	r3, PRIMASK
 800fa46:	623b      	str	r3, [r7, #32]
    return(posture);
 800fa48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fa4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa4c:	b672      	cpsid	i
    return(int_posture);
 800fa4e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800fa50:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fa56:	4a33      	ldr	r2, [pc, #204]	@ (800fb24 <_tx_byte_pool_cleanup+0xec>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d158      	bne.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fa62:	683a      	ldr	r2, [r7, #0]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d152      	bne.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa6c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d04c      	beq.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800fa74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a2b      	ldr	r2, [pc, #172]	@ (800fb28 <_tx_byte_pool_cleanup+0xf0>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d147      	bne.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d043      	beq.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa90:	1e5a      	subs	r2, r3, #1
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800fa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800fa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d103      	bne.n	800faaa <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800faa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa4:	2200      	movs	r2, #0
 800faa6:	625a      	str	r2, [r3, #36]	@ 0x24
 800faa8:	e013      	b.n	800fad2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faae:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fab4:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800fab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faba:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800fabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fabe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fac0:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800fac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d102      	bne.n	800fad2 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800facc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800face:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fad0:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fad6:	2b09      	cmp	r3, #9
 800fad8:	d119      	bne.n	800fb0e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2210      	movs	r2, #16
 800fade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fae2:	4b12      	ldr	r3, [pc, #72]	@ (800fb2c <_tx_byte_pool_cleanup+0xf4>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3301      	adds	r3, #1
 800fae8:	4a10      	ldr	r2, [pc, #64]	@ (800fb2c <_tx_byte_pool_cleanup+0xf4>)
 800faea:	6013      	str	r3, [r2, #0]
 800faec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f383 8810 	msr	PRIMASK, r3
}
 800faf6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f002 fb0b 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fafe:	f3ef 8310 	mrs	r3, PRIMASK
 800fb02:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fb04:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fb06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb08:	b672      	cpsid	i
    return(int_posture);
 800fb0a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fb0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f383 8810 	msr	PRIMASK, r3
}
 800fb18:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fb1a:	bf00      	nop
 800fb1c:	3738      	adds	r7, #56	@ 0x38
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	0800fa39 	.word	0x0800fa39
 800fb28:	42595445 	.word	0x42595445
 800fb2c:	24001838 	.word	0x24001838

0800fb30 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08e      	sub	sp, #56	@ 0x38
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800fb3e:	2234      	movs	r2, #52	@ 0x34
 800fb40:	2100      	movs	r1, #0
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f008 fce2 	bl	801850c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	f023 0303 	bic.w	r3, r3, #3
 800fb4e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	f1a3 0208 	sub.w	r2, r3, #8
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2202      	movs	r2, #2
 800fb7c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800fb82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	4413      	add	r3, r2
 800fb88:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8c:	3b04      	subs	r3, #4
 800fb8e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800fb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb9c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800fb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba0:	3b04      	subs	r3, #4
 800fba2:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbba:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbc2:	3304      	adds	r3, #4
 800fbc4:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800fbc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800fbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbcc:	4a1f      	ldr	r2, [pc, #124]	@ (800fc4c <_tx_byte_pool_create+0x11c>)
 800fbce:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fbd6:	f3ef 8310 	mrs	r3, PRIMASK
 800fbda:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fbdc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fbde:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fbe0:	b672      	cpsid	i
    return(int_posture);
 800fbe2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800fbe4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	4a19      	ldr	r2, [pc, #100]	@ (800fc50 <_tx_byte_pool_create+0x120>)
 800fbea:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800fbec:	4b19      	ldr	r3, [pc, #100]	@ (800fc54 <_tx_byte_pool_create+0x124>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d109      	bne.n	800fc08 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800fbf4:	4a18      	ldr	r2, [pc, #96]	@ (800fc58 <_tx_byte_pool_create+0x128>)
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc06:	e011      	b.n	800fc2c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800fc08:	4b13      	ldr	r3, [pc, #76]	@ (800fc58 <_tx_byte_pool_create+0x128>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc12:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	69fa      	ldr	r2, [r7, #28]
 800fc24:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6a3a      	ldr	r2, [r7, #32]
 800fc2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800fc2c:	4b09      	ldr	r3, [pc, #36]	@ (800fc54 <_tx_byte_pool_create+0x124>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3301      	adds	r3, #1
 800fc32:	4a08      	ldr	r2, [pc, #32]	@ (800fc54 <_tx_byte_pool_create+0x124>)
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	f383 8810 	msr	PRIMASK, r3
}
 800fc40:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800fc42:	2300      	movs	r3, #0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3738      	adds	r7, #56	@ 0x38
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	ffffeeee 	.word	0xffffeeee
 800fc50:	42595445 	.word	0x42595445
 800fc54:	24001794 	.word	0x24001794
 800fc58:	24001790 	.word	0x24001790

0800fc5c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b097      	sub	sp, #92	@ 0x5c
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800fc66:	2300      	movs	r3, #0
 800fc68:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc6a:	f3ef 8310 	mrs	r3, PRIMASK
 800fc6e:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800fc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800fc72:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc74:	b672      	cpsid	i
    return(int_posture);
 800fc76:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800fc78:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689a      	ldr	r2, [r3, #8]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	3b02      	subs	r3, #2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	4413      	add	r3, r2
 800fc88:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d308      	bcc.n	800fca4 <_tx_byte_pool_search+0x48>
 800fc92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	f383 8810 	msr	PRIMASK, r3
}
 800fc9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	653b      	str	r3, [r7, #80]	@ 0x50
 800fca2:	e0dd      	b.n	800fe60 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800fca4:	4b72      	ldr	r3, [pc, #456]	@ (800fe70 <_tx_byte_pool_search+0x214>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fcae:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fcc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcca:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800fccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a68      	ldr	r2, [pc, #416]	@ (800fe74 <_tx_byte_pool_search+0x218>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d143      	bne.n	800fd5e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800fcd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d104      	bne.n	800fce6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fce0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800fce2:	2301      	movs	r3, #1
 800fce4:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fce8:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800fcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fcf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800fcf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcfa:	3b08      	subs	r3, #8
 800fcfc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800fcfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d257      	bcs.n	800fdb6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800fd06:	2300      	movs	r3, #0
 800fd08:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd12:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800fd14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a56      	ldr	r2, [pc, #344]	@ (800fe74 <_tx_byte_pool_search+0x218>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d113      	bne.n	800fd46 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd20:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800fd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd28:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	1e5a      	subs	r2, r3, #1
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d114      	bne.n	800fd68 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd42:	615a      	str	r2, [r3, #20]
 800fd44:	e010      	b.n	800fd68 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd48:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800fd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800fd50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d008      	beq.n	800fd68 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800fd56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd5c:	e004      	b.n	800fd68 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fd5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd60:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800fd68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800fd6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd70:	3b01      	subs	r3, #1
 800fd72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd76:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	f383 8810 	msr	PRIMASK, r3
}
 800fd7e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd80:	f3ef 8310 	mrs	r3, PRIMASK
 800fd84:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fd86:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fd88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd8a:	b672      	cpsid	i
    return(int_posture);
 800fd8c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800fd8e:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6a1b      	ldr	r3, [r3, #32]
 800fd94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d009      	beq.n	800fdae <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	3301      	adds	r3, #1
 800fda6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fdac:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800fdae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d186      	bne.n	800fcc2 <_tx_byte_pool_search+0x66>
 800fdb4:	e000      	b.n	800fdb8 <_tx_byte_pool_search+0x15c>
                    break;
 800fdb6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800fdb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d048      	beq.n	800fe50 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800fdbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	1ad3      	subs	r3, r2, r3
 800fdc4:	2b13      	cmp	r3, #19
 800fdc6:	d91e      	bls.n	800fe06 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	3308      	adds	r3, #8
 800fdcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fdce:	4413      	add	r3, r2
 800fdd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fdd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd4:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fdd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdd8:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800fdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde4:	3304      	adds	r3, #4
 800fde6:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdea:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800fdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdee:	4a21      	ldr	r2, [pc, #132]	@ (800fe74 <_tx_byte_pool_search+0x218>)
 800fdf0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe00:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fe06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe08:	3304      	adds	r3, #4
 800fe0a:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0e:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fe10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	689a      	ldr	r2, [r3, #8]
 800fe1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	f1a3 0208 	sub.w	r2, r3, #8
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d105      	bne.n	800fe3c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fe30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe32:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800fe34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	615a      	str	r2, [r3, #20]
 800fe3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f383 8810 	msr	PRIMASK, r3
}
 800fe46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800fe48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe4a:	3308      	adds	r3, #8
 800fe4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe4e:	e007      	b.n	800fe60 <_tx_byte_pool_search+0x204>
 800fe50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	f383 8810 	msr	PRIMASK, r3
}
 800fe5a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800fe60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	375c      	adds	r7, #92	@ 0x5c
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	240017a0 	.word	0x240017a0
 800fe74:	ffffeeee 	.word	0xffffeeee

0800fe78 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08e      	sub	sp, #56	@ 0x38
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe82:	f3ef 8310 	mrs	r3, PRIMASK
 800fe86:	61fb      	str	r3, [r7, #28]
    return(posture);
 800fe88:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800fe8a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe8c:	b672      	cpsid	i
    return(int_posture);
 800fe8e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800fe90:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe96:	4a38      	ldr	r2, [pc, #224]	@ (800ff78 <_tx_event_flags_cleanup+0x100>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d162      	bne.n	800ff62 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d15c      	bne.n	800ff62 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feac:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800feae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d056      	beq.n	800ff62 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800feb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a30      	ldr	r2, [pc, #192]	@ (800ff7c <_tx_event_flags_cleanup+0x104>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d151      	bne.n	800ff62 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800febe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d04d      	beq.n	800ff62 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2200      	movs	r2, #0
 800feca:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800fecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fece:	695b      	ldr	r3, [r3, #20]
 800fed0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800fed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed4:	691b      	ldr	r3, [r3, #16]
 800fed6:	62bb      	str	r3, [r7, #40]	@ 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800fed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d020      	beq.n	800ff20 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800fede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee0:	3b01      	subs	r3, #1
 800fee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800fee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fee8:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800feea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feec:	2b00      	cmp	r3, #0
 800feee:	d103      	bne.n	800fef8 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800fef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fef2:	2200      	movs	r2, #0
 800fef4:	611a      	str	r2, [r3, #16]
 800fef6:	e016      	b.n	800ff26 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fefc:	627b      	str	r3, [r7, #36]	@ 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff02:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ff04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff06:	6a3a      	ldr	r2, [r7, #32]
 800ff08:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff0e:	671a      	str	r2, [r3, #112]	@ 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800ff10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d106      	bne.n	800ff26 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800ff18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff1c:	611a      	str	r2, [r3, #16]
 800ff1e:	e002      	b.n	800ff26 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800ff20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff22:	2201      	movs	r2, #1
 800ff24:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2a:	2b07      	cmp	r3, #7
 800ff2c:	d119      	bne.n	800ff62 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2207      	movs	r2, #7
 800ff32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ff36:	4b12      	ldr	r3, [pc, #72]	@ (800ff80 <_tx_event_flags_cleanup+0x108>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	4a10      	ldr	r2, [pc, #64]	@ (800ff80 <_tx_event_flags_cleanup+0x108>)
 800ff3e:	6013      	str	r3, [r2, #0]
 800ff40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f383 8810 	msr	PRIMASK, r3
}
 800ff4a:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f002 f8e1 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff52:	f3ef 8310 	mrs	r3, PRIMASK
 800ff56:	617b      	str	r3, [r7, #20]
    return(posture);
 800ff58:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ff5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff5c:	b672      	cpsid	i
    return(int_posture);
 800ff5e:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ff60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff64:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	f383 8810 	msr	PRIMASK, r3
}
 800ff6c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ff6e:	bf00      	nop
 800ff70:	3738      	adds	r7, #56	@ 0x38
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	0800fe79 	.word	0x0800fe79
 800ff7c:	4456444e 	.word	0x4456444e
 800ff80:	24001838 	.word	0x24001838

0800ff84 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b088      	sub	sp, #32
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ff8e:	2224      	movs	r2, #36	@ 0x24
 800ff90:	2100      	movs	r1, #0
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f008 faba 	bl	801850c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff9e:	f3ef 8310 	mrs	r3, PRIMASK
 800ffa2:	613b      	str	r3, [r7, #16]
    return(posture);
 800ffa4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ffa6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ffa8:	b672      	cpsid	i
    return(int_posture);
 800ffaa:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800ffac:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4a18      	ldr	r2, [pc, #96]	@ (8010014 <_tx_event_flags_create+0x90>)
 800ffb2:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ffb4:	4b18      	ldr	r3, [pc, #96]	@ (8010018 <_tx_event_flags_create+0x94>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d109      	bne.n	800ffd0 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ffbc:	4a17      	ldr	r2, [pc, #92]	@ (801001c <_tx_event_flags_create+0x98>)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	61da      	str	r2, [r3, #28]
 800ffce:	e011      	b.n	800fff4 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ffd0:	4b12      	ldr	r3, [pc, #72]	@ (801001c <_tx_event_flags_create+0x98>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	69db      	ldr	r3, [r3, #28]
 800ffda:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800fff4:	4b08      	ldr	r3, [pc, #32]	@ (8010018 <_tx_event_flags_create+0x94>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	3301      	adds	r3, #1
 800fffa:	4a07      	ldr	r2, [pc, #28]	@ (8010018 <_tx_event_flags_create+0x94>)
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	f383 8810 	msr	PRIMASK, r3
}
 8010008:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3720      	adds	r7, #32
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	4456444e 	.word	0x4456444e
 8010018:	2400177c 	.word	0x2400177c
 801001c:	24001778 	.word	0x24001778

08010020 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b092      	sub	sp, #72	@ 0x48
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010028:	f3ef 8310 	mrs	r3, PRIMASK
 801002c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 801002e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8010030:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010032:	b672      	cpsid	i
    return(int_posture);
 8010034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 8010036:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 801003e:	4b3d      	ldr	r3, [pc, #244]	@ (8010134 <_tx_event_flags_delete+0x114>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	3b01      	subs	r3, #1
 8010044:	4a3b      	ldr	r2, [pc, #236]	@ (8010134 <_tx_event_flags_delete+0x114>)
 8010046:	6013      	str	r3, [r2, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8010048:	4b3a      	ldr	r3, [pc, #232]	@ (8010134 <_tx_event_flags_delete+0x114>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d103      	bne.n	8010058 <_tx_event_flags_delete+0x38>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 8010050:	4b39      	ldr	r3, [pc, #228]	@ (8010138 <_tx_event_flags_delete+0x118>)
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	e013      	b.n	8010080 <_tx_event_flags_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	699b      	ldr	r3, [r3, #24]
 801005c:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	637b      	str	r3, [r7, #52]	@ 0x34
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 8010064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010068:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 801006a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801006c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801006e:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 8010070:	4b31      	ldr	r3, [pc, #196]	@ (8010138 <_tx_event_flags_delete+0x118>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	429a      	cmp	r2, r3
 8010078:	d102      	bne.n	8010080 <_tx_event_flags_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 801007a:	4a2f      	ldr	r2, [pc, #188]	@ (8010138 <_tx_event_flags_delete+0x118>)
 801007c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010080:	4b2e      	ldr	r3, [pc, #184]	@ (801013c <_tx_event_flags_delete+0x11c>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3301      	adds	r3, #1
 8010086:	4a2d      	ldr	r2, [pc, #180]	@ (801013c <_tx_event_flags_delete+0x11c>)
 8010088:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	647b      	str	r3, [r7, #68]	@ 0x44
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	695b      	ldr	r3, [r3, #20]
 801009a:	643b      	str	r3, [r7, #64]	@ 0x40
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	615a      	str	r2, [r3, #20]
 80100a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100a4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a8:	f383 8810 	msr	PRIMASK, r3
}
 80100ac:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80100ae:	e024      	b.n	80100fa <_tx_event_flags_delete+0xda>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 80100b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100b2:	3b01      	subs	r3, #1
 80100b4:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80100b6:	f3ef 8310 	mrs	r3, PRIMASK
 80100ba:	61fb      	str	r3, [r7, #28]
    return(posture);
 80100bc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80100be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80100c0:	b672      	cpsid	i
    return(int_posture);
 80100c2:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80100c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80100c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100c8:	2200      	movs	r2, #0
 80100ca:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80100cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100ce:	2201      	movs	r2, #1
 80100d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80100d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100d8:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80100da:	4b18      	ldr	r3, [pc, #96]	@ (801013c <_tx_event_flags_delete+0x11c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3301      	adds	r3, #1
 80100e0:	4a16      	ldr	r2, [pc, #88]	@ (801013c <_tx_event_flags_delete+0x11c>)
 80100e2:	6013      	str	r3, [r2, #0]
 80100e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	f383 8810 	msr	PRIMASK, r3
}
 80100ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80100f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80100f2:	f002 f80f 	bl	8012114 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80100f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f8:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80100fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1d7      	bne.n	80100b0 <_tx_event_flags_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010100:	f3ef 8310 	mrs	r3, PRIMASK
 8010104:	613b      	str	r3, [r7, #16]
    return(posture);
 8010106:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010108:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801010a:	b672      	cpsid	i
    return(int_posture);
 801010c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801010e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010110:	4b0a      	ldr	r3, [pc, #40]	@ (801013c <_tx_event_flags_delete+0x11c>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3b01      	subs	r3, #1
 8010116:	4a09      	ldr	r2, [pc, #36]	@ (801013c <_tx_event_flags_delete+0x11c>)
 8010118:	6013      	str	r3, [r2, #0]
 801011a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f383 8810 	msr	PRIMASK, r3
}
 8010124:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010126:	f001 ffbb 	bl	80120a0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3748      	adds	r7, #72	@ 0x48
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	2400177c 	.word	0x2400177c
 8010138:	24001778 	.word	0x24001778
 801013c:	24001838 	.word	0x24001838

08010140 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b096      	sub	sp, #88	@ 0x58
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801014e:	f3ef 8310 	mrs	r3, PRIMASK
 8010152:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010156:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010158:	b672      	cpsid	i
    return(int_posture);
 801015a:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 801015c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	43da      	mvns	r2, r3
 801016a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801016c:	401a      	ands	r2, r3
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f003 0302 	and.w	r3, r3, #2
 8010178:	643b      	str	r3, [r7, #64]	@ 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8010180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010182:	2b00      	cmp	r3, #0
 8010184:	d004      	beq.n	8010190 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8010186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010188:	43db      	mvns	r3, r3
 801018a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801018c:	4013      	ands	r3, r2
 801018e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8010190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010192:	2b02      	cmp	r3, #2
 8010194:	d10a      	bne.n	80101ac <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8010196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	4013      	ands	r3, r2
 801019c:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 801019e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d006      	beq.n	80101b4 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 80101a6:	2300      	movs	r3, #0
 80101a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101aa:	e003      	b.n	80101b4 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80101ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	4013      	ands	r3, r2
 80101b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 80101b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d026      	beq.n	8010208 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 80101c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d11c      	bne.n	8010202 <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 80101c8:	2300      	movs	r3, #0
 80101ca:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	695b      	ldr	r3, [r3, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d101      	bne.n	80101e0 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 80101dc:	2301      	movs	r3, #1
 80101de:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 80101e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d106      	bne.n	80101f4 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6a1a      	ldr	r2, [r3, #32]
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	621a      	str	r2, [r3, #32]
 80101f2:	e006      	b.n	8010202 <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	689a      	ldr	r2, [r3, #8]
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	43db      	mvns	r3, r3
 80101fc:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8010202:	2300      	movs	r3, #0
 8010204:	653b      	str	r3, [r7, #80]	@ 0x50
 8010206:	e073      	b.n	80102f0 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801020a:	2b00      	cmp	r3, #0
 801020c:	d06e      	beq.n	80102ec <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 801020e:	4b3e      	ldr	r3, [pc, #248]	@ (8010308 <_tx_event_flags_get+0x1c8>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d102      	bne.n	801021c <_tx_event_flags_get+0xdc>
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d102      	bne.n	8010222 <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 801021c:	2307      	movs	r3, #7
 801021e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010220:	e066      	b.n	80102f0 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8010222:	4b3a      	ldr	r3, [pc, #232]	@ (801030c <_tx_event_flags_get+0x1cc>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8010228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022a:	4a39      	ldr	r2, [pc, #228]	@ (8010310 <_tx_event_flags_get+0x1d0>)
 801022c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 801022e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	679a      	str	r2, [r3, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8010234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 801023c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8010242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801024a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801024e:	1c5a      	adds	r2, r3, #1
 8010250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010252:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	695b      	ldr	r3, [r3, #20]
 801025a:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801025c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801025e:	2b00      	cmp	r3, #0
 8010260:	d109      	bne.n	8010276 <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010266:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8010268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801026c:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010272:	675a      	str	r2, [r3, #116]	@ 0x74
 8010274:	e011      	b.n	801029a <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010280:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010286:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801028c:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801028e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010292:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010298:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	695b      	ldr	r3, [r3, #20]
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 80102a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a6:	2207      	movs	r2, #7
 80102a8:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80102aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ac:	2201      	movs	r2, #1
 80102ae:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80102b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80102b4:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80102b6:	4b14      	ldr	r3, [pc, #80]	@ (8010308 <_tx_event_flags_get+0x1c8>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	3301      	adds	r3, #1
 80102bc:	4a12      	ldr	r2, [pc, #72]	@ (8010308 <_tx_event_flags_get+0x1c8>)
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	f383 8810 	msr	PRIMASK, r3
}
 80102ca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80102cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80102ce:	f002 f821 	bl	8012314 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102d2:	f3ef 8310 	mrs	r3, PRIMASK
 80102d6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80102d8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80102da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102dc:	b672      	cpsid	i
    return(int_posture);
 80102de:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 80102e0:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80102e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80102ea:	e001      	b.n	80102f0 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 80102ec:	2307      	movs	r3, #7
 80102ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80102f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	f383 8810 	msr	PRIMASK, r3
}
 80102fa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80102fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3758      	adds	r7, #88	@ 0x58
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	24001838 	.word	0x24001838
 801030c:	240017a0 	.word	0x240017a0
 8010310:	0800fe79 	.word	0x0800fe79

08010314 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b0a6      	sub	sp, #152	@ 0x98
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010320:	f3ef 8310 	mrs	r3, PRIMASK
 8010324:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8010326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8010328:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801032a:	b672      	cpsid	i
    return(int_posture);
 801032c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801032e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f003 0302 	and.w	r3, r3, #2
 8010338:	2b00      	cmp	r3, #0
 801033a:	d023      	beq.n	8010384 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 801033c:	2300      	movs	r3, #0
 801033e:	673b      	str	r3, [r7, #112]	@ 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	691b      	ldr	r3, [r3, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d101      	bne.n	8010354 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8010350:	2301      	movs	r3, #1
 8010352:	673b      	str	r3, [r7, #112]	@ 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8010354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010356:	2b01      	cmp	r3, #1
 8010358:	d107      	bne.n	801036a <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	6a1a      	ldr	r2, [r3, #32]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	43db      	mvns	r3, r3
 8010362:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	621a      	str	r2, [r3, #32]
 8010368:	e005      	b.n	8010376 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	689a      	ldr	r2, [r3, #8]
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	609a      	str	r2, [r3, #8]
 8010376:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801037a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801037c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801037e:	f383 8810 	msr	PRIMASK, r3
}
 8010382:	e1d2      	b.n	801072a <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	689a      	ldr	r2, [r3, #8]
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6a1b      	ldr	r3, [r3, #32]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d006      	beq.n	80103a6 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6a1a      	ldr	r2, [r3, #32]
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	43db      	mvns	r3, r3
 80103a0:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	677b      	str	r3, [r7, #116]	@ 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f000 81a4 	beq.w	8010704 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 80103bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d167      	bne.n	8010494 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	67fb      	str	r3, [r7, #124]	@ 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80103d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80103d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103d8:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 80103da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80103de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e2:	667b      	str	r3, [r7, #100]	@ 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 80103e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103e6:	f003 0302 	and.w	r3, r3, #2
 80103ea:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 80103ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	d10a      	bne.n	8010408 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80103f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80103f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103f6:	4013      	ands	r3, r2
 80103f8:	67bb      	str	r3, [r7, #120]	@ 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80103fa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80103fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103fe:	429a      	cmp	r2, r3
 8010400:	d006      	beq.n	8010410 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8010402:	2300      	movs	r3, #0
 8010404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010406:	e003      	b.n	8010410 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8010408:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801040a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801040c:	4013      	ands	r3, r2
 801040e:	67bb      	str	r3, [r7, #120]	@ 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8010410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010412:	2b00      	cmp	r3, #0
 8010414:	f000 817d 	beq.w	8010712 <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801041c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801041e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8010420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010422:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010424:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010428:	f003 0301 	and.w	r3, r3, #1
 801042c:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 801042e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010430:	2b01      	cmp	r3, #1
 8010432:	d106      	bne.n	8010442 <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	689a      	ldr	r2, [r3, #8]
 8010438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801043a:	43db      	mvns	r3, r3
 801043c:	401a      	ands	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2200      	movs	r2, #0
 8010446:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801044e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010452:	2200      	movs	r2, #0
 8010454:	669a      	str	r2, [r3, #104]	@ 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010456:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801045a:	2200      	movs	r2, #0
 801045c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8010460:	4ba7      	ldr	r3, [pc, #668]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3301      	adds	r3, #1
 8010466:	4aa6      	ldr	r2, [pc, #664]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 8010468:	6013      	str	r3, [r2, #0]
 801046a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801046e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010472:	f383 8810 	msr	PRIMASK, r3
}
 8010476:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010478:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801047c:	f001 fe4a 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010480:	f3ef 8310 	mrs	r3, PRIMASK
 8010484:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8010486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8010488:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801048a:	b672      	cpsid	i
    return(int_posture);
 801048c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 801048e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010492:	e13e      	b.n	8010712 <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                thread_ptr =      suspended_list;
 801049c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2200      	movs	r2, #0
 80104a8:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                last_satisfied =  TX_NULL;
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	67fb      	str	r3, [r7, #124]	@ 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 80104bc:	4b90      	ldr	r3, [pc, #576]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3301      	adds	r3, #1
 80104c2:	4a8f      	ldr	r2, [pc, #572]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80104c4:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 80104c6:	2301      	movs	r3, #1
 80104c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80104ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80104ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d2:	f383 8810 	msr	PRIMASK, r3
}
 80104d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104d8:	f3ef 8310 	mrs	r3, PRIMASK
 80104dc:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 80104de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 80104e0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80104e2:	b672      	cpsid	i
    return(int_posture);
 80104e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80104e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00f      	beq.n	8010512 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2200      	movs	r2, #0
 80104f6:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80104f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801050e:	4313      	orrs	r3, r2
 8010510:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010518:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801051a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801051e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010520:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8010522:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801052a:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 801052c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801052e:	f003 0302 	and.w	r3, r3, #2
 8010532:	663b      	str	r3, [r7, #96]	@ 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8010534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010536:	2b02      	cmp	r3, #2
 8010538:	d10a      	bne.n	8010550 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 801053a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801053c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801053e:	4013      	ands	r3, r2
 8010540:	67bb      	str	r3, [r7, #120]	@ 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8010542:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010546:	429a      	cmp	r2, r3
 8010548:	d006      	beq.n	8010558 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 801054a:	2300      	movs	r3, #0
 801054c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801054e:	e003      	b.n	8010558 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8010550:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010554:	4013      	ands	r3, r2
 8010556:	67bb      	str	r3, [r7, #120]	@ 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8010558:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801055e:	2b07      	cmp	r3, #7
 8010560:	d001      	beq.n	8010566 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8010562:	2301      	movs	r3, #1
 8010564:	67bb      	str	r3, [r7, #120]	@ 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8010566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010568:	2b00      	cmp	r3, #0
 801056a:	d069      	beq.n	8010640 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801056c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010572:	2b07      	cmp	r3, #7
 8010574:	d11d      	bne.n	80105b2 <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010576:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801057a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801057c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            *suspend_info_ptr =  current_event_flags;
 801057e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010580:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010582:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010586:	f003 0301 	and.w	r3, r3, #1
 801058a:	65bb      	str	r3, [r7, #88]	@ 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 801058c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801058e:	2b01      	cmp	r3, #1
 8010590:	d106      	bne.n	80105a0 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	689a      	ldr	r2, [r3, #8]
 8010596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010598:	43db      	mvns	r3, r3
 801059a:	401a      	ands	r2, r3
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80105a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105a4:	2200      	movs	r2, #0
 80105a6:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80105a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105ac:	2200      	movs	r2, #0
 80105ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80105b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80105bc:	429a      	cmp	r2, r3
 80105be:	d103      	bne.n	80105c8 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 80105c0:	2300      	movs	r3, #0
 80105c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80105c6:	e018      	b.n	80105fa <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80105c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105ce:	657b      	str	r3, [r7, #84]	@ 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80105d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105d6:	653b      	str	r3, [r7, #80]	@ 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80105d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80105dc:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80105de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80105e2:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80105e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80105e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d104      	bne.n	80105fa <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80105f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80105f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	695b      	ldr	r3, [r3, #20]
 80105fe:	1e5a      	subs	r2, r3, #1
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8010604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 801060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            last_satisfied =  thread_ptr;
 8010614:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 801061c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010620:	2200      	movs	r2, #0
 8010622:	671a      	str	r2, [r3, #112]	@ 0x70
 8010624:	e00c      	b.n	8010640 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8010626:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801062a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801062e:	671a      	str	r2, [r3, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8010630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010634:	2200      	movs	r2, #0
 8010636:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 8010638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801063c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8010640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8010646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801064a:	3b01      	subs	r3, #1
 801064c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8010650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010654:	2b00      	cmp	r3, #0
 8010656:	f47f af38 	bne.w	80104ca <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010660:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6a1b      	ldr	r3, [r3, #32]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00a      	beq.n	8010680 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	689a      	ldr	r2, [r3, #8]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	6a1b      	ldr	r3, [r3, #32]
 8010672:	43db      	mvns	r3, r3
 8010674:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	621a      	str	r2, [r3, #32]
 8010680:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010684:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010688:	f383 8810 	msr	PRIMASK, r3
}
 801068c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 801068e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                while(thread_ptr != TX_NULL)
 8010696:	e01f      	b.n	80106d8 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801069c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801069e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106a0:	f3ef 8310 	mrs	r3, PRIMASK
 80106a4:	623b      	str	r3, [r7, #32]
    return(posture);
 80106a6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80106a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106aa:	b672      	cpsid	i
    return(int_posture);
 80106ac:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 80106ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 80106b2:	4b13      	ldr	r3, [pc, #76]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3301      	adds	r3, #1
 80106b8:	4a11      	ldr	r2, [pc, #68]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80106ba:	6013      	str	r3, [r2, #0]
 80106bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80106c0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c4:	f383 8810 	msr	PRIMASK, r3
}
 80106c8:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 80106ca:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80106ce:	f001 fd21 	bl	8012114 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 80106d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                while(thread_ptr != TX_NULL)
 80106d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1db      	bne.n	8010698 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106e0:	f3ef 8310 	mrs	r3, PRIMASK
 80106e4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80106e6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80106e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106ea:	b672      	cpsid	i
    return(int_posture);
 80106ec:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80106ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80106f2:	4b03      	ldr	r3, [pc, #12]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3b01      	subs	r3, #1
 80106f8:	4a01      	ldr	r2, [pc, #4]	@ (8010700 <_tx_event_flags_set+0x3ec>)
 80106fa:	6013      	str	r3, [r2, #0]
 80106fc:	e009      	b.n	8010712 <_tx_event_flags_set+0x3fe>
 80106fe:	bf00      	nop
 8010700:	24001838 	.word	0x24001838
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	695b      	ldr	r3, [r3, #20]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2201      	movs	r2, #1
 8010710:	60da      	str	r2, [r3, #12]
 8010712:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010716:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	f383 8810 	msr	PRIMASK, r3
}
 801071e:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8010720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010722:	2b01      	cmp	r3, #1
 8010724:	d101      	bne.n	801072a <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8010726:	f001 fcbb 	bl	80120a0 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3798      	adds	r7, #152	@ 0x98
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8010738:	f001 fada 	bl	8011cf0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 801073c:	f002 f932 	bl	80129a4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8010740:	4b12      	ldr	r3, [pc, #72]	@ (801078c <_tx_initialize_high_level+0x58>)
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	4b12      	ldr	r3, [pc, #72]	@ (8010790 <_tx_initialize_high_level+0x5c>)
 8010748:	2200      	movs	r2, #0
 801074a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801074c:	4b11      	ldr	r3, [pc, #68]	@ (8010794 <_tx_initialize_high_level+0x60>)
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	4b11      	ldr	r3, [pc, #68]	@ (8010798 <_tx_initialize_high_level+0x64>)
 8010754:	2200      	movs	r2, #0
 8010756:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8010758:	4b10      	ldr	r3, [pc, #64]	@ (801079c <_tx_initialize_high_level+0x68>)
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	4b10      	ldr	r3, [pc, #64]	@ (80107a0 <_tx_initialize_high_level+0x6c>)
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8010764:	4b0f      	ldr	r3, [pc, #60]	@ (80107a4 <_tx_initialize_high_level+0x70>)
 8010766:	2200      	movs	r2, #0
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	4b0f      	ldr	r3, [pc, #60]	@ (80107a8 <_tx_initialize_high_level+0x74>)
 801076c:	2200      	movs	r2, #0
 801076e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8010770:	4b0e      	ldr	r3, [pc, #56]	@ (80107ac <_tx_initialize_high_level+0x78>)
 8010772:	2200      	movs	r2, #0
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	4b0e      	ldr	r3, [pc, #56]	@ (80107b0 <_tx_initialize_high_level+0x7c>)
 8010778:	2200      	movs	r2, #0
 801077a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801077c:	4b0d      	ldr	r3, [pc, #52]	@ (80107b4 <_tx_initialize_high_level+0x80>)
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	4b0d      	ldr	r3, [pc, #52]	@ (80107b8 <_tx_initialize_high_level+0x84>)
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]
#endif
}
 8010788:	bf00      	nop
 801078a:	bd80      	pop	{r7, pc}
 801078c:	24001768 	.word	0x24001768
 8010790:	2400176c 	.word	0x2400176c
 8010794:	24001770 	.word	0x24001770
 8010798:	24001774 	.word	0x24001774
 801079c:	24001778 	.word	0x24001778
 80107a0:	2400177c 	.word	0x2400177c
 80107a4:	24001788 	.word	0x24001788
 80107a8:	2400178c 	.word	0x2400178c
 80107ac:	24001790 	.word	0x24001790
 80107b0:	24001794 	.word	0x24001794
 80107b4:	24001780 	.word	0x24001780
 80107b8:	24001784 	.word	0x24001784

080107bc <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80107c0:	4b10      	ldr	r3, [pc, #64]	@ (8010804 <_tx_initialize_kernel_enter+0x48>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 80107c8:	d00c      	beq.n	80107e4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80107ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010804 <_tx_initialize_kernel_enter+0x48>)
 80107cc:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80107d0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80107d2:	f7ef fd85 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80107d6:	f7ff ffad 	bl	8010734 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80107da:	4b0b      	ldr	r3, [pc, #44]	@ (8010808 <_tx_initialize_kernel_enter+0x4c>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3301      	adds	r3, #1
 80107e0:	4a09      	ldr	r2, [pc, #36]	@ (8010808 <_tx_initialize_kernel_enter+0x4c>)
 80107e2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80107e4:	4b07      	ldr	r3, [pc, #28]	@ (8010804 <_tx_initialize_kernel_enter+0x48>)
 80107e6:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80107ea:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80107ec:	4b07      	ldr	r3, [pc, #28]	@ (801080c <_tx_initialize_kernel_enter+0x50>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f0 f82f 	bl	8000854 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80107f6:	4b03      	ldr	r3, [pc, #12]	@ (8010804 <_tx_initialize_kernel_enter+0x48>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80107fc:	f7ef fdb0 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010800:	bf00      	nop
 8010802:	bd80      	pop	{r7, pc}
 8010804:	2400007c 	.word	0x2400007c
 8010808:	24001838 	.word	0x24001838
 801080c:	24001798 	.word	0x24001798

08010810 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b08e      	sub	sp, #56	@ 0x38
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801081a:	f3ef 8310 	mrs	r3, PRIMASK
 801081e:	623b      	str	r3, [r7, #32]
    return(posture);
 8010820:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010822:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010824:	b672      	cpsid	i
    return(int_posture);
 8010826:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8010828:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801082e:	4a33      	ldr	r2, [pc, #204]	@ (80108fc <_tx_mutex_cleanup+0xec>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d158      	bne.n	80108e6 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	429a      	cmp	r2, r3
 801083e:	d152      	bne.n	80108e6 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010844:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8010846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010848:	2b00      	cmp	r3, #0
 801084a:	d04c      	beq.n	80108e6 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 801084c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a2b      	ldr	r2, [pc, #172]	@ (8010900 <_tx_mutex_cleanup+0xf0>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d147      	bne.n	80108e6 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010858:	69db      	ldr	r3, [r3, #28]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d043      	beq.n	80108e6 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010866:	69db      	ldr	r3, [r3, #28]
 8010868:	1e5a      	subs	r2, r3, #1
 801086a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801086e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010870:	69db      	ldr	r3, [r3, #28]
 8010872:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d103      	bne.n	8010882 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801087c:	2200      	movs	r2, #0
 801087e:	619a      	str	r2, [r3, #24]
 8010880:	e013      	b.n	80108aa <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010886:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801088c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010892:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010898:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801089a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089c:	699b      	ldr	r3, [r3, #24]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d102      	bne.n	80108aa <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80108a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108a8:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ae:	2b0d      	cmp	r3, #13
 80108b0:	d119      	bne.n	80108e6 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	221d      	movs	r2, #29
 80108b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80108ba:	4b12      	ldr	r3, [pc, #72]	@ (8010904 <_tx_mutex_cleanup+0xf4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	3301      	adds	r3, #1
 80108c0:	4a10      	ldr	r2, [pc, #64]	@ (8010904 <_tx_mutex_cleanup+0xf4>)
 80108c2:	6013      	str	r3, [r2, #0]
 80108c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	f383 8810 	msr	PRIMASK, r3
}
 80108ce:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f001 fc1f 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108d6:	f3ef 8310 	mrs	r3, PRIMASK
 80108da:	61bb      	str	r3, [r7, #24]
    return(posture);
 80108dc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80108de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108e0:	b672      	cpsid	i
    return(int_posture);
 80108e2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80108e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80108e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f383 8810 	msr	PRIMASK, r3
}
 80108f0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80108f2:	bf00      	nop
 80108f4:	3738      	adds	r7, #56	@ 0x38
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	08010811 	.word	0x08010811
 8010900:	4d555445 	.word	0x4d555445
 8010904:	24001838 	.word	0x24001838

08010908 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08a      	sub	sp, #40	@ 0x28
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010910:	f3ef 8310 	mrs	r3, PRIMASK
 8010914:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010916:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010918:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801091a:	b672      	cpsid	i
    return(int_posture);
 801091c:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801091e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010920:	4b1a      	ldr	r3, [pc, #104]	@ (801098c <_tx_mutex_thread_release+0x84>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3301      	adds	r3, #1
 8010926:	4a19      	ldr	r2, [pc, #100]	@ (801098c <_tx_mutex_thread_release+0x84>)
 8010928:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010930:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8010932:	6a3b      	ldr	r3, [r7, #32]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d017      	beq.n	8010968 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010938:	6a3b      	ldr	r3, [r7, #32]
 801093a:	2201      	movs	r2, #1
 801093c:	609a      	str	r2, [r3, #8]
 801093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010940:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f383 8810 	msr	PRIMASK, r3
}
 8010948:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801094a:	6a38      	ldr	r0, [r7, #32]
 801094c:	f000 fb9c 	bl	8011088 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010950:	f3ef 8310 	mrs	r3, PRIMASK
 8010954:	617b      	str	r3, [r7, #20]
    return(posture);
 8010956:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010958:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801095a:	b672      	cpsid	i
    return(int_posture);
 801095c:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801095e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010966:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1dd      	bne.n	801092a <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801096e:	4b07      	ldr	r3, [pc, #28]	@ (801098c <_tx_mutex_thread_release+0x84>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3b01      	subs	r3, #1
 8010974:	4a05      	ldr	r2, [pc, #20]	@ (801098c <_tx_mutex_thread_release+0x84>)
 8010976:	6013      	str	r3, [r2, #0]
 8010978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	f383 8810 	msr	PRIMASK, r3
}
 8010982:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010984:	bf00      	nop
 8010986:	3728      	adds	r7, #40	@ 0x28
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	24001838 	.word	0x24001838

08010990 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	@ 0x28
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801099c:	2234      	movs	r2, #52	@ 0x34
 801099e:	2100      	movs	r1, #0
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f007 fdb3 	bl	801850c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109b2:	f3ef 8310 	mrs	r3, PRIMASK
 80109b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80109b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80109ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80109bc:	b672      	cpsid	i
    return(int_posture);
 80109be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80109c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	4a1a      	ldr	r2, [pc, #104]	@ (8010a30 <_tx_mutex_create+0xa0>)
 80109c6:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80109c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010a34 <_tx_mutex_create+0xa4>)
 80109ca:	4a1b      	ldr	r2, [pc, #108]	@ (8010a38 <_tx_mutex_create+0xa8>)
 80109cc:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80109ce:	4b1b      	ldr	r3, [pc, #108]	@ (8010a3c <_tx_mutex_create+0xac>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d109      	bne.n	80109ea <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80109d6:	4a1a      	ldr	r2, [pc, #104]	@ (8010a40 <_tx_mutex_create+0xb0>)
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80109e8:	e011      	b.n	8010a0e <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80109ea:	4b15      	ldr	r3, [pc, #84]	@ (8010a40 <_tx_mutex_create+0xb0>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80109f0:	6a3b      	ldr	r3, [r7, #32]
 80109f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f4:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80109f6:	6a3b      	ldr	r3, [r7, #32]
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	69fa      	ldr	r2, [r7, #28]
 8010a06:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	6a3a      	ldr	r2, [r7, #32]
 8010a0c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8010a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010a3c <_tx_mutex_create+0xac>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	3301      	adds	r3, #1
 8010a14:	4a09      	ldr	r2, [pc, #36]	@ (8010a3c <_tx_mutex_create+0xac>)
 8010a16:	6013      	str	r3, [r2, #0]
 8010a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	f383 8810 	msr	PRIMASK, r3
}
 8010a22:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3728      	adds	r7, #40	@ 0x28
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	4d555445 	.word	0x4d555445
 8010a34:	2400183c 	.word	0x2400183c
 8010a38:	08010909 	.word	0x08010909
 8010a3c:	24001784 	.word	0x24001784
 8010a40:	24001780 	.word	0x24001780

08010a44 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b096      	sub	sp, #88	@ 0x58
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8010a50:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8010a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8010a54:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a56:	b672      	cpsid	i
    return(int_posture);
 8010a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8010a5a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8010a62:	4b4a      	ldr	r3, [pc, #296]	@ (8010b8c <_tx_mutex_delete+0x148>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4a48      	ldr	r2, [pc, #288]	@ (8010b8c <_tx_mutex_delete+0x148>)
 8010a6a:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010a6c:	4b47      	ldr	r3, [pc, #284]	@ (8010b8c <_tx_mutex_delete+0x148>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d103      	bne.n	8010a7c <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8010a74:	4b46      	ldr	r3, [pc, #280]	@ (8010b90 <_tx_mutex_delete+0x14c>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	e013      	b.n	8010aa4 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a1b      	ldr	r3, [r3, #32]
 8010a80:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a86:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8010a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a8c:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8010a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a92:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8010a94:	4b3e      	ldr	r3, [pc, #248]	@ (8010b90 <_tx_mutex_delete+0x14c>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d102      	bne.n	8010aa4 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8010a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8010b90 <_tx_mutex_delete+0x14c>)
 8010aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010aa2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010aac:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	699b      	ldr	r3, [r3, #24]
 8010ab2:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	69db      	ldr	r3, [r3, #28]
 8010abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8010acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d013      	beq.n	8010afa <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	609a      	str	r2, [r3, #8]
 8010ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ade:	f383 8810 	msr	PRIMASK, r3
}
 8010ae2:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 facf 	bl	8011088 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010aea:	f3ef 8310 	mrs	r3, PRIMASK
 8010aee:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8010af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8010af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010af4:	b672      	cpsid	i
    return(int_posture);
 8010af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8010af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8010afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010afc:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b00:	f383 8810 	msr	PRIMASK, r3
}
 8010b04:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8010b06:	e024      	b.n	8010b52 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8010b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8010b12:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010b14:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010b16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b18:	b672      	cpsid	i
    return(int_posture);
 8010b1a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8010b1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b20:	2200      	movs	r2, #0
 8010b22:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8010b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b26:	2201      	movs	r2, #1
 8010b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8010b32:	4b18      	ldr	r3, [pc, #96]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	3301      	adds	r3, #1
 8010b38:	4a16      	ldr	r2, [pc, #88]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b3e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b40:	6a3b      	ldr	r3, [r7, #32]
 8010b42:	f383 8810 	msr	PRIMASK, r3
}
 8010b46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010b48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010b4a:	f001 fae3 	bl	8012114 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8010b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b50:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 8010b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1d7      	bne.n	8010b08 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b58:	f3ef 8310 	mrs	r3, PRIMASK
 8010b5c:	613b      	str	r3, [r7, #16]
    return(posture);
 8010b5e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010b60:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b62:	b672      	cpsid	i
    return(int_posture);
 8010b64:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8010b66:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010b68:	4b0a      	ldr	r3, [pc, #40]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	4a09      	ldr	r2, [pc, #36]	@ (8010b94 <_tx_mutex_delete+0x150>)
 8010b70:	6013      	str	r3, [r2, #0]
 8010b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b74:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	f383 8810 	msr	PRIMASK, r3
}
 8010b7c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010b7e:	f001 fa8f 	bl	80120a0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010b82:	2300      	movs	r3, #0
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3758      	adds	r7, #88	@ 0x58
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	24001784 	.word	0x24001784
 8010b90:	24001780 	.word	0x24001780
 8010b94:	24001838 	.word	0x24001838

08010b98 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b092      	sub	sp, #72	@ 0x48
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010baa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bac:	b672      	cpsid	i
    return(int_posture);
 8010bae:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8010bb0:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8010d9c <_tx_mutex_get+0x204>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d144      	bne.n	8010c4a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010bca:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8010bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d032      	beq.n	8010c38 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d106      	bne.n	8010be8 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2220      	movs	r2, #32
 8010be6:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8010bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00f      	beq.n	8010c16 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c0c:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c14:	e009      	b.n	8010c2a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8010c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8010c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	f383 8810 	msr	PRIMASK, r3
}
 8010c42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010c44:	2300      	movs	r3, #0
 8010c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c48:	e0a2      	b.n	8010d90 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d10d      	bne.n	8010c70 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	1c5a      	adds	r2, r3, #1
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	609a      	str	r2, [r3, #8]
 8010c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c60:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	f383 8810 	msr	PRIMASK, r3
}
 8010c68:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c6e:	e08f      	b.n	8010d90 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 8084 	beq.w	8010d80 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010c78:	4b49      	ldr	r3, [pc, #292]	@ (8010da0 <_tx_mutex_get+0x208>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <_tx_mutex_get+0xfa>
 8010c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c82:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	f383 8810 	msr	PRIMASK, r3
}
 8010c8a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8010c8c:	231d      	movs	r3, #29
 8010c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c90:	e07e      	b.n	8010d90 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8010c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c9a:	4a42      	ldr	r2, [pc, #264]	@ (8010da4 <_tx_mutex_get+0x20c>)
 8010c9c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8010c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cae:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	69db      	ldr	r3, [r3, #28]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d109      	bne.n	8010cce <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cbe:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cc4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cca:	675a      	str	r2, [r3, #116]	@ 0x74
 8010ccc:	e011      	b.n	8010cf2 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	699b      	ldr	r3, [r3, #24]
 8010cd2:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cd8:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cde:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ce4:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cea:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cf0:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	69db      	ldr	r3, [r3, #28]
 8010cf6:	1c5a      	adds	r2, r3, #1
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8010cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfe:	220d      	movs	r2, #13
 8010d00:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d04:	2201      	movs	r2, #1
 8010d06:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d0a:	683a      	ldr	r2, [r7, #0]
 8010d0c:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010d0e:	4b24      	ldr	r3, [pc, #144]	@ (8010da0 <_tx_mutex_get+0x208>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	3301      	adds	r3, #1
 8010d14:	4a22      	ldr	r2, [pc, #136]	@ (8010da0 <_tx_mutex_get+0x208>)
 8010d16:	6013      	str	r3, [r2, #0]
 8010d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	f383 8810 	msr	PRIMASK, r3
}
 8010d22:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	691b      	ldr	r3, [r3, #16]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d121      	bne.n	8010d70 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d903      	bls.n	8010d40 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8010d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d204      	bcs.n	8010d58 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8010d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8010d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d905      	bls.n	8010d70 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8010d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d6c:	f000 f8ce 	bl	8010f0c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010d70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010d72:	f001 facf 	bl	8012314 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d7e:	e007      	b.n	8010d90 <_tx_mutex_get+0x1f8>
 8010d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f383 8810 	msr	PRIMASK, r3
}
 8010d8a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8010d8c:	231d      	movs	r3, #29
 8010d8e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8010d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3748      	adds	r7, #72	@ 0x48
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	240017a0 	.word	0x240017a0
 8010da0:	24001838 	.word	0x24001838
 8010da4:	08010811 	.word	0x08010811

08010da8 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b092      	sub	sp, #72	@ 0x48
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010db0:	f3ef 8310 	mrs	r3, PRIMASK
 8010db4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010db8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010dba:	b672      	cpsid	i
    return(int_posture);
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010dbe:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	69db      	ldr	r3, [r3, #28]
 8010dc4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d805      	bhi.n	8010dd8 <_tx_mutex_prioritize+0x30>
 8010dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	f383 8810 	msr	PRIMASK, r3
}
 8010dd6:	e092      	b.n	8010efe <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dda:	2b02      	cmp	r3, #2
 8010ddc:	d114      	bne.n	8010e08 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	699b      	ldr	r3, [r3, #24]
 8010de2:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8010de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010de8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8010dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d202      	bcs.n	8010dfc <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dfa:	619a      	str	r2, [r3, #24]
 8010dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dfe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	f383 8810 	msr	PRIMASK, r3
}
 8010e06:	e07a      	b.n	8010efe <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	699b      	ldr	r3, [r3, #24]
 8010e0c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e10:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e16:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8010e18:	4b3b      	ldr	r3, [pc, #236]	@ (8010f08 <_tx_mutex_prioritize+0x160>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8010f08 <_tx_mutex_prioritize+0x160>)
 8010e20:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8010e22:	2300      	movs	r3, #0
 8010e24:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8010e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d201      	bcs.n	8010e36 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8010e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e38:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f383 8810 	msr	PRIMASK, r3
}
 8010e40:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e42:	f3ef 8310 	mrs	r3, PRIMASK
 8010e46:	617b      	str	r3, [r7, #20]
    return(posture);
 8010e48:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010e4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e4c:	b672      	cpsid	i
    return(int_posture);
 8010e4e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8010e50:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d002      	beq.n	8010e62 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e60:	e006      	b.n	8010e70 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	69db      	ldr	r3, [r3, #28]
 8010e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d001      	beq.n	8010e70 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8010e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d103      	bne.n	8010e7e <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e7c:	e00c      	b.n	8010e98 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	699b      	ldr	r3, [r3, #24]
 8010e82:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	69db      	ldr	r3, [r3, #28]
 8010e88:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e92:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 8010e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d1c2      	bne.n	8010e26 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8010ea0:	4b19      	ldr	r3, [pc, #100]	@ (8010f08 <_tx_mutex_prioritize+0x160>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	4a18      	ldr	r2, [pc, #96]	@ (8010f08 <_tx_mutex_prioritize+0x160>)
 8010ea8:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8010eaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d01d      	beq.n	8010eee <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8010eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8010eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ec2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ec8:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8010eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ece:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ed4:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8010ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010eda:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8010edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ee0:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ee6:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eec:	619a      	str	r2, [r3, #24]
 8010eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ef0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f383 8810 	msr	PRIMASK, r3
}
 8010ef8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010efa:	f001 f8d1 	bl	80120a0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8010efe:	2300      	movs	r3, #0
#endif
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3748      	adds	r7, #72	@ 0x48
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	24001838 	.word	0x24001838

08010f0c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b090      	sub	sp, #64	@ 0x40
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f16:	f3ef 8310 	mrs	r3, PRIMASK
 8010f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8010f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8010f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f20:	b672      	cpsid	i
    return(int_posture);
 8010f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d017      	beq.n	8010f5e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d905      	bls.n	8010f4c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010f4a:	e002      	b.n	8010f52 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f54:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f58:	f383 8810 	msr	PRIMASK, r3
}
 8010f5c:	e089      	b.n	8011072 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8010f5e:	4b47      	ldr	r3, [pc, #284]	@ (801107c <_tx_mutex_priority_change+0x170>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f68:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8010f6a:	4b45      	ldr	r3, [pc, #276]	@ (8011080 <_tx_mutex_priority_change+0x174>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3302      	adds	r3, #2
 8010f70:	4a43      	ldr	r2, [pc, #268]	@ (8011080 <_tx_mutex_priority_change+0x174>)
 8010f72:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	220e      	movs	r2, #14
 8010f78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	f383 8810 	msr	PRIMASK, r3
}
 8010f90:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f001 f9be 	bl	8012314 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f98:	f3ef 8310 	mrs	r3, PRIMASK
 8010f9c:	623b      	str	r3, [r7, #32]
    return(posture);
 8010f9e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010fa0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fa2:	b672      	cpsid	i
    return(int_posture);
 8010fa4:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8010fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	683a      	ldr	r2, [r7, #0]
 8010fac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d905      	bls.n	8010fc6 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010fc4:	e002      	b.n	8010fcc <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f383 8810 	msr	PRIMASK, r3
}
 8010fd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f001 f89b 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fde:	f3ef 8310 	mrs	r3, PRIMASK
 8010fe2:	617b      	str	r3, [r7, #20]
    return(posture);
 8010fe4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010fe6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fe8:	b672      	cpsid	i
    return(int_posture);
 8010fea:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8010fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8010fee:	4b23      	ldr	r3, [pc, #140]	@ (801107c <_tx_mutex_priority_change+0x170>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d034      	beq.n	8011066 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011000:	2b00      	cmp	r3, #0
 8011002:	d130      	bne.n	8011066 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801100c:	429a      	cmp	r2, r3
 801100e:	d811      	bhi.n	8011034 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011014:	429a      	cmp	r2, r3
 8011016:	d126      	bne.n	8011066 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8011018:	4a18      	ldr	r2, [pc, #96]	@ (801107c <_tx_mutex_priority_change+0x170>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801101e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	429a      	cmp	r2, r3
 8011024:	d21f      	bcs.n	8011066 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801102a:	4916      	ldr	r1, [pc, #88]	@ (8011084 <_tx_mutex_priority_change+0x178>)
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011032:	e018      	b.n	8011066 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801103c:	429a      	cmp	r2, r3
 801103e:	d212      	bcs.n	8011066 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011048:	429a      	cmp	r2, r3
 801104a:	d80c      	bhi.n	8011066 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801104c:	4a0b      	ldr	r2, [pc, #44]	@ (801107c <_tx_mutex_priority_change+0x170>)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8011052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	429a      	cmp	r2, r3
 8011058:	d205      	bcs.n	8011066 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801105e:	4909      	ldr	r1, [pc, #36]	@ (8011084 <_tx_mutex_priority_change+0x178>)
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011068:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	f383 8810 	msr	PRIMASK, r3
}
 8011070:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011072:	bf00      	nop
 8011074:	3740      	adds	r7, #64	@ 0x40
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	240017a4 	.word	0x240017a4
 8011080:	24001838 	.word	0x24001838
 8011084:	240017b8 	.word	0x240017b8

08011088 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b0a6      	sub	sp, #152	@ 0x98
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8011090:	2320      	movs	r3, #32
 8011092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011096:	f3ef 8310 	mrs	r3, PRIMASK
 801109a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 801109c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 801109e:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80110a0:	b672      	cpsid	i
    return(int_posture);
 80110a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80110a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 81ff 	beq.w	80114b0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80110b8:	4ba3      	ldr	r3, [pc, #652]	@ (8011348 <_tx_mutex_put+0x2c0>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d00d      	beq.n	80110e4 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80110c8:	4ba0      	ldr	r3, [pc, #640]	@ (801134c <_tx_mutex_put+0x2c4>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <_tx_mutex_put+0x5c>
 80110d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80110d4:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110d8:	f383 8810 	msr	PRIMASK, r3
}
 80110dc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80110de:	231e      	movs	r3, #30
 80110e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80110e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80110e8:	2b20      	cmp	r3, #32
 80110ea:	f040 81eb 	bne.w	80114c4 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	1e5a      	subs	r2, r3, #1
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00a      	beq.n	8011116 <_tx_mutex_put+0x8e>
 8011100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011104:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011108:	f383 8810 	msr	PRIMASK, r3
}
 801110c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801110e:	2300      	movs	r3, #0
 8011110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011114:	e1d6      	b.n	80114c4 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8011116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10a      	bne.n	8011132 <_tx_mutex_put+0xaa>
 801111c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011120:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011124:	f383 8810 	msr	PRIMASK, r3
}
 8011128:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 801112a:	2300      	movs	r3, #0
 801112c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011130:	e1c8      	b.n	80114c4 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8011132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011138:	1e5a      	subs	r2, r3, #1
 801113a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801113c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8011140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d104      	bne.n	8011154 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 801114a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801114c:	2200      	movs	r2, #0
 801114e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8011152:	e019      	b.n	8011188 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011160:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8011162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011166:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011168:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 801116a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801116c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011170:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8011172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	429a      	cmp	r2, r3
 801117c:	d104      	bne.n	8011188 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801117e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011180:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011184:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d110      	bne.n	80111b2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	691b      	ldr	r3, [r3, #16]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d10c      	bne.n	80111b2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	60da      	str	r2, [r3, #12]
 801119e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80111a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111a6:	f383 8810 	msr	PRIMASK, r3
}
 80111aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80111ac:	2300      	movs	r3, #0
 80111ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80111b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80111b6:	2b20      	cmp	r3, #32
 80111b8:	f040 8184 	bne.w	80114c4 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80111bc:	2300      	movs	r3, #0
 80111be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80111c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80111c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80111c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d155      	bne.n	8011280 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80111d4:	4b5d      	ldr	r3, [pc, #372]	@ (801134c <_tx_mutex_put+0x2c4>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3301      	adds	r3, #1
 80111da:	4a5c      	ldr	r2, [pc, #368]	@ (801134c <_tx_mutex_put+0x2c4>)
 80111dc:	6013      	str	r3, [r2, #0]
 80111de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80111e2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111e6:	f383 8810 	msr	PRIMASK, r3
}
 80111ea:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80111ec:	2320      	movs	r3, #32
 80111ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80111f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80111f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80111f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 80111fc:	e01f      	b.n	801123e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80111fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d10b      	bne.n	8011220 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8011208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801120e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011212:	429a      	cmp	r2, r3
 8011214:	d904      	bls.n	8011220 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8011216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801121c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8011220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 801122a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801122c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011230:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011234:	429a      	cmp	r2, r3
 8011236:	d102      	bne.n	801123e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8011238:	2300      	movs	r3, #0
 801123a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 801123e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1db      	bne.n	80111fe <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011246:	f3ef 8310 	mrs	r3, PRIMASK
 801124a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 801124c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 801124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011250:	b672      	cpsid	i
    return(int_posture);
 8011252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011254:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011258:	4b3c      	ldr	r3, [pc, #240]	@ (801134c <_tx_mutex_put+0x2c4>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3b01      	subs	r3, #1
 801125e:	4a3b      	ldr	r2, [pc, #236]	@ (801134c <_tx_mutex_put+0x2c4>)
 8011260:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8011262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011264:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011268:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 801126c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011274:	429a      	cmp	r2, r3
 8011276:	d203      	bcs.n	8011280 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8011278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801127c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	2b01      	cmp	r3, #1
 8011286:	d920      	bls.n	80112ca <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d11c      	bne.n	80112ca <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8011290:	4b2e      	ldr	r3, [pc, #184]	@ (801134c <_tx_mutex_put+0x2c4>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	4a2d      	ldr	r2, [pc, #180]	@ (801134c <_tx_mutex_put+0x2c4>)
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801129e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a2:	f383 8810 	msr	PRIMASK, r3
}
 80112a6:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7ff fd7d 	bl	8010da8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112ae:	f3ef 8310 	mrs	r3, PRIMASK
 80112b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80112b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80112b6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80112b8:	b672      	cpsid	i
    return(int_posture);
 80112ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80112bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80112c0:	4b22      	ldr	r3, [pc, #136]	@ (801134c <_tx_mutex_put+0x2c4>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	4a21      	ldr	r2, [pc, #132]	@ (801134c <_tx_mutex_put+0x2c4>)
 80112c8:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d13e      	bne.n	8011350 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80112d2:	4b1e      	ldr	r3, [pc, #120]	@ (801134c <_tx_mutex_put+0x2c4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	3301      	adds	r3, #1
 80112d8:	4a1c      	ldr	r2, [pc, #112]	@ (801134c <_tx_mutex_put+0x2c4>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80112e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112e4:	f383 8810 	msr	PRIMASK, r3
}
 80112e8:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2220      	movs	r2, #32
 80112ee:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d006      	beq.n	801130c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff fe00 	bl	8010f0c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801130c:	f3ef 8310 	mrs	r3, PRIMASK
 8011310:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8011312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8011314:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011316:	b672      	cpsid	i
    return(int_posture);
 8011318:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 801131a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801131e:	4b0b      	ldr	r3, [pc, #44]	@ (801134c <_tx_mutex_put+0x2c4>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	3b01      	subs	r3, #1
 8011324:	4a09      	ldr	r2, [pc, #36]	@ (801134c <_tx_mutex_put+0x2c4>)
 8011326:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	60da      	str	r2, [r3, #12]
 801132e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011332:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011336:	f383 8810 	msr	PRIMASK, r3
}
 801133a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 801133c:	f000 feb0 	bl	80120a0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8011340:	2300      	movs	r3, #0
 8011342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011346:	e0bd      	b.n	80114c4 <_tx_mutex_put+0x43c>
 8011348:	240017a0 	.word	0x240017a0
 801134c:	24001838 	.word	0x24001838
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d10a      	bne.n	8011374 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2220      	movs	r2, #32
 8011372:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011374:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801137a:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 801137c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801137e:	2b00      	cmp	r3, #0
 8011380:	d10a      	bne.n	8011398 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	631a      	str	r2, [r3, #48]	@ 0x30
 8011396:	e016      	b.n	80113c6 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8011398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801139a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801139e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80113a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80113a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113a8:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80113aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80113b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80113bc:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80113c4:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80113c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80113cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2201      	movs	r2, #1
 80113d4:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80113da:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	1e5a      	subs	r2, r3, #1
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	69db      	ldr	r3, [r3, #28]
 80113ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80113ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d103      	bne.n	80113fa <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	619a      	str	r2, [r3, #24]
 80113f8:	e00e      	b.n	8011418 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80113fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80113fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113fe:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011404:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801140a:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801140c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801140e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011410:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011414:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011416:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011418:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801141a:	2200      	movs	r2, #0
 801141c:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801141e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011420:	2200      	movs	r2, #0
 8011422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011426:	4b2a      	ldr	r3, [pc, #168]	@ (80114d0 <_tx_mutex_put+0x448>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	3301      	adds	r3, #1
 801142c:	4a28      	ldr	r2, [pc, #160]	@ (80114d0 <_tx_mutex_put+0x448>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011434:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	f383 8810 	msr	PRIMASK, r3
}
 801143c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	691b      	ldr	r3, [r3, #16]
 8011442:	2b01      	cmp	r3, #1
 8011444:	d12d      	bne.n	80114a2 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d01c      	beq.n	8011488 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff fcaa 	bl	8010da8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011454:	f3ef 8310 	mrs	r3, PRIMASK
 8011458:	61bb      	str	r3, [r7, #24]
    return(posture);
 801145a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801145c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801145e:	b672      	cpsid	i
    return(int_posture);
 8011460:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8011462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	699b      	ldr	r3, [r3, #24]
 801146a:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 801146c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801146e:	2b00      	cmp	r3, #0
 8011470:	d003      	beq.n	801147a <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8011472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	629a      	str	r2, [r3, #40]	@ 0x28
 801147a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801147e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	f383 8810 	msr	PRIMASK, r3
}
 8011486:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8011488:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801148c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011492:	429a      	cmp	r2, r3
 8011494:	d005      	beq.n	80114a2 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8011496:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801149a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801149e:	f7ff fd35 	bl	8010f0c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80114a2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80114a4:	f000 fe36 	bl	8012114 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80114a8:	2300      	movs	r3, #0
 80114aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80114ae:	e009      	b.n	80114c4 <_tx_mutex_put+0x43c>
 80114b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f383 8810 	msr	PRIMASK, r3
}
 80114bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80114be:	231e      	movs	r3, #30
 80114c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 80114c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3798      	adds	r7, #152	@ 0x98
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	24001838 	.word	0x24001838

080114d4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08e      	sub	sp, #56	@ 0x38
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114de:	f3ef 8310 	mrs	r3, PRIMASK
 80114e2:	623b      	str	r3, [r7, #32]
    return(posture);
 80114e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80114e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80114e8:	b672      	cpsid	i
    return(int_posture);
 80114ea:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80114ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80114f2:	4a33      	ldr	r2, [pc, #204]	@ (80115c0 <_tx_semaphore_cleanup+0xec>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d158      	bne.n	80115aa <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80114fe:	683a      	ldr	r2, [r7, #0]
 8011500:	429a      	cmp	r2, r3
 8011502:	d152      	bne.n	80115aa <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011508:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801150a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801150c:	2b00      	cmp	r3, #0
 801150e:	d04c      	beq.n	80115aa <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8011510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4a2b      	ldr	r2, [pc, #172]	@ (80115c4 <_tx_semaphore_cleanup+0xf0>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d147      	bne.n	80115aa <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801151a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d043      	beq.n	80115aa <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8011528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	1e5a      	subs	r2, r3, #1
 801152e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011530:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153a:	2b00      	cmp	r3, #0
 801153c:	d103      	bne.n	8011546 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801153e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011540:	2200      	movs	r2, #0
 8011542:	60da      	str	r2, [r3, #12]
 8011544:	e013      	b.n	801156e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801154a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011550:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011556:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801155c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801155e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	429a      	cmp	r2, r3
 8011566:	d102      	bne.n	801156e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801156c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011572:	2b06      	cmp	r3, #6
 8011574:	d119      	bne.n	80115aa <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	220d      	movs	r2, #13
 801157a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801157e:	4b12      	ldr	r3, [pc, #72]	@ (80115c8 <_tx_semaphore_cleanup+0xf4>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	3301      	adds	r3, #1
 8011584:	4a10      	ldr	r2, [pc, #64]	@ (80115c8 <_tx_semaphore_cleanup+0xf4>)
 8011586:	6013      	str	r3, [r2, #0]
 8011588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801158a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	f383 8810 	msr	PRIMASK, r3
}
 8011592:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fdbd 	bl	8012114 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801159a:	f3ef 8310 	mrs	r3, PRIMASK
 801159e:	61bb      	str	r3, [r7, #24]
    return(posture);
 80115a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80115a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115a4:	b672      	cpsid	i
    return(int_posture);
 80115a6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80115a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80115aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f383 8810 	msr	PRIMASK, r3
}
 80115b4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80115b6:	bf00      	nop
 80115b8:	3738      	adds	r7, #56	@ 0x38
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	080114d5 	.word	0x080114d5
 80115c4:	53454d41 	.word	0x53454d41
 80115c8:	24001838 	.word	0x24001838

080115cc <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	@ 0x28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80115d8:	221c      	movs	r2, #28
 80115da:	2100      	movs	r1, #0
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f006 ff95 	bl	801850c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115ee:	f3ef 8310 	mrs	r3, PRIMASK
 80115f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80115f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80115f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115f8:	b672      	cpsid	i
    return(int_posture);
 80115fa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80115fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	4a18      	ldr	r2, [pc, #96]	@ (8011664 <_tx_semaphore_create+0x98>)
 8011602:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011604:	4b18      	ldr	r3, [pc, #96]	@ (8011668 <_tx_semaphore_create+0x9c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d109      	bne.n	8011620 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801160c:	4a17      	ldr	r2, [pc, #92]	@ (801166c <_tx_semaphore_create+0xa0>)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	619a      	str	r2, [r3, #24]
 801161e:	e011      	b.n	8011644 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8011620:	4b12      	ldr	r3, [pc, #72]	@ (801166c <_tx_semaphore_create+0xa0>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011626:	6a3b      	ldr	r3, [r7, #32]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	68fa      	ldr	r2, [r7, #12]
 8011636:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	69fa      	ldr	r2, [r7, #28]
 801163c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6a3a      	ldr	r2, [r7, #32]
 8011642:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8011644:	4b08      	ldr	r3, [pc, #32]	@ (8011668 <_tx_semaphore_create+0x9c>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	3301      	adds	r3, #1
 801164a:	4a07      	ldr	r2, [pc, #28]	@ (8011668 <_tx_semaphore_create+0x9c>)
 801164c:	6013      	str	r3, [r2, #0]
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	f383 8810 	msr	PRIMASK, r3
}
 8011658:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3728      	adds	r7, #40	@ 0x28
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	53454d41 	.word	0x53454d41
 8011668:	2400176c 	.word	0x2400176c
 801166c:	24001768 	.word	0x24001768

08011670 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b092      	sub	sp, #72	@ 0x48
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011678:	f3ef 8310 	mrs	r3, PRIMASK
 801167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 801167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8011680:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011682:	b672      	cpsid	i
    return(int_posture);
 8011684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8011686:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 801168e:	4b3d      	ldr	r3, [pc, #244]	@ (8011784 <_tx_semaphore_delete+0x114>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	3b01      	subs	r3, #1
 8011694:	4a3b      	ldr	r2, [pc, #236]	@ (8011784 <_tx_semaphore_delete+0x114>)
 8011696:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011698:	4b3a      	ldr	r3, [pc, #232]	@ (8011784 <_tx_semaphore_delete+0x114>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d103      	bne.n	80116a8 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80116a0:	4b39      	ldr	r3, [pc, #228]	@ (8011788 <_tx_semaphore_delete+0x118>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	e013      	b.n	80116d0 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	695b      	ldr	r3, [r3, #20]
 80116ac:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	699b      	ldr	r3, [r3, #24]
 80116b2:	637b      	str	r3, [r7, #52]	@ 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80116b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116b8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80116ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116be:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80116c0:	4b31      	ldr	r3, [pc, #196]	@ (8011788 <_tx_semaphore_delete+0x118>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d102      	bne.n	80116d0 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80116ca:	4a2f      	ldr	r2, [pc, #188]	@ (8011788 <_tx_semaphore_delete+0x118>)
 80116cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ce:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80116d0:	4b2e      	ldr	r3, [pc, #184]	@ (801178c <_tx_semaphore_delete+0x11c>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3301      	adds	r3, #1
 80116d6:	4a2d      	ldr	r2, [pc, #180]	@ (801178c <_tx_semaphore_delete+0x11c>)
 80116d8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	647b      	str	r3, [r7, #68]	@ 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	691b      	ldr	r3, [r3, #16]
 80116ea:	643b      	str	r3, [r7, #64]	@ 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	611a      	str	r2, [r3, #16]
 80116f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116f4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f8:	f383 8810 	msr	PRIMASK, r3
}
 80116fc:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80116fe:	e024      	b.n	801174a <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8011700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011702:	3b01      	subs	r3, #1
 8011704:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011706:	f3ef 8310 	mrs	r3, PRIMASK
 801170a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801170c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801170e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011710:	b672      	cpsid	i
    return(int_posture);
 8011712:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8011714:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011718:	2200      	movs	r2, #0
 801171a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801171c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801171e:	2201      	movs	r2, #1
 8011720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8011724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011728:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801172a:	4b18      	ldr	r3, [pc, #96]	@ (801178c <_tx_semaphore_delete+0x11c>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	4a16      	ldr	r2, [pc, #88]	@ (801178c <_tx_semaphore_delete+0x11c>)
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011736:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	f383 8810 	msr	PRIMASK, r3
}
 801173e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011740:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011742:	f000 fce7 	bl	8012114 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8011746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011748:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 801174a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801174c:	2b00      	cmp	r3, #0
 801174e:	d1d7      	bne.n	8011700 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011750:	f3ef 8310 	mrs	r3, PRIMASK
 8011754:	613b      	str	r3, [r7, #16]
    return(posture);
 8011756:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8011758:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801175a:	b672      	cpsid	i
    return(int_posture);
 801175c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801175e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8011760:	4b0a      	ldr	r3, [pc, #40]	@ (801178c <_tx_semaphore_delete+0x11c>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3b01      	subs	r3, #1
 8011766:	4a09      	ldr	r2, [pc, #36]	@ (801178c <_tx_semaphore_delete+0x11c>)
 8011768:	6013      	str	r3, [r2, #0]
 801176a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801176c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	f383 8810 	msr	PRIMASK, r3
}
 8011774:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8011776:	f000 fc93 	bl	80120a0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3748      	adds	r7, #72	@ 0x48
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	2400176c 	.word	0x2400176c
 8011788:	24001768 	.word	0x24001768
 801178c:	24001838 	.word	0x24001838

08011790 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08e      	sub	sp, #56	@ 0x38
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801179a:	2300      	movs	r3, #0
 801179c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801179e:	f3ef 8310 	mrs	r3, PRIMASK
 80117a2:	623b      	str	r3, [r7, #32]
    return(posture);
 80117a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80117a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117a8:	b672      	cpsid	i
    return(int_posture);
 80117aa:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80117ac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00a      	beq.n	80117cc <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	1e5a      	subs	r2, r3, #1
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	609a      	str	r2, [r3, #8]
 80117c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	f383 8810 	msr	PRIMASK, r3
}
 80117ca:	e068      	b.n	801189e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d05d      	beq.n	801188e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80117d2:	4b35      	ldr	r3, [pc, #212]	@ (80118a8 <_tx_semaphore_get+0x118>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d008      	beq.n	80117ec <_tx_semaphore_get+0x5c>
 80117da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	f383 8810 	msr	PRIMASK, r3
}
 80117e4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80117e6:	230d      	movs	r3, #13
 80117e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80117ea:	e058      	b.n	801189e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80117ec:	4b2f      	ldr	r3, [pc, #188]	@ (80118ac <_tx_semaphore_get+0x11c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80117f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f4:	4a2e      	ldr	r2, [pc, #184]	@ (80118b0 <_tx_semaphore_get+0x120>)
 80117f6:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80117f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80117fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011800:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011808:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d109      	bne.n	8011828 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011818:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801181c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801181e:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8011820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011824:	675a      	str	r2, [r3, #116]	@ 0x74
 8011826:	e011      	b.n	801184c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011832:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011838:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801183e:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011844:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801184a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8011856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011858:	2206      	movs	r2, #6
 801185a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185e:	2201      	movs	r2, #1
 8011860:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011864:	683a      	ldr	r2, [r7, #0]
 8011866:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011868:	4b0f      	ldr	r3, [pc, #60]	@ (80118a8 <_tx_semaphore_get+0x118>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3301      	adds	r3, #1
 801186e:	4a0e      	ldr	r2, [pc, #56]	@ (80118a8 <_tx_semaphore_get+0x118>)
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011874:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	f383 8810 	msr	PRIMASK, r3
}
 801187c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801187e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011880:	f000 fd48 	bl	8012314 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801188a:	637b      	str	r3, [r7, #52]	@ 0x34
 801188c:	e007      	b.n	801189e <_tx_semaphore_get+0x10e>
 801188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011890:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f383 8810 	msr	PRIMASK, r3
}
 8011898:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801189a:	230d      	movs	r3, #13
 801189c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 801189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3738      	adds	r7, #56	@ 0x38
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	24001838 	.word	0x24001838
 80118ac:	240017a0 	.word	0x240017a0
 80118b0:	080114d5 	.word	0x080114d5

080118b4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b08c      	sub	sp, #48	@ 0x30
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118bc:	f3ef 8310 	mrs	r3, PRIMASK
 80118c0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80118c2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80118c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80118c6:	b672      	cpsid	i
    return(int_posture);
 80118c8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80118ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	691b      	ldr	r3, [r3, #16]
 80118d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80118d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10a      	bne.n	80118ee <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	1c5a      	adds	r2, r3, #1
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	609a      	str	r2, [r3, #8]
 80118e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	f383 8810 	msr	PRIMASK, r3
}
 80118ec:	e033      	b.n	8011956 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80118f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f6:	3b01      	subs	r3, #1
 80118f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80118fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d103      	bne.n	8011908 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	60da      	str	r2, [r3, #12]
 8011906:	e00e      	b.n	8011926 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801190c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6a3a      	ldr	r2, [r7, #32]
 8011912:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011918:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801191a:	6a3b      	ldr	r3, [r7, #32]
 801191c:	69fa      	ldr	r2, [r7, #28]
 801191e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011920:	69fb      	ldr	r3, [r7, #28]
 8011922:	6a3a      	ldr	r2, [r7, #32]
 8011924:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801192a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192e:	2200      	movs	r2, #0
 8011930:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011934:	2200      	movs	r2, #0
 8011936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801193a:	4b09      	ldr	r3, [pc, #36]	@ (8011960 <_tx_semaphore_put+0xac>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3301      	adds	r3, #1
 8011940:	4a07      	ldr	r2, [pc, #28]	@ (8011960 <_tx_semaphore_put+0xac>)
 8011942:	6013      	str	r3, [r2, #0]
 8011944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011946:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f383 8810 	msr	PRIMASK, r3
}
 801194e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011950:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011952:	f000 fbdf 	bl	8012114 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3730      	adds	r7, #48	@ 0x30
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	24001838 	.word	0x24001838

08011964 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b092      	sub	sp, #72	@ 0x48
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
 8011970:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011972:	2300      	movs	r3, #0
 8011974:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011976:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011978:	21ef      	movs	r1, #239	@ 0xef
 801197a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801197c:	f006 fdc6 	bl	801850c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011980:	22b0      	movs	r2, #176	@ 0xb0
 8011982:	2100      	movs	r1, #0
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f006 fdc1 	bl	801850c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	68ba      	ldr	r2, [r7, #8]
 801198e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119a0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80119a6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80119ba:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80119c0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2220      	movs	r2, #32
 80119c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80119ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80119ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119d0:	3b01      	subs	r3, #1
 80119d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119d4:	4413      	add	r3, r2
 80119d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119dc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80119de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d007      	beq.n	80119f6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2200      	movs	r2, #0
 80119ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80119f4:	e006      	b.n	8011a04 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011a00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2203      	movs	r2, #3
 8011a08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	4a48      	ldr	r2, [pc, #288]	@ (8011b30 <_tx_thread_create+0x1cc>)
 8011a0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8011a10:	68fa      	ldr	r2, [r7, #12]
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011a16:	4947      	ldr	r1, [pc, #284]	@ (8011b34 <_tx_thread_create+0x1d0>)
 8011a18:	68f8      	ldr	r0, [r7, #12]
 8011a1a:	f7ee fd01 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8011a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8011a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a28:	b672      	cpsid	i
    return(int_posture);
 8011a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011a2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	4a41      	ldr	r2, [pc, #260]	@ (8011b38 <_tx_thread_create+0x1d4>)
 8011a32:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011a34:	4b41      	ldr	r3, [pc, #260]	@ (8011b3c <_tx_thread_create+0x1d8>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10b      	bne.n	8011a54 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011a3c:	4a40      	ldr	r2, [pc, #256]	@ (8011b40 <_tx_thread_create+0x1dc>)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8011a52:	e016      	b.n	8011a82 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011a54:	4b3a      	ldr	r3, [pc, #232]	@ (8011b40 <_tx_thread_create+0x1dc>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a60:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011a82:	4b2e      	ldr	r3, [pc, #184]	@ (8011b3c <_tx_thread_create+0x1d8>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3301      	adds	r3, #1
 8011a88:	4a2c      	ldr	r2, [pc, #176]	@ (8011b3c <_tx_thread_create+0x1d8>)
 8011a8a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8011b44 <_tx_thread_create+0x1e0>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	3301      	adds	r3, #1
 8011a92:	4a2c      	ldr	r2, [pc, #176]	@ (8011b44 <_tx_thread_create+0x1e0>)
 8011a94:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d129      	bne.n	8011af0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a9c:	f3ef 8305 	mrs	r3, IPSR
 8011aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8011aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011aa4:	4b28      	ldr	r3, [pc, #160]	@ (8011b48 <_tx_thread_create+0x1e4>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011aae:	d30d      	bcc.n	8011acc <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011ab0:	4b26      	ldr	r3, [pc, #152]	@ (8011b4c <_tx_thread_create+0x1e8>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d009      	beq.n	8011ad0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ac0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011aca:	e001      	b.n	8011ad0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011acc:	2300      	movs	r3, #0
 8011ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ad4:	6a3b      	ldr	r3, [r7, #32]
 8011ad6:	f383 8810 	msr	PRIMASK, r3
}
 8011ada:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f000 fb19 	bl	8012114 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d01e      	beq.n	8011b26 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011aec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011aee:	e01a      	b.n	8011b26 <_tx_thread_create+0x1c2>
 8011af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	f383 8810 	msr	PRIMASK, r3
}
 8011afa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011afc:	f3ef 8310 	mrs	r3, PRIMASK
 8011b00:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011b02:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011b04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b06:	b672      	cpsid	i
    return(int_posture);
 8011b08:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011b0a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8011b44 <_tx_thread_create+0x1e0>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3b01      	subs	r3, #1
 8011b12:	4a0c      	ldr	r2, [pc, #48]	@ (8011b44 <_tx_thread_create+0x1e0>)
 8011b14:	6013      	str	r3, [r2, #0]
 8011b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b18:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	f383 8810 	msr	PRIMASK, r3
}
 8011b20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011b22:	f000 fabd 	bl	80120a0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3748      	adds	r7, #72	@ 0x48
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	080128e9 	.word	0x080128e9
 8011b34:	08011e29 	.word	0x08011e29
 8011b38:	54485244 	.word	0x54485244
 8011b3c:	240017ac 	.word	0x240017ac
 8011b40:	240017a8 	.word	0x240017a8
 8011b44:	24001838 	.word	0x24001838
 8011b48:	2400007c 	.word	0x2400007c
 8011b4c:	240017a4 	.word	0x240017a4

08011b50 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b08b      	sub	sp, #44	@ 0x2c
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b60:	617b      	str	r3, [r7, #20]
    return(posture);
 8011b62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011b64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b66:	b672      	cpsid	i
    return(int_posture);
 8011b68:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8011b6a:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d00b      	beq.n	8011b8c <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b78:	2b02      	cmp	r3, #2
 8011b7a:	d007      	beq.n	8011b8c <_tx_thread_delete+0x3c>
 8011b7c:	6a3b      	ldr	r3, [r7, #32]
 8011b7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f383 8810 	msr	PRIMASK, r3
}
 8011b86:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8011b88:	2311      	movs	r3, #17
 8011b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d12d      	bne.n	8011bee <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8011b98:	4b18      	ldr	r3, [pc, #96]	@ (8011bfc <_tx_thread_delete+0xac>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	4a17      	ldr	r2, [pc, #92]	@ (8011bfc <_tx_thread_delete+0xac>)
 8011ba0:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8011ba2:	4b16      	ldr	r3, [pc, #88]	@ (8011bfc <_tx_thread_delete+0xac>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d103      	bne.n	8011bb2 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8011baa:	4b15      	ldr	r3, [pc, #84]	@ (8011c00 <_tx_thread_delete+0xb0>)
 8011bac:	2200      	movs	r2, #0
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	e017      	b.n	8011be2 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011bb8:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bc0:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	69fa      	ldr	r2, [r7, #28]
 8011bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8011bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8011c00 <_tx_thread_delete+0xb0>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d102      	bne.n	8011be2 <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8011bdc:	4a08      	ldr	r2, [pc, #32]	@ (8011c00 <_tx_thread_delete+0xb0>)
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	6013      	str	r3, [r2, #0]
 8011be2:	6a3b      	ldr	r3, [r7, #32]
 8011be4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	f383 8810 	msr	PRIMASK, r3
}
 8011bec:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8011bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	372c      	adds	r7, #44	@ 0x2c
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	240017ac 	.word	0x240017ac
 8011c00:	240017a8 	.word	0x240017a8

08011c04 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c0e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011c10:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011c12:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c14:	b672      	cpsid	i
    return(int_posture);
 8011c16:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8011c18:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011c1a:	4b08      	ldr	r3, [pc, #32]	@ (8011c3c <_tx_thread_identify+0x38>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	613b      	str	r3, [r7, #16]
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f383 8810 	msr	PRIMASK, r3
}
 8011c2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8011c2c:	693b      	ldr	r3, [r7, #16]
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	371c      	adds	r7, #28
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr
 8011c3a:	bf00      	nop
 8011c3c:	240017a0 	.word	0x240017a0

08011c40 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b089      	sub	sp, #36	@ 0x24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011c52:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011c54:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011c56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c58:	b672      	cpsid	i
    return(int_posture);
 8011c5a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8011c5c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d003      	beq.n	8011c6c <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d003      	beq.n	8011c7a <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d003      	beq.n	8011c88 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8011c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d004      	beq.n	8011c98 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8011c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c96:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8011c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d004      	beq.n	8011ca8 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8011ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d003      	beq.n	8011cb6 <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	699a      	ldr	r2, [r3, #24]
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cb4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8011cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d004      	beq.n	8011cc6 <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8011cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cc4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8011cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d003      	beq.n	8011cd4 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	f383 8810 	msr	PRIMASK, r3
}
 8011cde:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3724      	adds	r7, #36	@ 0x24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
	...

08011cf0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011cf4:	4b12      	ldr	r3, [pc, #72]	@ (8011d40 <_tx_thread_initialize+0x50>)
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8011cfa:	4b12      	ldr	r3, [pc, #72]	@ (8011d44 <_tx_thread_initialize+0x54>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8011d00:	4b11      	ldr	r3, [pc, #68]	@ (8011d48 <_tx_thread_initialize+0x58>)
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011d06:	4b11      	ldr	r3, [pc, #68]	@ (8011d4c <_tx_thread_initialize+0x5c>)
 8011d08:	2220      	movs	r2, #32
 8011d0a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8011d0c:	2280      	movs	r2, #128	@ 0x80
 8011d0e:	2100      	movs	r1, #0
 8011d10:	480f      	ldr	r0, [pc, #60]	@ (8011d50 <_tx_thread_initialize+0x60>)
 8011d12:	f006 fbfb 	bl	801850c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8011d16:	4b0f      	ldr	r3, [pc, #60]	@ (8011d54 <_tx_thread_initialize+0x64>)
 8011d18:	2200      	movs	r2, #0
 8011d1a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8011d58 <_tx_thread_initialize+0x68>)
 8011d1e:	2200      	movs	r2, #0
 8011d20:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8011d22:	4b0e      	ldr	r3, [pc, #56]	@ (8011d5c <_tx_thread_initialize+0x6c>)
 8011d24:	2200      	movs	r2, #0
 8011d26:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011d28:	4b0d      	ldr	r3, [pc, #52]	@ (8011d60 <_tx_thread_initialize+0x70>)
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8011d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d64 <_tx_thread_initialize+0x74>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8011d36:	4a0b      	ldr	r2, [pc, #44]	@ (8011d64 <_tx_thread_initialize+0x74>)
 8011d38:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011d3a:	bf00      	nop
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	240017a0 	.word	0x240017a0
 8011d44:	240017a4 	.word	0x240017a4
 8011d48:	240017b0 	.word	0x240017b0
 8011d4c:	240017b4 	.word	0x240017b4
 8011d50:	240017b8 	.word	0x240017b8
 8011d54:	240017a8 	.word	0x240017a8
 8011d58:	240017ac 	.word	0x240017ac
 8011d5c:	24001838 	.word	0x24001838
 8011d60:	2400183c 	.word	0x2400183c
 8011d64:	24001840 	.word	0x24001840

08011d68 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08c      	sub	sp, #48	@ 0x30
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8011d70:	2300      	movs	r3, #0
 8011d72:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d74:	f3ef 8310 	mrs	r3, PRIMASK
 8011d78:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011d7a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011d7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d7e:	b672      	cpsid	i
    return(int_posture);
 8011d80:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011d82:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d88:	2b03      	cmp	r3, #3
 8011d8a:	d12f      	bne.n	8011dec <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d8c:	f3ef 8305 	mrs	r3, IPSR
 8011d90:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011d92:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011d94:	4b21      	ldr	r3, [pc, #132]	@ (8011e1c <_tx_thread_resume+0xb4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011d9e:	d30d      	bcc.n	8011dbc <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011da0:	4b1f      	ldr	r3, [pc, #124]	@ (8011e20 <_tx_thread_resume+0xb8>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d009      	beq.n	8011dc0 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011db0:	627b      	str	r3, [r7, #36]	@ 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011dba:	e001      	b.n	8011dc0 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011dc0:	4b18      	ldr	r3, [pc, #96]	@ (8011e24 <_tx_thread_resume+0xbc>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	4a17      	ldr	r2, [pc, #92]	@ (8011e24 <_tx_thread_resume+0xbc>)
 8011dc8:	6013      	str	r3, [r2, #0]
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	f383 8810 	msr	PRIMASK, r3
}
 8011dd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 f99c 	bl	8012114 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d002      	beq.n	8011de8 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011de6:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8011de8:	2300      	movs	r3, #0
 8011dea:	e012      	b.n	8011e12 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d105      	bne.n	8011e00 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8011dfa:	2319      	movs	r3, #25
 8011dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dfe:	e001      	b.n	8011e04 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8011e00:	2312      	movs	r3, #18
 8011e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e04:	6a3b      	ldr	r3, [r7, #32]
 8011e06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f383 8810 	msr	PRIMASK, r3
}
 8011e0e:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8011e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3730      	adds	r7, #48	@ 0x30
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	2400007c 	.word	0x2400007c
 8011e20:	240017a4 	.word	0x240017a4
 8011e24:	24001838 	.word	0x24001838

08011e28 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b088      	sub	sp, #32
 8011e2c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011e2e:	4b21      	ldr	r3, [pc, #132]	@ (8011eb4 <_tx_thread_shell_entry+0x8c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e38:	69fa      	ldr	r2, [r7, #28]
 8011e3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011e3c:	4610      	mov	r0, r2
 8011e3e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8011e40:	4b1d      	ldr	r3, [pc, #116]	@ (8011eb8 <_tx_thread_shell_entry+0x90>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d003      	beq.n	8011e50 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011e48:	4b1b      	ldr	r3, [pc, #108]	@ (8011eb8 <_tx_thread_shell_entry+0x90>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	69f8      	ldr	r0, [r7, #28]
 8011e4e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e50:	f3ef 8310 	mrs	r3, PRIMASK
 8011e54:	607b      	str	r3, [r7, #4]
    return(posture);
 8011e56:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011e58:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e5a:	b672      	cpsid	i
    return(int_posture);
 8011e5c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8011e5e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011e60:	69fb      	ldr	r3, [r7, #28]
 8011e62:	2201      	movs	r2, #1
 8011e64:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	2201      	movs	r2, #1
 8011e6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011e72:	4b12      	ldr	r3, [pc, #72]	@ (8011ebc <_tx_thread_shell_entry+0x94>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	3301      	adds	r3, #1
 8011e78:	4a10      	ldr	r2, [pc, #64]	@ (8011ebc <_tx_thread_shell_entry+0x94>)
 8011e7a:	6013      	str	r3, [r2, #0]
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	f383 8810 	msr	PRIMASK, r3
}
 8011e86:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8011e88:	f3ef 8314 	mrs	r3, CONTROL
 8011e8c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8011e8e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011e90:	617b      	str	r3, [r7, #20]
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	f023 0304 	bic.w	r3, r3, #4
 8011e98:	617b      	str	r3, [r7, #20]
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	f383 8814 	msr	CONTROL, r3
}
 8011ea4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8011ea6:	69f8      	ldr	r0, [r7, #28]
 8011ea8:	f000 fa34 	bl	8012314 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011eac:	bf00      	nop
 8011eae:	3720      	adds	r7, #32
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	240017a0 	.word	0x240017a0
 8011eb8:	2400183c 	.word	0x2400183c
 8011ebc:	24001838 	.word	0x24001838

08011ec0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08e      	sub	sp, #56	@ 0x38
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8011ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8011ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8011ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ed2:	b672      	cpsid	i
    return(int_posture);
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011ed6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011ed8:	4b35      	ldr	r3, [pc, #212]	@ (8011fb0 <_tx_thread_sleep+0xf0>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8011ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d108      	bne.n	8011ef6 <_tx_thread_sleep+0x36>
 8011ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ee6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ee8:	6a3b      	ldr	r3, [r7, #32]
 8011eea:	f383 8810 	msr	PRIMASK, r3
}
 8011eee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011ef0:	2313      	movs	r3, #19
 8011ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ef4:	e056      	b.n	8011fa4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ef6:	f3ef 8305 	mrs	r3, IPSR
 8011efa:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011efc:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011efe:	4b2d      	ldr	r3, [pc, #180]	@ (8011fb4 <_tx_thread_sleep+0xf4>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d008      	beq.n	8011f1a <_tx_thread_sleep+0x5a>
 8011f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f0a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	f383 8810 	msr	PRIMASK, r3
}
 8011f12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011f14:	2313      	movs	r3, #19
 8011f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f18:	e044      	b.n	8011fa4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8011f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f1c:	4a26      	ldr	r2, [pc, #152]	@ (8011fb8 <_tx_thread_sleep+0xf8>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d108      	bne.n	8011f34 <_tx_thread_sleep+0x74>
 8011f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	f383 8810 	msr	PRIMASK, r3
}
 8011f2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011f2e:	2313      	movs	r3, #19
 8011f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f32:	e037      	b.n	8011fa4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d108      	bne.n	8011f4c <_tx_thread_sleep+0x8c>
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	f383 8810 	msr	PRIMASK, r3
}
 8011f44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8011f46:	2300      	movs	r3, #0
 8011f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f4a:	e02b      	b.n	8011fa4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8011fbc <_tx_thread_sleep+0xfc>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d008      	beq.n	8011f66 <_tx_thread_sleep+0xa6>
 8011f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f383 8810 	msr	PRIMASK, r3
}
 8011f5e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8011f60:	2313      	movs	r3, #19
 8011f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f64:	e01e      	b.n	8011fa4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8011f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f68:	2204      	movs	r2, #4
 8011f6a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f6e:	2201      	movs	r2, #1
 8011f70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f74:	2200      	movs	r2, #0
 8011f76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011f80:	4b0e      	ldr	r3, [pc, #56]	@ (8011fbc <_tx_thread_sleep+0xfc>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3301      	adds	r3, #1
 8011f86:	4a0d      	ldr	r2, [pc, #52]	@ (8011fbc <_tx_thread_sleep+0xfc>)
 8011f88:	6013      	str	r3, [r2, #0]
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f8c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	f383 8810 	msr	PRIMASK, r3
}
 8011f94:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011f96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f98:	f000 f9bc 	bl	8012314 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3738      	adds	r7, #56	@ 0x38
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	240017a0 	.word	0x240017a0
 8011fb4:	2400007c 	.word	0x2400007c
 8011fb8:	240018e8 	.word	0x240018e8
 8011fbc:	24001838 	.word	0x24001838

08011fc0 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b08a      	sub	sp, #40	@ 0x28
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8011fcc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011fce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011fd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011fd2:	b672      	cpsid	i
    return(int_posture);
 8011fd4:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011fd6:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8012094 <_tx_thread_suspend+0xd4>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d130      	bne.n	8012048 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011fea:	f3ef 8305 	mrs	r3, IPSR
 8011fee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011ff0:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8011ff2:	4b29      	ldr	r3, [pc, #164]	@ (8012098 <_tx_thread_suspend+0xd8>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d109      	bne.n	8012010 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8011ffc:	69fa      	ldr	r2, [r7, #28]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	429a      	cmp	r2, r3
 8012002:	d105      	bne.n	8012010 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8012004:	4b25      	ldr	r3, [pc, #148]	@ (801209c <_tx_thread_suspend+0xdc>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d001      	beq.n	8012010 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 801200c:	2314      	movs	r3, #20
 801200e:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8012010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012012:	2b00      	cmp	r3, #0
 8012014:	d132      	bne.n	801207c <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2203      	movs	r2, #3
 801201a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2201      	movs	r2, #1
 8012020:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012028:	4b1c      	ldr	r3, [pc, #112]	@ (801209c <_tx_thread_suspend+0xdc>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	3301      	adds	r3, #1
 801202e:	4a1b      	ldr	r2, [pc, #108]	@ (801209c <_tx_thread_suspend+0xdc>)
 8012030:	6013      	str	r3, [r2, #0]
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f383 8810 	msr	PRIMASK, r3
}
 801203c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 f968 	bl	8012314 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8012044:	2300      	movs	r3, #0
 8012046:	e020      	b.n	801208a <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801204c:	2b02      	cmp	r3, #2
 801204e:	d102      	bne.n	8012056 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012050:	2314      	movs	r3, #20
 8012052:	627b      	str	r3, [r7, #36]	@ 0x24
 8012054:	e012      	b.n	801207c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801205a:	2b01      	cmp	r3, #1
 801205c:	d102      	bne.n	8012064 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 801205e:	2314      	movs	r3, #20
 8012060:	627b      	str	r3, [r7, #36]	@ 0x24
 8012062:	e00b      	b.n	801207c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012068:	2b03      	cmp	r3, #3
 801206a:	d102      	bne.n	8012072 <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 801206c:	2300      	movs	r3, #0
 801206e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012070:	e004      	b.n	801207c <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8012078:	2300      	movs	r3, #0
 801207a:	627b      	str	r3, [r7, #36]	@ 0x24
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	f383 8810 	msr	PRIMASK, r3
}
 8012086:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8012088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 801208a:	4618      	mov	r0, r3
 801208c:	3728      	adds	r7, #40	@ 0x28
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	240017a0 	.word	0x240017a0
 8012098:	2400007c 	.word	0x2400007c
 801209c:	24001838 	.word	0x24001838

080120a0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b089      	sub	sp, #36	@ 0x24
 80120a4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80120a6:	4b17      	ldr	r3, [pc, #92]	@ (8012104 <_tx_thread_system_preempt_check+0x64>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d121      	bne.n	80120f6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80120b2:	4b15      	ldr	r3, [pc, #84]	@ (8012108 <_tx_thread_system_preempt_check+0x68>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80120b8:	4b14      	ldr	r3, [pc, #80]	@ (801210c <_tx_thread_system_preempt_check+0x6c>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80120be:	69ba      	ldr	r2, [r7, #24]
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d017      	beq.n	80120f6 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80120c6:	4b12      	ldr	r3, [pc, #72]	@ (8012110 <_tx_thread_system_preempt_check+0x70>)
 80120c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120ce:	f3ef 8305 	mrs	r3, IPSR
 80120d2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80120d4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d10c      	bne.n	80120f4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120da:	f3ef 8310 	mrs	r3, PRIMASK
 80120de:	60fb      	str	r3, [r7, #12]
    return(posture);
 80120e0:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80120e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80120e4:	b662      	cpsie	i
}
 80120e6:	bf00      	nop
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f383 8810 	msr	PRIMASK, r3
}
 80120f2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80120f4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80120f6:	bf00      	nop
 80120f8:	3724      	adds	r7, #36	@ 0x24
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	24001838 	.word	0x24001838
 8012108:	240017a0 	.word	0x240017a0
 801210c:	240017a4 	.word	0x240017a4
 8012110:	e000ed04 	.word	0xe000ed04

08012114 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b096      	sub	sp, #88	@ 0x58
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801211c:	f3ef 8310 	mrs	r3, PRIMASK
 8012120:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8012122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8012124:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012126:	b672      	cpsid	i
    return(int_posture);
 8012128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801212a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012130:	2b00      	cmp	r3, #0
 8012132:	d005      	beq.n	8012140 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	334c      	adds	r3, #76	@ 0x4c
 8012138:	4618      	mov	r0, r3
 801213a:	f000 fd11 	bl	8012b60 <_tx_timer_system_deactivate>
 801213e:	e002      	b.n	8012146 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012146:	4b6c      	ldr	r3, [pc, #432]	@ (80122f8 <_tx_thread_system_resume+0x1e4>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3b01      	subs	r3, #1
 801214c:	4a6a      	ldr	r2, [pc, #424]	@ (80122f8 <_tx_thread_system_resume+0x1e4>)
 801214e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012154:	2b00      	cmp	r3, #0
 8012156:	f040 8083 	bne.w	8012260 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 8097 	beq.w	8012292 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012168:	2b00      	cmp	r3, #0
 801216a:	d172      	bne.n	8012252 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012176:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8012178:	4a60      	ldr	r2, [pc, #384]	@ (80122fc <_tx_thread_system_resume+0x1e8>)
 801217a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012180:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8012182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012184:	2b00      	cmp	r3, #0
 8012186:	d154      	bne.n	8012232 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8012188:	495c      	ldr	r1, [pc, #368]	@ (80122fc <_tx_thread_system_resume+0x1e8>)
 801218a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801219e:	2201      	movs	r2, #1
 80121a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121a2:	fa02 f303 	lsl.w	r3, r2, r3
 80121a6:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80121a8:	4b55      	ldr	r3, [pc, #340]	@ (8012300 <_tx_thread_system_resume+0x1ec>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121ae:	4313      	orrs	r3, r2
 80121b0:	4a53      	ldr	r2, [pc, #332]	@ (8012300 <_tx_thread_system_resume+0x1ec>)
 80121b2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80121b4:	4b53      	ldr	r3, [pc, #332]	@ (8012304 <_tx_thread_system_resume+0x1f0>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d269      	bcs.n	8012292 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80121be:	4a51      	ldr	r2, [pc, #324]	@ (8012304 <_tx_thread_system_resume+0x1f0>)
 80121c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121c2:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80121c4:	4b50      	ldr	r3, [pc, #320]	@ (8012308 <_tx_thread_system_resume+0x1f4>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80121ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d103      	bne.n	80121d8 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80121d0:	4a4d      	ldr	r2, [pc, #308]	@ (8012308 <_tx_thread_system_resume+0x1f4>)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6013      	str	r3, [r2, #0]
 80121d6:	e05c      	b.n	8012292 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80121d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121de:	429a      	cmp	r2, r3
 80121e0:	d257      	bcs.n	8012292 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80121e2:	4a49      	ldr	r2, [pc, #292]	@ (8012308 <_tx_thread_system_resume+0x1f4>)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6013      	str	r3, [r2, #0]
 80121e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ee:	f383 8810 	msr	PRIMASK, r3
}
 80121f2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80121f4:	4b40      	ldr	r3, [pc, #256]	@ (80122f8 <_tx_thread_system_resume+0x1e4>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 80121fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d174      	bne.n	80122ea <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012200:	4b42      	ldr	r3, [pc, #264]	@ (801230c <_tx_thread_system_resume+0x1f8>)
 8012202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012206:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012208:	f3ef 8305 	mrs	r3, IPSR
 801220c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 801220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10c      	bne.n	801222e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012214:	f3ef 8310 	mrs	r3, PRIMASK
 8012218:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 801221c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801221e:	b662      	cpsie	i
}
 8012220:	bf00      	nop
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	f383 8810 	msr	PRIMASK, r3
}
 801222c:	bf00      	nop
}
 801222e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8012230:	e05b      	b.n	80122ea <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012236:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801223e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012248:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801224e:	621a      	str	r2, [r3, #32]
 8012250:	e01f      	b.n	8012292 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2203      	movs	r2, #3
 801225c:	631a      	str	r2, [r3, #48]	@ 0x30
 801225e:	e018      	b.n	8012292 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012264:	2b01      	cmp	r3, #1
 8012266:	d014      	beq.n	8012292 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801226c:	2b02      	cmp	r3, #2
 801226e:	d010      	beq.n	8012292 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2200      	movs	r2, #0
 8012282:	631a      	str	r2, [r3, #48]	@ 0x30
 8012284:	e005      	b.n	8012292 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2200      	movs	r2, #0
 801228a:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2203      	movs	r2, #3
 8012290:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012292:	4b1f      	ldr	r3, [pc, #124]	@ (8012310 <_tx_thread_system_resume+0x1fc>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801229a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f383 8810 	msr	PRIMASK, r3
}
 80122a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80122a4:	4b18      	ldr	r3, [pc, #96]	@ (8012308 <_tx_thread_system_resume+0x1f4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d020      	beq.n	80122f0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80122ae:	4b12      	ldr	r3, [pc, #72]	@ (80122f8 <_tx_thread_system_resume+0x1e4>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80122b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d11a      	bne.n	80122f0 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80122ba:	4b14      	ldr	r3, [pc, #80]	@ (801230c <_tx_thread_system_resume+0x1f8>)
 80122bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122c2:	f3ef 8305 	mrs	r3, IPSR
 80122c6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80122c8:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d10f      	bne.n	80122ee <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122ce:	f3ef 8310 	mrs	r3, PRIMASK
 80122d2:	613b      	str	r3, [r7, #16]
    return(posture);
 80122d4:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80122d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80122d8:	b662      	cpsie	i
}
 80122da:	bf00      	nop
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	f383 8810 	msr	PRIMASK, r3
}
 80122e6:	bf00      	nop
}
 80122e8:	e001      	b.n	80122ee <_tx_thread_system_resume+0x1da>
                                return;
 80122ea:	bf00      	nop
 80122ec:	e000      	b.n	80122f0 <_tx_thread_system_resume+0x1dc>
 80122ee:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80122f0:	3758      	adds	r7, #88	@ 0x58
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	24001838 	.word	0x24001838
 80122fc:	240017b8 	.word	0x240017b8
 8012300:	240017b0 	.word	0x240017b0
 8012304:	240017b4 	.word	0x240017b4
 8012308:	240017a4 	.word	0x240017a4
 801230c:	e000ed04 	.word	0xe000ed04
 8012310:	240017a0 	.word	0x240017a0

08012314 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b09e      	sub	sp, #120	@ 0x78
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801231c:	4b81      	ldr	r3, [pc, #516]	@ (8012524 <_tx_thread_system_suspend+0x210>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012322:	f3ef 8310 	mrs	r3, PRIMASK
 8012326:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8012328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 801232a:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801232c:	b672      	cpsid	i
    return(int_posture);
 801232e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012330:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012336:	429a      	cmp	r2, r3
 8012338:	d112      	bne.n	8012360 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801233e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012342:	2b00      	cmp	r3, #0
 8012344:	d008      	beq.n	8012358 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8012346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234c:	d004      	beq.n	8012358 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	334c      	adds	r3, #76	@ 0x4c
 8012352:	4618      	mov	r0, r3
 8012354:	f000 fba2 	bl	8012a9c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	69db      	ldr	r3, [r3, #28]
 801235c:	4a72      	ldr	r2, [pc, #456]	@ (8012528 <_tx_thread_system_suspend+0x214>)
 801235e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012360:	4b72      	ldr	r3, [pc, #456]	@ (801252c <_tx_thread_system_suspend+0x218>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	3b01      	subs	r3, #1
 8012366:	4a71      	ldr	r2, [pc, #452]	@ (801252c <_tx_thread_system_suspend+0x218>)
 8012368:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801236e:	2b01      	cmp	r3, #1
 8012370:	f040 80a6 	bne.w	80124c0 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801237e:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8012386:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	429a      	cmp	r2, r3
 801238c:	d015      	beq.n	80123ba <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012392:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012398:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801239a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801239c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801239e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80123a0:	4a63      	ldr	r2, [pc, #396]	@ (8012530 <_tx_thread_system_suspend+0x21c>)
 80123a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d157      	bne.n	801245e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80123ae:	4960      	ldr	r1, [pc, #384]	@ (8012530 <_tx_thread_system_suspend+0x21c>)
 80123b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80123b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80123b8:	e051      	b.n	801245e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80123ba:	4a5d      	ldr	r2, [pc, #372]	@ (8012530 <_tx_thread_system_suspend+0x21c>)
 80123bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123be:	2100      	movs	r1, #0
 80123c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80123c4:	2201      	movs	r2, #1
 80123c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123c8:	fa02 f303 	lsl.w	r3, r2, r3
 80123cc:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80123ce:	4b59      	ldr	r3, [pc, #356]	@ (8012534 <_tx_thread_system_suspend+0x220>)
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80123d4:	43db      	mvns	r3, r3
 80123d6:	4013      	ands	r3, r2
 80123d8:	4a56      	ldr	r2, [pc, #344]	@ (8012534 <_tx_thread_system_suspend+0x220>)
 80123da:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80123dc:	2300      	movs	r3, #0
 80123de:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80123e0:	4b54      	ldr	r3, [pc, #336]	@ (8012534 <_tx_thread_system_suspend+0x220>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80123e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d12b      	bne.n	8012444 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80123ec:	4b52      	ldr	r3, [pc, #328]	@ (8012538 <_tx_thread_system_suspend+0x224>)
 80123ee:	2220      	movs	r2, #32
 80123f0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80123f2:	4b52      	ldr	r3, [pc, #328]	@ (801253c <_tx_thread_system_suspend+0x228>)
 80123f4:	2200      	movs	r2, #0
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123fa:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123fe:	f383 8810 	msr	PRIMASK, r3
}
 8012402:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012404:	4b49      	ldr	r3, [pc, #292]	@ (801252c <_tx_thread_system_suspend+0x218>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 801240a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801240c:	2b00      	cmp	r3, #0
 801240e:	f040 8081 	bne.w	8012514 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012412:	4b4b      	ldr	r3, [pc, #300]	@ (8012540 <_tx_thread_system_suspend+0x22c>)
 8012414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012418:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801241a:	f3ef 8305 	mrs	r3, IPSR
 801241e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8012420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10c      	bne.n	8012440 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012426:	f3ef 8310 	mrs	r3, PRIMASK
 801242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 801242c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 801242e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012430:	b662      	cpsie	i
}
 8012432:	bf00      	nop
 8012434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012436:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801243a:	f383 8810 	msr	PRIMASK, r3
}
 801243e:	bf00      	nop
}
 8012440:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8012442:	e067      	b.n	8012514 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012446:	fa93 f3a3 	rbit	r3, r3
 801244a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801244c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801244e:	fab3 f383 	clz	r3, r3
 8012452:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012454:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012458:	4413      	add	r3, r2
 801245a:	4a37      	ldr	r2, [pc, #220]	@ (8012538 <_tx_thread_system_suspend+0x224>)
 801245c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801245e:	4b37      	ldr	r3, [pc, #220]	@ (801253c <_tx_thread_system_suspend+0x228>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d12b      	bne.n	80124c0 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012468:	4b33      	ldr	r3, [pc, #204]	@ (8012538 <_tx_thread_system_suspend+0x224>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4a30      	ldr	r2, [pc, #192]	@ (8012530 <_tx_thread_system_suspend+0x21c>)
 801246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012472:	4a32      	ldr	r2, [pc, #200]	@ (801253c <_tx_thread_system_suspend+0x228>)
 8012474:	6013      	str	r3, [r2, #0]
 8012476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012478:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247c:	f383 8810 	msr	PRIMASK, r3
}
 8012480:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012482:	4b2a      	ldr	r3, [pc, #168]	@ (801252c <_tx_thread_system_suspend+0x218>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8012488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801248a:	2b00      	cmp	r3, #0
 801248c:	d144      	bne.n	8012518 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801248e:	4b2c      	ldr	r3, [pc, #176]	@ (8012540 <_tx_thread_system_suspend+0x22c>)
 8012490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012494:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012496:	f3ef 8305 	mrs	r3, IPSR
 801249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 801249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10c      	bne.n	80124bc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124a2:	f3ef 8310 	mrs	r3, PRIMASK
 80124a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80124a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 80124aa:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80124ac:	b662      	cpsie	i
}
 80124ae:	bf00      	nop
 80124b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124b4:	6a3b      	ldr	r3, [r7, #32]
 80124b6:	f383 8810 	msr	PRIMASK, r3
}
 80124ba:	bf00      	nop
}
 80124bc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80124be:	e02b      	b.n	8012518 <_tx_thread_system_suspend+0x204>
 80124c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	f383 8810 	msr	PRIMASK, r3
}
 80124ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80124cc:	4b1b      	ldr	r3, [pc, #108]	@ (801253c <_tx_thread_system_suspend+0x228>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d022      	beq.n	801251c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80124d6:	4b15      	ldr	r3, [pc, #84]	@ (801252c <_tx_thread_system_suspend+0x218>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 80124dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d11c      	bne.n	801251c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80124e2:	4b17      	ldr	r3, [pc, #92]	@ (8012540 <_tx_thread_system_suspend+0x22c>)
 80124e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124ea:	f3ef 8305 	mrs	r3, IPSR
 80124ee:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80124f0:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10c      	bne.n	8012510 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124f6:	f3ef 8310 	mrs	r3, PRIMASK
 80124fa:	617b      	str	r3, [r7, #20]
    return(posture);
 80124fc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80124fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012500:	b662      	cpsie	i
}
 8012502:	bf00      	nop
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f383 8810 	msr	PRIMASK, r3
}
 801250e:	bf00      	nop
}
 8012510:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012512:	e003      	b.n	801251c <_tx_thread_system_suspend+0x208>
                return;
 8012514:	bf00      	nop
 8012516:	e002      	b.n	801251e <_tx_thread_system_suspend+0x20a>
            return;
 8012518:	bf00      	nop
 801251a:	e000      	b.n	801251e <_tx_thread_system_suspend+0x20a>
    return;
 801251c:	bf00      	nop
}
 801251e:	3778      	adds	r7, #120	@ 0x78
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	240017a0 	.word	0x240017a0
 8012528:	24001da4 	.word	0x24001da4
 801252c:	24001838 	.word	0x24001838
 8012530:	240017b8 	.word	0x240017b8
 8012534:	240017b0 	.word	0x240017b0
 8012538:	240017b4 	.word	0x240017b4
 801253c:	240017a4 	.word	0x240017a4
 8012540:	e000ed04 	.word	0xe000ed04

08012544 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b0ac      	sub	sp, #176	@ 0xb0
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 801254c:	2300      	movs	r3, #0
 801254e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012552:	f3ef 8310 	mrs	r3, PRIMASK
 8012556:	67fb      	str	r3, [r7, #124]	@ 0x7c
    return(posture);
 8012558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
    int_posture = __get_interrupt_posture();
 801255a:	67bb      	str	r3, [r7, #120]	@ 0x78
    __asm__ volatile ("CPSID i" : : : "memory");
 801255c:	b672      	cpsid	i
    return(int_posture);
 801255e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 8012560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	334c      	adds	r3, #76	@ 0x4c
 8012568:	4618      	mov	r0, r3
 801256a:	f000 faf9 	bl	8012b60 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012572:	2b02      	cmp	r3, #2
 8012574:	d10a      	bne.n	801258c <_tx_thread_terminate+0x48>
 8012576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801257a:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801257c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801257e:	f383 8810 	msr	PRIMASK, r3
}
 8012582:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 8012584:	2300      	movs	r3, #0
 8012586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801258a:	e148      	b.n	801281e <_tx_thread_terminate+0x2da>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012590:	2b01      	cmp	r3, #1
 8012592:	f000 813d 	beq.w	8012810 <_tx_thread_terminate+0x2cc>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012596:	4ba6      	ldr	r3, [pc, #664]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3301      	adds	r3, #1
 801259c:	4aa4      	ldr	r2, [pc, #656]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 801259e:	6013      	str	r3, [r2, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d17a      	bne.n	801269e <_tx_thread_terminate+0x15a>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2202      	movs	r2, #2
 80125ac:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2201      	movs	r2, #1
 80125b2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 80125ba:	4b9d      	ldr	r3, [pc, #628]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	3301      	adds	r3, #1
 80125c0:	4a9b      	ldr	r2, [pc, #620]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 80125c2:	6013      	str	r3, [r2, #0]
 80125c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80125cc:	f383 8810 	msr	PRIMASK, r3
}
 80125d0:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125d2:	f3ef 8305 	mrs	r3, IPSR
 80125d6:	673b      	str	r3, [r7, #112]	@ 0x70
    return(ipsr_value);
 80125d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70

            /* Restore interrupts.  */
            TX_RESTORE

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 80125da:	4b96      	ldr	r3, [pc, #600]	@ (8012834 <_tx_thread_terminate+0x2f0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4313      	orrs	r3, r2
 80125e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80125e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d118      	bne.n	801261e <_tx_thread_terminate+0xda>
 80125ec:	4b92      	ldr	r3, [pc, #584]	@ (8012838 <_tx_thread_terminate+0x2f4>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d113      	bne.n	801261e <_tx_thread_terminate+0xda>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80125f6:	f3ef 8314 	mrs	r3, CONTROL
 80125fa:	667b      	str	r3, [r7, #100]	@ 0x64
    return(control_value);
 80125fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012606:	f023 0304 	bic.w	r3, r3, #4
 801260a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801260e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012612:	66bb      	str	r3, [r7, #104]	@ 0x68
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8012614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012616:	f383 8814 	msr	CONTROL, r3
}
 801261a:	bf00      	nop
 801261c:	e032      	b.n	8012684 <_tx_thread_terminate+0x140>
 801261e:	4b87      	ldr	r3, [pc, #540]	@ (801283c <_tx_thread_terminate+0x2f8>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012632:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012636:	2b01      	cmp	r3, #1
 8012638:	d124      	bne.n	8012684 <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801263a:	f3ef 8314 	mrs	r3, CONTROL
 801263e:	663b      	str	r3, [r7, #96]	@ 0x60
    return(control_value);
 8012640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801264a:	f003 0304 	and.w	r3, r3, #4
 801264e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012652:	eeb0 0a40 	vmov.f32	s0, s0
 8012656:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801265a:	2b00      	cmp	r3, #0
 801265c:	d112      	bne.n	8012684 <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801265e:	f3ef 8314 	mrs	r3, CONTROL
 8012662:	65bb      	str	r3, [r7, #88]	@ 0x58
    return(control_value);
 8012664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801266a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801266e:	f023 0304 	bic.w	r3, r3, #4
 8012672:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012676:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801267a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801267c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801267e:	f383 8814 	msr	CONTROL, r3
}
 8012682:	bf00      	nop
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7ff fe45 	bl	8012314 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801268a:	f3ef 8310 	mrs	r3, PRIMASK
 801268e:	657b      	str	r3, [r7, #84]	@ 0x54
    return(posture);
 8012690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    int_posture = __get_interrupt_posture();
 8012692:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8012694:	b672      	cpsid	i
    return(int_posture);
 8012696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50

            /* Disable interrupts.  */
            TX_DISABLE
 8012698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801269c:	e094      	b.n	80127c8 <_tx_thread_terminate+0x284>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2202      	movs	r2, #2
 80126a2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80126ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80126b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80126bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126c4:	f383 8810 	msr	PRIMASK, r3
}
 80126c8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 80126ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d005      	beq.n	80126de <_tx_thread_terminate+0x19a>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 80126d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80126de:	f3ef 8310 	mrs	r3, PRIMASK
 80126e2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 80126e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 80126e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80126e8:	b672      	cpsid	i
    return(int_posture);
 80126ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 80126ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80126f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126fa:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126fe:	f383 8810 	msr	PRIMASK, r3
}
 8012702:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012704:	f3ef 8305 	mrs	r3, IPSR
 8012708:	64bb      	str	r3, [r7, #72]	@ 0x48
    return(ipsr_value);
 801270a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 801270c:	4b49      	ldr	r3, [pc, #292]	@ (8012834 <_tx_thread_terminate+0x2f0>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4313      	orrs	r3, r2
 8012712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012716:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801271a:	2b00      	cmp	r3, #0
 801271c:	d118      	bne.n	8012750 <_tx_thread_terminate+0x20c>
 801271e:	4b46      	ldr	r3, [pc, #280]	@ (8012838 <_tx_thread_terminate+0x2f4>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	429a      	cmp	r2, r3
 8012726:	d113      	bne.n	8012750 <_tx_thread_terminate+0x20c>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8012728:	f3ef 8314 	mrs	r3, CONTROL
 801272c:	637b      	str	r3, [r7, #52]	@ 0x34
    return(control_value);
 801272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012738:	f023 0304 	bic.w	r3, r3, #4
 801273c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012744:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8012746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012748:	f383 8814 	msr	CONTROL, r3
}
 801274c:	bf00      	nop
 801274e:	e032      	b.n	80127b6 <_tx_thread_terminate+0x272>
 8012750:	4b3a      	ldr	r3, [pc, #232]	@ (801283c <_tx_thread_terminate+0x2f8>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801275c:	f003 0301 	and.w	r3, r3, #1
 8012760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012768:	2b01      	cmp	r3, #1
 801276a:	d124      	bne.n	80127b6 <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801276c:	f3ef 8314 	mrs	r3, CONTROL
 8012770:	633b      	str	r3, [r7, #48]	@ 0x30
    return(control_value);
 8012772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012778:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801277c:	f003 0304 	and.w	r3, r3, #4
 8012780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012784:	eeb0 0a40 	vmov.f32	s0, s0
 8012788:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801278c:	2b00      	cmp	r3, #0
 801278e:	d112      	bne.n	80127b6 <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8012790:	f3ef 8314 	mrs	r3, CONTROL
 8012794:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(control_value);
 8012796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801279c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127a0:	f023 0304 	bic.w	r3, r3, #4
 80127a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80127ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b0:	f383 8814 	msr	CONTROL, r3
}
 80127b4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127b6:	f3ef 8310 	mrs	r3, PRIMASK
 80127ba:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80127bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80127be:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127c0:	b672      	cpsid	i
    return(int_posture);
 80127c2:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 80127c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127cc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	f383 8810 	msr	PRIMASK, r3
}
 80127d4:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 80127d6:	4b1a      	ldr	r3, [pc, #104]	@ (8012840 <_tx_thread_terminate+0x2fc>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d003      	beq.n	80127e6 <_tx_thread_terminate+0x2a2>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 80127de:	4b18      	ldr	r3, [pc, #96]	@ (8012840 <_tx_thread_terminate+0x2fc>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127e6:	f3ef 8310 	mrs	r3, PRIMASK
 80127ea:	617b      	str	r3, [r7, #20]
    return(posture);
 80127ec:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80127ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127f0:	b672      	cpsid	i
    return(int_posture);
 80127f2:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80127f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 80127f8:	4b0d      	ldr	r3, [pc, #52]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	3b01      	subs	r3, #1
 80127fe:	4a0c      	ldr	r2, [pc, #48]	@ (8012830 <_tx_thread_terminate+0x2ec>)
 8012800:	6013      	str	r3, [r2, #0]
 8012802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012806:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	f383 8810 	msr	PRIMASK, r3
}
 801280e:	e006      	b.n	801281e <_tx_thread_terminate+0x2da>
 8012810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012814:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	f383 8810 	msr	PRIMASK, r3
}
 801281c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801281e:	f7ff fc3f 	bl	80120a0 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 8012822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
}
 8012826:	4618      	mov	r0, r3
 8012828:	37b0      	adds	r7, #176	@ 0xb0
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	24001838 	.word	0x24001838
 8012834:	2400007c 	.word	0x2400007c
 8012838:	240017a0 	.word	0x240017a0
 801283c:	e000ef34 	.word	0xe000ef34
 8012840:	2400183c 	.word	0x2400183c

08012844 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012844:	b480      	push	{r7}
 8012846:	b087      	sub	sp, #28
 8012848:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801284a:	4b21      	ldr	r3, [pc, #132]	@ (80128d0 <_tx_thread_time_slice+0x8c>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012850:	f3ef 8310 	mrs	r3, PRIMASK
 8012854:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012856:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8012858:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801285a:	b672      	cpsid	i
    return(int_posture);
 801285c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801285e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012860:	4b1c      	ldr	r3, [pc, #112]	@ (80128d4 <_tx_thread_time_slice+0x90>)
 8012862:	2200      	movs	r2, #0
 8012864:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d024      	beq.n	80128b6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012870:	2b00      	cmp	r3, #0
 8012872:	d120      	bne.n	80128b6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	69da      	ldr	r2, [r3, #28]
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	4a15      	ldr	r2, [pc, #84]	@ (80128d8 <_tx_thread_time_slice+0x94>)
 8012882:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	6a1b      	ldr	r3, [r3, #32]
 8012888:	697a      	ldr	r2, [r7, #20]
 801288a:	429a      	cmp	r2, r3
 801288c:	d013      	beq.n	80128b6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012896:	429a      	cmp	r2, r3
 8012898:	d10d      	bne.n	80128b6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801289e:	697a      	ldr	r2, [r7, #20]
 80128a0:	6a12      	ldr	r2, [r2, #32]
 80128a2:	490e      	ldr	r1, [pc, #56]	@ (80128dc <_tx_thread_time_slice+0x98>)
 80128a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80128a8:	4b0d      	ldr	r3, [pc, #52]	@ (80128e0 <_tx_thread_time_slice+0x9c>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a0b      	ldr	r2, [pc, #44]	@ (80128dc <_tx_thread_time_slice+0x98>)
 80128ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128b2:	4a0c      	ldr	r2, [pc, #48]	@ (80128e4 <_tx_thread_time_slice+0xa0>)
 80128b4:	6013      	str	r3, [r2, #0]
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f383 8810 	msr	PRIMASK, r3
}
 80128c0:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80128c2:	bf00      	nop
 80128c4:	371c      	adds	r7, #28
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	240017a0 	.word	0x240017a0
 80128d4:	24001848 	.word	0x24001848
 80128d8:	24001da4 	.word	0x24001da4
 80128dc:	240017b8 	.word	0x240017b8
 80128e0:	240017b4 	.word	0x240017b4
 80128e4:	240017a4 	.word	0x240017a4

080128e8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08a      	sub	sp, #40	@ 0x28
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128f4:	f3ef 8310 	mrs	r3, PRIMASK
 80128f8:	617b      	str	r3, [r7, #20]
    return(posture);
 80128fa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80128fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80128fe:	b672      	cpsid	i
    return(int_posture);
 8012900:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8012902:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012908:	2b04      	cmp	r3, #4
 801290a:	d10e      	bne.n	801292a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801290c:	4b13      	ldr	r3, [pc, #76]	@ (801295c <_tx_thread_timeout+0x74>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	3301      	adds	r3, #1
 8012912:	4a12      	ldr	r2, [pc, #72]	@ (801295c <_tx_thread_timeout+0x74>)
 8012914:	6013      	str	r3, [r2, #0]
 8012916:	6a3b      	ldr	r3, [r7, #32]
 8012918:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f383 8810 	msr	PRIMASK, r3
}
 8012920:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012924:	f7ff fbf6 	bl	8012114 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012928:	e013      	b.n	8012952 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801292c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801292e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012936:	61bb      	str	r3, [r7, #24]
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	f383 8810 	msr	PRIMASK, r3
}
 8012942:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d003      	beq.n	8012952 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	69b9      	ldr	r1, [r7, #24]
 801294e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012950:	4798      	blx	r3
}
 8012952:	bf00      	nop
 8012954:	3728      	adds	r7, #40	@ 0x28
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	24001838 	.word	0x24001838

08012960 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012966:	f3ef 8310 	mrs	r3, PRIMASK
 801296a:	607b      	str	r3, [r7, #4]
    return(posture);
 801296c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801296e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012970:	b672      	cpsid	i
    return(int_posture);
 8012972:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012974:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012976:	4b09      	ldr	r3, [pc, #36]	@ (801299c <_tx_timer_expiration_process+0x3c>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	3301      	adds	r3, #1
 801297c:	4a07      	ldr	r2, [pc, #28]	@ (801299c <_tx_timer_expiration_process+0x3c>)
 801297e:	6013      	str	r3, [r2, #0]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	f383 8810 	msr	PRIMASK, r3
}
 801298a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801298c:	4804      	ldr	r0, [pc, #16]	@ (80129a0 <_tx_timer_expiration_process+0x40>)
 801298e:	f7ff fbc1 	bl	8012114 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012992:	bf00      	nop
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	24001838 	.word	0x24001838
 80129a0:	240018e8 	.word	0x240018e8

080129a4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80129a4:	b590      	push	{r4, r7, lr}
 80129a6:	b089      	sub	sp, #36	@ 0x24
 80129a8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80129aa:	4b28      	ldr	r3, [pc, #160]	@ (8012a4c <_tx_timer_initialize+0xa8>)
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80129b0:	4b27      	ldr	r3, [pc, #156]	@ (8012a50 <_tx_timer_initialize+0xac>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80129b6:	4b27      	ldr	r3, [pc, #156]	@ (8012a54 <_tx_timer_initialize+0xb0>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80129bc:	4b26      	ldr	r3, [pc, #152]	@ (8012a58 <_tx_timer_initialize+0xb4>)
 80129be:	2200      	movs	r2, #0
 80129c0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80129c2:	4b26      	ldr	r3, [pc, #152]	@ (8012a5c <_tx_timer_initialize+0xb8>)
 80129c4:	2200      	movs	r2, #0
 80129c6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80129c8:	2280      	movs	r2, #128	@ 0x80
 80129ca:	2100      	movs	r1, #0
 80129cc:	4824      	ldr	r0, [pc, #144]	@ (8012a60 <_tx_timer_initialize+0xbc>)
 80129ce:	f005 fd9d 	bl	801850c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80129d2:	4b24      	ldr	r3, [pc, #144]	@ (8012a64 <_tx_timer_initialize+0xc0>)
 80129d4:	4a22      	ldr	r2, [pc, #136]	@ (8012a60 <_tx_timer_initialize+0xbc>)
 80129d6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80129d8:	4b23      	ldr	r3, [pc, #140]	@ (8012a68 <_tx_timer_initialize+0xc4>)
 80129da:	4a21      	ldr	r2, [pc, #132]	@ (8012a60 <_tx_timer_initialize+0xbc>)
 80129dc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80129de:	4b23      	ldr	r3, [pc, #140]	@ (8012a6c <_tx_timer_initialize+0xc8>)
 80129e0:	4a23      	ldr	r2, [pc, #140]	@ (8012a70 <_tx_timer_initialize+0xcc>)
 80129e2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80129e4:	4b21      	ldr	r3, [pc, #132]	@ (8012a6c <_tx_timer_initialize+0xc8>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	3304      	adds	r3, #4
 80129ea:	4a20      	ldr	r2, [pc, #128]	@ (8012a6c <_tx_timer_initialize+0xc8>)
 80129ec:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80129ee:	4b21      	ldr	r3, [pc, #132]	@ (8012a74 <_tx_timer_initialize+0xd0>)
 80129f0:	4a21      	ldr	r2, [pc, #132]	@ (8012a78 <_tx_timer_initialize+0xd4>)
 80129f2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80129f4:	4b21      	ldr	r3, [pc, #132]	@ (8012a7c <_tx_timer_initialize+0xd8>)
 80129f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80129fa:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80129fc:	4b20      	ldr	r3, [pc, #128]	@ (8012a80 <_tx_timer_initialize+0xdc>)
 80129fe:	2200      	movs	r2, #0
 8012a00:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8012a02:	4b1c      	ldr	r3, [pc, #112]	@ (8012a74 <_tx_timer_initialize+0xd0>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4a1d      	ldr	r2, [pc, #116]	@ (8012a7c <_tx_timer_initialize+0xd8>)
 8012a08:	6812      	ldr	r2, [r2, #0]
 8012a0a:	491d      	ldr	r1, [pc, #116]	@ (8012a80 <_tx_timer_initialize+0xdc>)
 8012a0c:	6809      	ldr	r1, [r1, #0]
 8012a0e:	481c      	ldr	r0, [pc, #112]	@ (8012a80 <_tx_timer_initialize+0xdc>)
 8012a10:	6800      	ldr	r0, [r0, #0]
 8012a12:	2400      	movs	r4, #0
 8012a14:	9405      	str	r4, [sp, #20]
 8012a16:	2400      	movs	r4, #0
 8012a18:	9404      	str	r4, [sp, #16]
 8012a1a:	9003      	str	r0, [sp, #12]
 8012a1c:	9102      	str	r1, [sp, #8]
 8012a1e:	9201      	str	r2, [sp, #4]
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	4b18      	ldr	r3, [pc, #96]	@ (8012a84 <_tx_timer_initialize+0xe0>)
 8012a24:	4a18      	ldr	r2, [pc, #96]	@ (8012a88 <_tx_timer_initialize+0xe4>)
 8012a26:	4919      	ldr	r1, [pc, #100]	@ (8012a8c <_tx_timer_initialize+0xe8>)
 8012a28:	4819      	ldr	r0, [pc, #100]	@ (8012a90 <_tx_timer_initialize+0xec>)
 8012a2a:	f7fe ff9b 	bl	8011964 <_tx_thread_create>
 8012a2e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d1e5      	bne.n	8012a02 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8012a36:	4b17      	ldr	r3, [pc, #92]	@ (8012a94 <_tx_timer_initialize+0xf0>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012a3c:	4b16      	ldr	r3, [pc, #88]	@ (8012a98 <_tx_timer_initialize+0xf4>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8012a42:	bf00      	nop
 8012a44:	370c      	adds	r7, #12
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd90      	pop	{r4, r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	24001844 	.word	0x24001844
 8012a50:	24001da4 	.word	0x24001da4
 8012a54:	24001848 	.word	0x24001848
 8012a58:	240018d8 	.word	0x240018d8
 8012a5c:	240018e4 	.word	0x240018e4
 8012a60:	2400184c 	.word	0x2400184c
 8012a64:	240018cc 	.word	0x240018cc
 8012a68:	240018d4 	.word	0x240018d4
 8012a6c:	240018d0 	.word	0x240018d0
 8012a70:	240018c8 	.word	0x240018c8
 8012a74:	24001998 	.word	0x24001998
 8012a78:	240019a4 	.word	0x240019a4
 8012a7c:	2400199c 	.word	0x2400199c
 8012a80:	240019a0 	.word	0x240019a0
 8012a84:	4154494d 	.word	0x4154494d
 8012a88:	08012bd1 	.word	0x08012bd1
 8012a8c:	08018b98 	.word	0x08018b98
 8012a90:	240018e8 	.word	0x240018e8
 8012a94:	240018dc 	.word	0x240018dc
 8012a98:	240018e0 	.word	0x240018e0

08012a9c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b089      	sub	sp, #36	@ 0x24
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d04a      	beq.n	8012b46 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab6:	d046      	beq.n	8012b46 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	699b      	ldr	r3, [r3, #24]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d142      	bne.n	8012b46 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	2b20      	cmp	r3, #32
 8012ac4:	d902      	bls.n	8012acc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8012ac6:	231f      	movs	r3, #31
 8012ac8:	61bb      	str	r3, [r7, #24]
 8012aca:	e002      	b.n	8012ad2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8012ad2:	4b20      	ldr	r3, [pc, #128]	@ (8012b54 <_tx_timer_system_activate+0xb8>)
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	4413      	add	r3, r2
 8012adc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012ade:	4b1e      	ldr	r3, [pc, #120]	@ (8012b58 <_tx_timer_system_activate+0xbc>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	69fa      	ldr	r2, [r7, #28]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d30b      	bcc.n	8012b00 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8012ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8012b58 <_tx_timer_system_activate+0xbc>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	69fa      	ldr	r2, [r7, #28]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	109b      	asrs	r3, r3, #2
 8012af2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8012af4:	4b19      	ldr	r3, [pc, #100]	@ (8012b5c <_tx_timer_system_activate+0xc0>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	009b      	lsls	r3, r3, #2
 8012afc:	4413      	add	r3, r2
 8012afe:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d109      	bne.n	8012b1c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	e011      	b.n	8012b40 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	695b      	ldr	r3, [r3, #20]
 8012b26:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	68ba      	ldr	r2, [r7, #8]
 8012b3e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	69fa      	ldr	r2, [r7, #28]
 8012b44:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8012b46:	bf00      	nop
 8012b48:	3724      	adds	r7, #36	@ 0x24
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr
 8012b52:	bf00      	nop
 8012b54:	240018d4 	.word	0x240018d4
 8012b58:	240018d0 	.word	0x240018d0
 8012b5c:	240018cc 	.word	0x240018cc

08012b60 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	699b      	ldr	r3, [r3, #24]
 8012b6c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d026      	beq.n	8012bc2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	691b      	ldr	r3, [r3, #16]
 8012b78:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d108      	bne.n	8012b94 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d117      	bne.n	8012bbc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	601a      	str	r2, [r3, #0]
 8012b92:	e013      	b.n	8012bbc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	695b      	ldr	r3, [r3, #20]
 8012b98:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	693a      	ldr	r2, [r7, #16]
 8012ba4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d105      	bne.n	8012bbc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	697a      	ldr	r2, [r7, #20]
 8012bb4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	693a      	ldr	r2, [r7, #16]
 8012bba:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	619a      	str	r2, [r3, #24]
    }
}
 8012bc2:	bf00      	nop
 8012bc4:	371c      	adds	r7, #28
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr
	...

08012bd0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b098      	sub	sp, #96	@ 0x60
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8012bd8:	2300      	movs	r3, #0
 8012bda:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4a73      	ldr	r2, [pc, #460]	@ (8012dac <_tx_timer_thread_entry+0x1dc>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	f040 80de 	bne.w	8012da2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012be6:	f3ef 8310 	mrs	r3, PRIMASK
 8012bea:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8012bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8012bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bf0:	b672      	cpsid	i
    return(int_posture);
 8012bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8012bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8012bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d003      	beq.n	8012c0c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f107 020c 	add.w	r2, r7, #12
 8012c0a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8012c0c:	4b68      	ldr	r3, [pc, #416]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2200      	movs	r2, #0
 8012c12:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8012c14:	4b66      	ldr	r3, [pc, #408]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	3304      	adds	r3, #4
 8012c1a:	4a65      	ldr	r2, [pc, #404]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012c1c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8012c1e:	4b64      	ldr	r3, [pc, #400]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	4b64      	ldr	r3, [pc, #400]	@ (8012db4 <_tx_timer_thread_entry+0x1e4>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d103      	bne.n	8012c32 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012c2a:	4b63      	ldr	r3, [pc, #396]	@ (8012db8 <_tx_timer_thread_entry+0x1e8>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a60      	ldr	r2, [pc, #384]	@ (8012db0 <_tx_timer_thread_entry+0x1e0>)
 8012c30:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8012c32:	4b62      	ldr	r3, [pc, #392]	@ (8012dbc <_tx_timer_thread_entry+0x1ec>)
 8012c34:	2200      	movs	r2, #0
 8012c36:	601a      	str	r2, [r3, #0]
 8012c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c3e:	f383 8810 	msr	PRIMASK, r3
}
 8012c42:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c44:	f3ef 8310 	mrs	r3, PRIMASK
 8012c48:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8012c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8012c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c4e:	b672      	cpsid	i
    return(int_posture);
 8012c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012c52:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012c54:	e07f      	b.n	8012d56 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012c60:	2300      	movs	r3, #0
 8012c62:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012c64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d102      	bne.n	8012c72 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	60fb      	str	r3, [r7, #12]
 8012c70:	e00e      	b.n	8012c90 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8012c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c7c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c82:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c86:	f107 020c 	add.w	r2, r7, #12
 8012c8a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c8e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	2b20      	cmp	r3, #32
 8012c96:	d911      	bls.n	8012cbc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ca2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012caa:	f107 0208 	add.w	r2, r7, #8
 8012cae:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012cb4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb8:	60bb      	str	r3, [r7, #8]
 8012cba:	e01a      	b.n	8012cf2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8012cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cca:	685a      	ldr	r2, [r3, #4]
 8012ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cce:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8012cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d009      	beq.n	8012cec <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cda:	f107 0208 	add.w	r2, r7, #8
 8012cde:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8012ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ce4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8012ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ce8:	60bb      	str	r3, [r7, #8]
 8012cea:	e002      	b.n	8012cf2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8012cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cee:	2200      	movs	r2, #0
 8012cf0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8012cf2:	4a33      	ldr	r2, [pc, #204]	@ (8012dc0 <_tx_timer_thread_entry+0x1f0>)
 8012cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cf6:	6013      	str	r3, [r2, #0]
 8012cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cfe:	f383 8810 	msr	PRIMASK, r3
}
 8012d02:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8012d04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d002      	beq.n	8012d10 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8012d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012d0e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d10:	f3ef 8310 	mrs	r3, PRIMASK
 8012d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8012d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8012d18:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d1a:	b672      	cpsid	i
    return(int_posture);
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012d20:	4b27      	ldr	r3, [pc, #156]	@ (8012dc0 <_tx_timer_thread_entry+0x1f0>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d105      	bne.n	8012d3a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d30:	2200      	movs	r2, #0
 8012d32:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012d34:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012d36:	f7ff feb1 	bl	8012a9c <_tx_timer_system_activate>
 8012d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d3c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	f383 8810 	msr	PRIMASK, r3
}
 8012d44:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d46:	f3ef 8310 	mrs	r3, PRIMASK
 8012d4a:	623b      	str	r3, [r7, #32]
    return(posture);
 8012d4c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012d4e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d50:	b672      	cpsid	i
    return(int_posture);
 8012d52:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	f47f af7c 	bne.w	8012c56 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012d5e:	4b17      	ldr	r3, [pc, #92]	@ (8012dbc <_tx_timer_thread_entry+0x1ec>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d116      	bne.n	8012d94 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012d66:	4b17      	ldr	r3, [pc, #92]	@ (8012dc4 <_tx_timer_thread_entry+0x1f4>)
 8012d68:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d6c:	2203      	movs	r2, #3
 8012d6e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d72:	2201      	movs	r2, #1
 8012d74:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012d76:	4b14      	ldr	r3, [pc, #80]	@ (8012dc8 <_tx_timer_thread_entry+0x1f8>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	4a12      	ldr	r2, [pc, #72]	@ (8012dc8 <_tx_timer_thread_entry+0x1f8>)
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d82:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	f383 8810 	msr	PRIMASK, r3
}
 8012d8a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012d8c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012d8e:	f7ff fac1 	bl	8012314 <_tx_thread_system_suspend>
 8012d92:	e728      	b.n	8012be6 <_tx_timer_thread_entry+0x16>
 8012d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	f383 8810 	msr	PRIMASK, r3
}
 8012d9e:	bf00      	nop
            TX_DISABLE
 8012da0:	e721      	b.n	8012be6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012da2:	bf00      	nop
 8012da4:	3760      	adds	r7, #96	@ 0x60
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	4154494d 	.word	0x4154494d
 8012db0:	240018d4 	.word	0x240018d4
 8012db4:	240018d0 	.word	0x240018d0
 8012db8:	240018cc 	.word	0x240018cc
 8012dbc:	240018d8 	.word	0x240018d8
 8012dc0:	240018e4 	.word	0x240018e4
 8012dc4:	240018e8 	.word	0x240018e8
 8012dc8:	24001838 	.word	0x24001838

08012dcc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08a      	sub	sp, #40	@ 0x28
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
 8012dd8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d102      	bne.n	8012dea <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012de4:	2302      	movs	r3, #2
 8012de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012de8:	e029      	b.n	8012e3e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a2d      	ldr	r2, [pc, #180]	@ (8012ea4 <_txe_byte_allocate+0xd8>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d002      	beq.n	8012dfa <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012df4:	2302      	movs	r3, #2
 8012df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012df8:	e021      	b.n	8012e3e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d102      	bne.n	8012e06 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012e00:	2303      	movs	r3, #3
 8012e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e04:	e01b      	b.n	8012e3e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012e0c:	2305      	movs	r3, #5
 8012e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e10:	e015      	b.n	8012e3e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	69db      	ldr	r3, [r3, #28]
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d902      	bls.n	8012e22 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012e1c:	2305      	movs	r3, #5
 8012e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e20:	e00d      	b.n	8012e3e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00a      	beq.n	8012e3e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e28:	f3ef 8305 	mrs	r3, IPSR
 8012e2c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8012e2e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012e30:	4b1d      	ldr	r3, [pc, #116]	@ (8012ea8 <_txe_byte_allocate+0xdc>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4313      	orrs	r3, r2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d001      	beq.n	8012e3e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012e3a:	2304      	movs	r3, #4
 8012e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8012e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d108      	bne.n	8012e56 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012e44:	4b19      	ldr	r3, [pc, #100]	@ (8012eac <_txe_byte_allocate+0xe0>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	4a18      	ldr	r2, [pc, #96]	@ (8012eb0 <_txe_byte_allocate+0xe4>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d101      	bne.n	8012e56 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012e52:	2313      	movs	r3, #19
 8012e54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8012e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d114      	bne.n	8012e86 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e5c:	f3ef 8305 	mrs	r3, IPSR
 8012e60:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012e62:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012e64:	4b10      	ldr	r3, [pc, #64]	@ (8012ea8 <_txe_byte_allocate+0xdc>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	4313      	orrs	r3, r2
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d00b      	beq.n	8012e86 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e6e:	f3ef 8305 	mrs	r3, IPSR
 8012e72:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012e74:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012e76:	4b0c      	ldr	r3, [pc, #48]	@ (8012ea8 <_txe_byte_allocate+0xdc>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012e80:	d201      	bcs.n	8012e86 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012e82:	2313      	movs	r3, #19
 8012e84:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d106      	bne.n	8012e9a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	68b9      	ldr	r1, [r7, #8]
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f7fc fd0a 	bl	800f8ac <_tx_byte_allocate>
 8012e98:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3728      	adds	r7, #40	@ 0x28
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	42595445 	.word	0x42595445
 8012ea8:	2400007c 	.word	0x2400007c
 8012eac:	240017a0 	.word	0x240017a0
 8012eb0:	240018e8 	.word	0x240018e8

08012eb4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b092      	sub	sp, #72	@ 0x48
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d102      	bne.n	8012ed2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ecc:	2302      	movs	r3, #2
 8012ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ed0:	e075      	b.n	8012fbe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ed4:	2b34      	cmp	r3, #52	@ 0x34
 8012ed6:	d002      	beq.n	8012ede <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ed8:	2302      	movs	r3, #2
 8012eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8012edc:	e06f      	b.n	8012fbe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ede:	f3ef 8310 	mrs	r3, PRIMASK
 8012ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8012ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8012ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ee8:	b672      	cpsid	i
    return(int_posture);
 8012eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012eec:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012eee:	4b3b      	ldr	r3, [pc, #236]	@ (8012fdc <_txe_byte_pool_create+0x128>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	4a39      	ldr	r2, [pc, #228]	@ (8012fdc <_txe_byte_pool_create+0x128>)
 8012ef6:	6013      	str	r3, [r2, #0]
 8012ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012efa:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012efe:	f383 8810 	msr	PRIMASK, r3
}
 8012f02:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8012f04:	4b36      	ldr	r3, [pc, #216]	@ (8012fe0 <_txe_byte_pool_create+0x12c>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012f0e:	e009      	b.n	8012f24 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d00b      	beq.n	8012f30 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8012f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f20:	3301      	adds	r3, #1
 8012f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8012f24:	4b2f      	ldr	r3, [pc, #188]	@ (8012fe4 <_txe_byte_pool_create+0x130>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d3f0      	bcc.n	8012f10 <_txe_byte_pool_create+0x5c>
 8012f2e:	e000      	b.n	8012f32 <_txe_byte_pool_create+0x7e>
                break;
 8012f30:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f32:	f3ef 8310 	mrs	r3, PRIMASK
 8012f36:	623b      	str	r3, [r7, #32]
    return(posture);
 8012f38:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012f3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f3c:	b672      	cpsid	i
    return(int_posture);
 8012f3e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012f40:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012f42:	4b26      	ldr	r3, [pc, #152]	@ (8012fdc <_txe_byte_pool_create+0x128>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	3b01      	subs	r3, #1
 8012f48:	4a24      	ldr	r2, [pc, #144]	@ (8012fdc <_txe_byte_pool_create+0x128>)
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f52:	f383 8810 	msr	PRIMASK, r3
}
 8012f56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012f58:	f7ff f8a2 	bl	80120a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8012f5c:	68fa      	ldr	r2, [r7, #12]
 8012f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d102      	bne.n	8012f6a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012f64:	2302      	movs	r3, #2
 8012f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f68:	e029      	b.n	8012fbe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d102      	bne.n	8012f76 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012f70:	2303      	movs	r3, #3
 8012f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f74:	e023      	b.n	8012fbe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	2b63      	cmp	r3, #99	@ 0x63
 8012f7a:	d802      	bhi.n	8012f82 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8012f7c:	2305      	movs	r3, #5
 8012f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f80:	e01d      	b.n	8012fbe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012f82:	4b19      	ldr	r3, [pc, #100]	@ (8012fe8 <_txe_byte_pool_create+0x134>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f8a:	4a18      	ldr	r2, [pc, #96]	@ (8012fec <_txe_byte_pool_create+0x138>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d101      	bne.n	8012f94 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012f90:	2313      	movs	r3, #19
 8012f92:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012f94:	f3ef 8305 	mrs	r3, IPSR
 8012f98:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012f9a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012f9c:	4b14      	ldr	r3, [pc, #80]	@ (8012ff0 <_txe_byte_pool_create+0x13c>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00b      	beq.n	8012fbe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012fa6:	f3ef 8305 	mrs	r3, IPSR
 8012faa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012fac:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012fae:	4b10      	ldr	r3, [pc, #64]	@ (8012ff0 <_txe_byte_pool_create+0x13c>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4313      	orrs	r3, r2
 8012fb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012fb8:	d201      	bcs.n	8012fbe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012fba:	2313      	movs	r3, #19
 8012fbc:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d106      	bne.n	8012fd2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	68b9      	ldr	r1, [r7, #8]
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f7fc fdb0 	bl	800fb30 <_tx_byte_pool_create>
 8012fd0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8012fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3748      	adds	r7, #72	@ 0x48
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	24001838 	.word	0x24001838
 8012fe0:	24001790 	.word	0x24001790
 8012fe4:	24001794 	.word	0x24001794
 8012fe8:	240017a0 	.word	0x240017a0
 8012fec:	240018e8 	.word	0x240018e8
 8012ff0:	2400007c 	.word	0x2400007c

08012ff4 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b092      	sub	sp, #72	@ 0x48
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013000:	2300      	movs	r3, #0
 8013002:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d102      	bne.n	8013010 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801300a:	2306      	movs	r3, #6
 801300c:	647b      	str	r3, [r7, #68]	@ 0x44
 801300e:	e069      	b.n	80130e4 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b24      	cmp	r3, #36	@ 0x24
 8013014:	d002      	beq.n	801301c <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013016:	2306      	movs	r3, #6
 8013018:	647b      	str	r3, [r7, #68]	@ 0x44
 801301a:	e063      	b.n	80130e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801301c:	f3ef 8310 	mrs	r3, PRIMASK
 8013020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8013022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8013024:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013026:	b672      	cpsid	i
    return(int_posture);
 8013028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801302a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801302c:	4b34      	ldr	r3, [pc, #208]	@ (8013100 <_txe_event_flags_create+0x10c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3301      	adds	r3, #1
 8013032:	4a33      	ldr	r2, [pc, #204]	@ (8013100 <_txe_event_flags_create+0x10c>)
 8013034:	6013      	str	r3, [r2, #0]
 8013036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013038:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801303c:	f383 8810 	msr	PRIMASK, r3
}
 8013040:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8013042:	4b30      	ldr	r3, [pc, #192]	@ (8013104 <_txe_event_flags_create+0x110>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8013048:	2300      	movs	r3, #0
 801304a:	643b      	str	r3, [r7, #64]	@ 0x40
 801304c:	e009      	b.n	8013062 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013052:	429a      	cmp	r2, r3
 8013054:	d00b      	beq.n	801306e <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8013056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801305e:	3301      	adds	r3, #1
 8013060:	643b      	str	r3, [r7, #64]	@ 0x40
 8013062:	4b29      	ldr	r3, [pc, #164]	@ (8013108 <_txe_event_flags_create+0x114>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013068:	429a      	cmp	r2, r3
 801306a:	d3f0      	bcc.n	801304e <_txe_event_flags_create+0x5a>
 801306c:	e000      	b.n	8013070 <_txe_event_flags_create+0x7c>
                break;
 801306e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013070:	f3ef 8310 	mrs	r3, PRIMASK
 8013074:	623b      	str	r3, [r7, #32]
    return(posture);
 8013076:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013078:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801307a:	b672      	cpsid	i
    return(int_posture);
 801307c:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801307e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013080:	4b1f      	ldr	r3, [pc, #124]	@ (8013100 <_txe_event_flags_create+0x10c>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	3b01      	subs	r3, #1
 8013086:	4a1e      	ldr	r2, [pc, #120]	@ (8013100 <_txe_event_flags_create+0x10c>)
 8013088:	6013      	str	r3, [r2, #0]
 801308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801308c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013090:	f383 8810 	msr	PRIMASK, r3
}
 8013094:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013096:	f7ff f803 	bl	80120a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309e:	429a      	cmp	r2, r3
 80130a0:	d102      	bne.n	80130a8 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 80130a2:	2306      	movs	r3, #6
 80130a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80130a6:	e01d      	b.n	80130e4 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80130a8:	4b18      	ldr	r3, [pc, #96]	@ (801310c <_txe_event_flags_create+0x118>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80130ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130b0:	4a17      	ldr	r2, [pc, #92]	@ (8013110 <_txe_event_flags_create+0x11c>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d101      	bne.n	80130ba <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80130b6:	2313      	movs	r3, #19
 80130b8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130ba:	f3ef 8305 	mrs	r3, IPSR
 80130be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80130c0:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80130c2:	4b14      	ldr	r3, [pc, #80]	@ (8013114 <_txe_event_flags_create+0x120>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4313      	orrs	r3, r2
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00b      	beq.n	80130e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130cc:	f3ef 8305 	mrs	r3, IPSR
 80130d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80130d2:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80130d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013114 <_txe_event_flags_create+0x120>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4313      	orrs	r3, r2
 80130da:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80130de:	d201      	bcs.n	80130e4 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80130e0:	2313      	movs	r3, #19
 80130e2:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80130e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d104      	bne.n	80130f4 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 80130ea:	68b9      	ldr	r1, [r7, #8]
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f7fc ff49 	bl	800ff84 <_tx_event_flags_create>
 80130f2:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80130f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3748      	adds	r7, #72	@ 0x48
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	24001838 	.word	0x24001838
 8013104:	24001778 	.word	0x24001778
 8013108:	2400177c 	.word	0x2400177c
 801310c:	240017a0 	.word	0x240017a0
 8013110:	240018e8 	.word	0x240018e8
 8013114:	2400007c 	.word	0x2400007c

08013118 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b086      	sub	sp, #24
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013120:	2300      	movs	r3, #0
 8013122:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d102      	bne.n	8013130 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801312a:	2306      	movs	r3, #6
 801312c:	617b      	str	r3, [r7, #20]
 801312e:	e023      	b.n	8013178 <_txe_event_flags_delete+0x60>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a13      	ldr	r2, [pc, #76]	@ (8013184 <_txe_event_flags_delete+0x6c>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d002      	beq.n	8013140 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801313a:	2306      	movs	r3, #6
 801313c:	617b      	str	r3, [r7, #20]
 801313e:	e01b      	b.n	8013178 <_txe_event_flags_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013140:	f3ef 8305 	mrs	r3, IPSR
 8013144:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013146:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013148:	4b0f      	ldr	r3, [pc, #60]	@ (8013188 <_txe_event_flags_delete+0x70>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	4313      	orrs	r3, r2
 801314e:	2b00      	cmp	r3, #0
 8013150:	d002      	beq.n	8013158 <_txe_event_flags_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013152:	2313      	movs	r3, #19
 8013154:	617b      	str	r3, [r7, #20]
 8013156:	e00f      	b.n	8013178 <_txe_event_flags_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013158:	4b0c      	ldr	r3, [pc, #48]	@ (801318c <_txe_event_flags_delete+0x74>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	4a0b      	ldr	r2, [pc, #44]	@ (8013190 <_txe_event_flags_delete+0x78>)
 8013162:	4293      	cmp	r3, r2
 8013164:	d101      	bne.n	801316a <_txe_event_flags_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013166:	2313      	movs	r3, #19
 8013168:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d103      	bne.n	8013178 <_txe_event_flags_delete+0x60>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7fc ff55 	bl	8010020 <_tx_event_flags_delete>
 8013176:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8013178:	697b      	ldr	r3, [r7, #20]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3718      	adds	r7, #24
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	4456444e 	.word	0x4456444e
 8013188:	2400007c 	.word	0x2400007c
 801318c:	240017a0 	.word	0x240017a0
 8013190:	240018e8 	.word	0x240018e8

08013194 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b08a      	sub	sp, #40	@ 0x28
 8013198:	af02      	add	r7, sp, #8
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
 80131a0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80131a2:	2300      	movs	r3, #0
 80131a4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80131ac:	2306      	movs	r3, #6
 80131ae:	61fb      	str	r3, [r7, #28]
 80131b0:	e025      	b.n	80131fe <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4a1e      	ldr	r2, [pc, #120]	@ (8013230 <_txe_event_flags_get+0x9c>)
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d002      	beq.n	80131c2 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80131bc:	2306      	movs	r3, #6
 80131be:	61fb      	str	r3, [r7, #28]
 80131c0:	e01d      	b.n	80131fe <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d102      	bne.n	80131ce <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80131c8:	2303      	movs	r3, #3
 80131ca:	61fb      	str	r3, [r7, #28]
 80131cc:	e017      	b.n	80131fe <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80131ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d014      	beq.n	80131fe <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131d4:	f3ef 8305 	mrs	r3, IPSR
 80131d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80131da:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80131dc:	4b15      	ldr	r3, [pc, #84]	@ (8013234 <_txe_event_flags_get+0xa0>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4313      	orrs	r3, r2
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d002      	beq.n	80131ec <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80131e6:	2304      	movs	r3, #4
 80131e8:	61fb      	str	r3, [r7, #28]
 80131ea:	e008      	b.n	80131fe <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80131ec:	4b12      	ldr	r3, [pc, #72]	@ (8013238 <_txe_event_flags_get+0xa4>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	4a11      	ldr	r2, [pc, #68]	@ (801323c <_txe_event_flags_get+0xa8>)
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d101      	bne.n	80131fe <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80131fa:	2304      	movs	r3, #4
 80131fc:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d104      	bne.n	801320e <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b03      	cmp	r3, #3
 8013208:	d901      	bls.n	801320e <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 801320a:	2308      	movs	r3, #8
 801320c:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d108      	bne.n	8013226 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8013214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	68b9      	ldr	r1, [r7, #8]
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f7fc ff8e 	bl	8010140 <_tx_event_flags_get>
 8013224:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013226:	69fb      	ldr	r3, [r7, #28]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3720      	adds	r7, #32
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	4456444e 	.word	0x4456444e
 8013234:	2400007c 	.word	0x2400007c
 8013238:	240017a0 	.word	0x240017a0
 801323c:	240018e8 	.word	0x240018e8

08013240 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b086      	sub	sp, #24
 8013244:	af00      	add	r7, sp, #0
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801324c:	2300      	movs	r3, #0
 801324e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d102      	bne.n	801325c <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013256:	2306      	movs	r3, #6
 8013258:	617b      	str	r3, [r7, #20]
 801325a:	e00f      	b.n	801327c <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a0d      	ldr	r2, [pc, #52]	@ (8013298 <_txe_event_flags_set+0x58>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d002      	beq.n	801326c <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013266:	2306      	movs	r3, #6
 8013268:	617b      	str	r3, [r7, #20]
 801326a:	e007      	b.n	801327c <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2b02      	cmp	r3, #2
 8013270:	d004      	beq.n	801327c <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d001      	beq.n	801327c <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8013278:	2308      	movs	r3, #8
 801327a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d105      	bne.n	801328e <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	68b9      	ldr	r1, [r7, #8]
 8013286:	68f8      	ldr	r0, [r7, #12]
 8013288:	f7fd f844 	bl	8010314 <_tx_event_flags_set>
 801328c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801328e:	697b      	ldr	r3, [r7, #20]
}
 8013290:	4618      	mov	r0, r3
 8013292:	3718      	adds	r7, #24
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	4456444e 	.word	0x4456444e

0801329c <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b092      	sub	sp, #72	@ 0x48
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80132aa:	2300      	movs	r3, #0
 80132ac:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d102      	bne.n	80132ba <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80132b4:	231c      	movs	r3, #28
 80132b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80132b8:	e053      	b.n	8013362 <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	2b34      	cmp	r3, #52	@ 0x34
 80132be:	d002      	beq.n	80132c6 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80132c0:	231c      	movs	r3, #28
 80132c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80132c4:	e04d      	b.n	8013362 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132c6:	f3ef 8310 	mrs	r3, PRIMASK
 80132ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80132cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80132ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80132d0:	b672      	cpsid	i
    return(int_posture);
 80132d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80132d4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80132d6:	4b3a      	ldr	r3, [pc, #232]	@ (80133c0 <_txe_mutex_create+0x124>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	3301      	adds	r3, #1
 80132dc:	4a38      	ldr	r2, [pc, #224]	@ (80133c0 <_txe_mutex_create+0x124>)
 80132de:	6013      	str	r3, [r2, #0]
 80132e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132e2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e6:	f383 8810 	msr	PRIMASK, r3
}
 80132ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 80132ec:	4b35      	ldr	r3, [pc, #212]	@ (80133c4 <_txe_mutex_create+0x128>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80132f2:	2300      	movs	r3, #0
 80132f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80132f6:	e009      	b.n	801330c <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d00b      	beq.n	8013318 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8013300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013302:	6a1b      	ldr	r3, [r3, #32]
 8013304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013308:	3301      	adds	r3, #1
 801330a:	643b      	str	r3, [r7, #64]	@ 0x40
 801330c:	4b2e      	ldr	r3, [pc, #184]	@ (80133c8 <_txe_mutex_create+0x12c>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013312:	429a      	cmp	r2, r3
 8013314:	d3f0      	bcc.n	80132f8 <_txe_mutex_create+0x5c>
 8013316:	e000      	b.n	801331a <_txe_mutex_create+0x7e>
                break;
 8013318:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801331a:	f3ef 8310 	mrs	r3, PRIMASK
 801331e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013320:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013322:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013324:	b672      	cpsid	i
    return(int_posture);
 8013326:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013328:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801332a:	4b25      	ldr	r3, [pc, #148]	@ (80133c0 <_txe_mutex_create+0x124>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	3b01      	subs	r3, #1
 8013330:	4a23      	ldr	r2, [pc, #140]	@ (80133c0 <_txe_mutex_create+0x124>)
 8013332:	6013      	str	r3, [r2, #0]
 8013334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013336:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801333a:	f383 8810 	msr	PRIMASK, r3
}
 801333e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013340:	f7fe feae 	bl	80120a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8013344:	68fa      	ldr	r2, [r7, #12]
 8013346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013348:	429a      	cmp	r2, r3
 801334a:	d102      	bne.n	8013352 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 801334c:	231c      	movs	r3, #28
 801334e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013350:	e007      	b.n	8013362 <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b01      	cmp	r3, #1
 8013356:	d004      	beq.n	8013362 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d001      	beq.n	8013362 <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 801335e:	231f      	movs	r3, #31
 8013360:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013364:	2b00      	cmp	r3, #0
 8013366:	d11d      	bne.n	80133a4 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013368:	4b18      	ldr	r3, [pc, #96]	@ (80133cc <_txe_mutex_create+0x130>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801336e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013370:	4a17      	ldr	r2, [pc, #92]	@ (80133d0 <_txe_mutex_create+0x134>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d101      	bne.n	801337a <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013376:	2313      	movs	r3, #19
 8013378:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801337a:	f3ef 8305 	mrs	r3, IPSR
 801337e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013380:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013382:	4b14      	ldr	r3, [pc, #80]	@ (80133d4 <_txe_mutex_create+0x138>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4313      	orrs	r3, r2
 8013388:	2b00      	cmp	r3, #0
 801338a:	d00b      	beq.n	80133a4 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801338c:	f3ef 8305 	mrs	r3, IPSR
 8013390:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013392:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013394:	4b0f      	ldr	r3, [pc, #60]	@ (80133d4 <_txe_mutex_create+0x138>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4313      	orrs	r3, r2
 801339a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801339e:	d201      	bcs.n	80133a4 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80133a0:	2313      	movs	r3, #19
 80133a2:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80133a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d105      	bne.n	80133b6 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f7fd faee 	bl	8010990 <_tx_mutex_create>
 80133b4:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80133b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3748      	adds	r7, #72	@ 0x48
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	24001838 	.word	0x24001838
 80133c4:	24001780 	.word	0x24001780
 80133c8:	24001784 	.word	0x24001784
 80133cc:	240017a0 	.word	0x240017a0
 80133d0:	240018e8 	.word	0x240018e8
 80133d4:	2400007c 	.word	0x2400007c

080133d8 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b086      	sub	sp, #24
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80133e0:	2300      	movs	r3, #0
 80133e2:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d102      	bne.n	80133f0 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80133ea:	231c      	movs	r3, #28
 80133ec:	617b      	str	r3, [r7, #20]
 80133ee:	e023      	b.n	8013438 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a13      	ldr	r2, [pc, #76]	@ (8013444 <_txe_mutex_delete+0x6c>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d002      	beq.n	8013400 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80133fa:	231c      	movs	r3, #28
 80133fc:	617b      	str	r3, [r7, #20]
 80133fe:	e01b      	b.n	8013438 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013400:	f3ef 8305 	mrs	r3, IPSR
 8013404:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013406:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013408:	4b0f      	ldr	r3, [pc, #60]	@ (8013448 <_txe_mutex_delete+0x70>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	4313      	orrs	r3, r2
 801340e:	2b00      	cmp	r3, #0
 8013410:	d002      	beq.n	8013418 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013412:	2313      	movs	r3, #19
 8013414:	617b      	str	r3, [r7, #20]
 8013416:	e00f      	b.n	8013438 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013418:	4b0c      	ldr	r3, [pc, #48]	@ (801344c <_txe_mutex_delete+0x74>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	4a0b      	ldr	r2, [pc, #44]	@ (8013450 <_txe_mutex_delete+0x78>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d101      	bne.n	801342a <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013426:	2313      	movs	r3, #19
 8013428:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d103      	bne.n	8013438 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7fd fb07 	bl	8010a44 <_tx_mutex_delete>
 8013436:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8013438:	697b      	ldr	r3, [r7, #20]
}
 801343a:	4618      	mov	r0, r3
 801343c:	3718      	adds	r7, #24
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	4d555445 	.word	0x4d555445
 8013448:	2400007c 	.word	0x2400007c
 801344c:	240017a0 	.word	0x240017a0
 8013450:	240018e8 	.word	0x240018e8

08013454 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801345e:	2300      	movs	r3, #0
 8013460:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d102      	bne.n	801346e <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013468:	231c      	movs	r3, #28
 801346a:	61fb      	str	r3, [r7, #28]
 801346c:	e01f      	b.n	80134ae <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a21      	ldr	r2, [pc, #132]	@ (80134f8 <_txe_mutex_get+0xa4>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d002      	beq.n	801347e <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013478:	231c      	movs	r3, #28
 801347a:	61fb      	str	r3, [r7, #28]
 801347c:	e017      	b.n	80134ae <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d014      	beq.n	80134ae <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013484:	f3ef 8305 	mrs	r3, IPSR
 8013488:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801348a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801348c:	4b1b      	ldr	r3, [pc, #108]	@ (80134fc <_txe_mutex_get+0xa8>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4313      	orrs	r3, r2
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013496:	2304      	movs	r3, #4
 8013498:	61fb      	str	r3, [r7, #28]
 801349a:	e008      	b.n	80134ae <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801349c:	4b18      	ldr	r3, [pc, #96]	@ (8013500 <_txe_mutex_get+0xac>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	4a17      	ldr	r2, [pc, #92]	@ (8013504 <_txe_mutex_get+0xb0>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d101      	bne.n	80134ae <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80134aa:	2304      	movs	r3, #4
 80134ac:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d114      	bne.n	80134de <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80134b4:	f3ef 8305 	mrs	r3, IPSR
 80134b8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80134ba:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80134bc:	4b0f      	ldr	r3, [pc, #60]	@ (80134fc <_txe_mutex_get+0xa8>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4313      	orrs	r3, r2
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00b      	beq.n	80134de <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80134c6:	f3ef 8305 	mrs	r3, IPSR
 80134ca:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80134cc:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80134ce:	4b0b      	ldr	r3, [pc, #44]	@ (80134fc <_txe_mutex_get+0xa8>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	4313      	orrs	r3, r2
 80134d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80134d8:	d201      	bcs.n	80134de <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80134da:	2313      	movs	r3, #19
 80134dc:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d104      	bne.n	80134ee <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80134e4:	6839      	ldr	r1, [r7, #0]
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7fd fb56 	bl	8010b98 <_tx_mutex_get>
 80134ec:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80134ee:	69fb      	ldr	r3, [r7, #28]
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3720      	adds	r7, #32
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	4d555445 	.word	0x4d555445
 80134fc:	2400007c 	.word	0x2400007c
 8013500:	240017a0 	.word	0x240017a0
 8013504:	240018e8 	.word	0x240018e8

08013508 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d102      	bne.n	8013520 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801351a:	231c      	movs	r3, #28
 801351c:	617b      	str	r3, [r7, #20]
 801351e:	e01c      	b.n	801355a <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a13      	ldr	r2, [pc, #76]	@ (8013574 <_txe_mutex_put+0x6c>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d002      	beq.n	8013530 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801352a:	231c      	movs	r3, #28
 801352c:	617b      	str	r3, [r7, #20]
 801352e:	e014      	b.n	801355a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013530:	f3ef 8305 	mrs	r3, IPSR
 8013534:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013536:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013538:	4b0f      	ldr	r3, [pc, #60]	@ (8013578 <_txe_mutex_put+0x70>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4313      	orrs	r3, r2
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00b      	beq.n	801355a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013542:	f3ef 8305 	mrs	r3, IPSR
 8013546:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013548:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801354a:	4b0b      	ldr	r3, [pc, #44]	@ (8013578 <_txe_mutex_put+0x70>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	4313      	orrs	r3, r2
 8013550:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013554:	d201      	bcs.n	801355a <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013556:	2313      	movs	r3, #19
 8013558:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d103      	bne.n	8013568 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f7fd fd91 	bl	8011088 <_tx_mutex_put>
 8013566:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013568:	697b      	ldr	r3, [r7, #20]
}
 801356a:	4618      	mov	r0, r3
 801356c:	3718      	adds	r7, #24
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	4d555445 	.word	0x4d555445
 8013578:	2400007c 	.word	0x2400007c

0801357c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b092      	sub	sp, #72	@ 0x48
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801358a:	2300      	movs	r3, #0
 801358c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d102      	bne.n	801359a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013594:	230c      	movs	r3, #12
 8013596:	647b      	str	r3, [r7, #68]	@ 0x44
 8013598:	e054      	b.n	8013644 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	2b1c      	cmp	r3, #28
 801359e:	d002      	beq.n	80135a6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80135a0:	230c      	movs	r3, #12
 80135a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80135a4:	e04e      	b.n	8013644 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135a6:	f3ef 8310 	mrs	r3, PRIMASK
 80135aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80135ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80135ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80135b0:	b672      	cpsid	i
    return(int_posture);
 80135b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80135b4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80135b6:	4b36      	ldr	r3, [pc, #216]	@ (8013690 <_txe_semaphore_create+0x114>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	3301      	adds	r3, #1
 80135bc:	4a34      	ldr	r2, [pc, #208]	@ (8013690 <_txe_semaphore_create+0x114>)
 80135be:	6013      	str	r3, [r2, #0]
 80135c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c6:	f383 8810 	msr	PRIMASK, r3
}
 80135ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80135cc:	4b31      	ldr	r3, [pc, #196]	@ (8013694 <_txe_semaphore_create+0x118>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80135d2:	2300      	movs	r3, #0
 80135d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80135d6:	e009      	b.n	80135ec <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135dc:	429a      	cmp	r2, r3
 80135de:	d00b      	beq.n	80135f8 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80135e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135e2:	695b      	ldr	r3, [r3, #20]
 80135e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80135e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80135e8:	3301      	adds	r3, #1
 80135ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80135ec:	4b2a      	ldr	r3, [pc, #168]	@ (8013698 <_txe_semaphore_create+0x11c>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d3f0      	bcc.n	80135d8 <_txe_semaphore_create+0x5c>
 80135f6:	e000      	b.n	80135fa <_txe_semaphore_create+0x7e>
                break;
 80135f8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135fa:	f3ef 8310 	mrs	r3, PRIMASK
 80135fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8013600:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013602:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013604:	b672      	cpsid	i
    return(int_posture);
 8013606:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013608:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801360a:	4b21      	ldr	r3, [pc, #132]	@ (8013690 <_txe_semaphore_create+0x114>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	3b01      	subs	r3, #1
 8013610:	4a1f      	ldr	r2, [pc, #124]	@ (8013690 <_txe_semaphore_create+0x114>)
 8013612:	6013      	str	r3, [r2, #0]
 8013614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013616:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801361a:	f383 8810 	msr	PRIMASK, r3
}
 801361e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013620:	f7fe fd3e 	bl	80120a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013628:	429a      	cmp	r2, r3
 801362a:	d102      	bne.n	8013632 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801362c:	230c      	movs	r3, #12
 801362e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013630:	e008      	b.n	8013644 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013632:	4b1a      	ldr	r3, [pc, #104]	@ (801369c <_txe_semaphore_create+0x120>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801363a:	4a19      	ldr	r2, [pc, #100]	@ (80136a0 <_txe_semaphore_create+0x124>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d101      	bne.n	8013644 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013640:	2313      	movs	r3, #19
 8013642:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013646:	2b00      	cmp	r3, #0
 8013648:	d114      	bne.n	8013674 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801364a:	f3ef 8305 	mrs	r3, IPSR
 801364e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013650:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013652:	4b14      	ldr	r3, [pc, #80]	@ (80136a4 <_txe_semaphore_create+0x128>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	4313      	orrs	r3, r2
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00b      	beq.n	8013674 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801365c:	f3ef 8305 	mrs	r3, IPSR
 8013660:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013662:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013664:	4b0f      	ldr	r3, [pc, #60]	@ (80136a4 <_txe_semaphore_create+0x128>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	4313      	orrs	r3, r2
 801366a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801366e:	d201      	bcs.n	8013674 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013670:	2313      	movs	r3, #19
 8013672:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013676:	2b00      	cmp	r3, #0
 8013678:	d105      	bne.n	8013686 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	68b9      	ldr	r1, [r7, #8]
 801367e:	68f8      	ldr	r0, [r7, #12]
 8013680:	f7fd ffa4 	bl	80115cc <_tx_semaphore_create>
 8013684:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8013686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8013688:	4618      	mov	r0, r3
 801368a:	3748      	adds	r7, #72	@ 0x48
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	24001838 	.word	0x24001838
 8013694:	24001768 	.word	0x24001768
 8013698:	2400176c 	.word	0x2400176c
 801369c:	240017a0 	.word	0x240017a0
 80136a0:	240018e8 	.word	0x240018e8
 80136a4:	2400007c 	.word	0x2400007c

080136a8 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80136b0:	2300      	movs	r3, #0
 80136b2:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d102      	bne.n	80136c0 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80136ba:	230c      	movs	r3, #12
 80136bc:	617b      	str	r3, [r7, #20]
 80136be:	e01c      	b.n	80136fa <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	4a13      	ldr	r2, [pc, #76]	@ (8013714 <_txe_semaphore_delete+0x6c>)
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d002      	beq.n	80136d0 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80136ca:	230c      	movs	r3, #12
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e014      	b.n	80136fa <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80136d0:	f3ef 8305 	mrs	r3, IPSR
 80136d4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80136d6:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80136d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013718 <_txe_semaphore_delete+0x70>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4313      	orrs	r3, r2
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80136e2:	2313      	movs	r3, #19
 80136e4:	617b      	str	r3, [r7, #20]
 80136e6:	e008      	b.n	80136fa <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80136e8:	4b0c      	ldr	r3, [pc, #48]	@ (801371c <_txe_semaphore_delete+0x74>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	4a0b      	ldr	r2, [pc, #44]	@ (8013720 <_txe_semaphore_delete+0x78>)
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d101      	bne.n	80136fa <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80136f6:	2313      	movs	r3, #19
 80136f8:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d103      	bne.n	8013708 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7fd ffb5 	bl	8011670 <_tx_semaphore_delete>
 8013706:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013708:	697b      	ldr	r3, [r7, #20]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	53454d41 	.word	0x53454d41
 8013718:	2400007c 	.word	0x2400007c
 801371c:	240017a0 	.word	0x240017a0
 8013720:	240018e8 	.word	0x240018e8

08013724 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b086      	sub	sp, #24
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801372e:	2300      	movs	r3, #0
 8013730:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d102      	bne.n	801373e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013738:	230c      	movs	r3, #12
 801373a:	617b      	str	r3, [r7, #20]
 801373c:	e01f      	b.n	801377e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	4a15      	ldr	r2, [pc, #84]	@ (8013798 <_txe_semaphore_get+0x74>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d002      	beq.n	801374e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013748:	230c      	movs	r3, #12
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	e017      	b.n	801377e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d014      	beq.n	801377e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013754:	f3ef 8305 	mrs	r3, IPSR
 8013758:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801375a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801375c:	4b0f      	ldr	r3, [pc, #60]	@ (801379c <_txe_semaphore_get+0x78>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4313      	orrs	r3, r2
 8013762:	2b00      	cmp	r3, #0
 8013764:	d002      	beq.n	801376c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013766:	2304      	movs	r3, #4
 8013768:	617b      	str	r3, [r7, #20]
 801376a:	e008      	b.n	801377e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801376c:	4b0c      	ldr	r3, [pc, #48]	@ (80137a0 <_txe_semaphore_get+0x7c>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	4a0b      	ldr	r2, [pc, #44]	@ (80137a4 <_txe_semaphore_get+0x80>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d101      	bne.n	801377e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801377a:	2304      	movs	r3, #4
 801377c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d104      	bne.n	801378e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013784:	6839      	ldr	r1, [r7, #0]
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f7fe f802 	bl	8011790 <_tx_semaphore_get>
 801378c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801378e:	697b      	ldr	r3, [r7, #20]
}
 8013790:	4618      	mov	r0, r3
 8013792:	3718      	adds	r7, #24
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	53454d41 	.word	0x53454d41
 801379c:	2400007c 	.word	0x2400007c
 80137a0:	240017a0 	.word	0x240017a0
 80137a4:	240018e8 	.word	0x240018e8

080137a8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d102      	bne.n	80137bc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80137b6:	230c      	movs	r3, #12
 80137b8:	60fb      	str	r3, [r7, #12]
 80137ba:	e00b      	b.n	80137d4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a07      	ldr	r2, [pc, #28]	@ (80137e0 <_txe_semaphore_put+0x38>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d002      	beq.n	80137cc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80137c6:	230c      	movs	r3, #12
 80137c8:	60fb      	str	r3, [r7, #12]
 80137ca:	e003      	b.n	80137d4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7fe f871 	bl	80118b4 <_tx_semaphore_put>
 80137d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80137d4:	68fb      	ldr	r3, [r7, #12]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	53454d41 	.word	0x53454d41

080137e4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b09a      	sub	sp, #104	@ 0x68
 80137e8:	af06      	add	r7, sp, #24
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
 80137f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80137f2:	2300      	movs	r3, #0
 80137f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80137fc:	230e      	movs	r3, #14
 80137fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013800:	e0bb      	b.n	801397a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013804:	2bb0      	cmp	r3, #176	@ 0xb0
 8013806:	d002      	beq.n	801380e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013808:	230e      	movs	r3, #14
 801380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801380c:	e0b5      	b.n	801397a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801380e:	f3ef 8310 	mrs	r3, PRIMASK
 8013812:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8013814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8013816:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013818:	b672      	cpsid	i
    return(int_posture);
 801381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801381c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801381e:	4b64      	ldr	r3, [pc, #400]	@ (80139b0 <_txe_thread_create+0x1cc>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	3301      	adds	r3, #1
 8013824:	4a62      	ldr	r2, [pc, #392]	@ (80139b0 <_txe_thread_create+0x1cc>)
 8013826:	6013      	str	r3, [r2, #0]
 8013828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801382e:	f383 8810 	msr	PRIMASK, r3
}
 8013832:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013834:	2300      	movs	r3, #0
 8013836:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8013838:	4b5e      	ldr	r3, [pc, #376]	@ (80139b4 <_txe_thread_create+0x1d0>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801383e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013840:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8013842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013844:	3b01      	subs	r3, #1
 8013846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013848:	4413      	add	r3, r2
 801384a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801384e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013850:	2300      	movs	r3, #0
 8013852:	647b      	str	r3, [r7, #68]	@ 0x44
 8013854:	e02b      	b.n	80138ae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801385a:	429a      	cmp	r2, r3
 801385c:	d101      	bne.n	8013862 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801385e:	2301      	movs	r3, #1
 8013860:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8013862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013864:	2b01      	cmp	r3, #1
 8013866:	d028      	beq.n	80138ba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801386e:	429a      	cmp	r2, r3
 8013870:	d308      	bcc.n	8013884 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8013872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013878:	429a      	cmp	r2, r3
 801387a:	d203      	bcs.n	8013884 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801387c:	2300      	movs	r3, #0
 801387e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013880:	2301      	movs	r3, #1
 8013882:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801388a:	429a      	cmp	r2, r3
 801388c:	d308      	bcc.n	80138a0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801388e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013890:	691b      	ldr	r3, [r3, #16]
 8013892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013894:	429a      	cmp	r2, r3
 8013896:	d203      	bcs.n	80138a0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013898:	2300      	movs	r3, #0
 801389a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801389c:	2301      	movs	r3, #1
 801389e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80138a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80138a6:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80138a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138aa:	3301      	adds	r3, #1
 80138ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80138ae:	4b42      	ldr	r3, [pc, #264]	@ (80139b8 <_txe_thread_create+0x1d4>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d3ce      	bcc.n	8013856 <_txe_thread_create+0x72>
 80138b8:	e000      	b.n	80138bc <_txe_thread_create+0xd8>
                break;
 80138ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138bc:	f3ef 8310 	mrs	r3, PRIMASK
 80138c0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80138c2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80138c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80138c6:	b672      	cpsid	i
    return(int_posture);
 80138c8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80138ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80138cc:	4b38      	ldr	r3, [pc, #224]	@ (80139b0 <_txe_thread_create+0x1cc>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	3b01      	subs	r3, #1
 80138d2:	4a37      	ldr	r2, [pc, #220]	@ (80139b0 <_txe_thread_create+0x1cc>)
 80138d4:	6013      	str	r3, [r2, #0]
 80138d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	f383 8810 	msr	PRIMASK, r3
}
 80138e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80138e2:	f7fe fbdd 	bl	80120a0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80138e6:	68fa      	ldr	r2, [r7, #12]
 80138e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d102      	bne.n	80138f4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80138ee:	230e      	movs	r3, #14
 80138f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138f2:	e042      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80138f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d102      	bne.n	8013900 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80138fa:	2303      	movs	r3, #3
 80138fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138fe:	e03c      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d102      	bne.n	801390c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013906:	2303      	movs	r3, #3
 8013908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801390a:	e036      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801390c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801390e:	2bc7      	cmp	r3, #199	@ 0xc7
 8013910:	d802      	bhi.n	8013918 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013912:	2305      	movs	r3, #5
 8013914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013916:	e030      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8013918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801391a:	2b1f      	cmp	r3, #31
 801391c:	d902      	bls.n	8013924 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801391e:	230f      	movs	r3, #15
 8013920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013922:	e02a      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013924:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013928:	429a      	cmp	r2, r3
 801392a:	d902      	bls.n	8013932 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801392c:	2318      	movs	r3, #24
 801392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013930:	e023      	b.n	801397a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013934:	2b01      	cmp	r3, #1
 8013936:	d902      	bls.n	801393e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013938:	2310      	movs	r3, #16
 801393a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801393c:	e01d      	b.n	801397a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801393e:	4b1f      	ldr	r3, [pc, #124]	@ (80139bc <_txe_thread_create+0x1d8>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013946:	4a1e      	ldr	r2, [pc, #120]	@ (80139c0 <_txe_thread_create+0x1dc>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d101      	bne.n	8013950 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801394c:	2313      	movs	r3, #19
 801394e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013950:	f3ef 8305 	mrs	r3, IPSR
 8013954:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013956:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013958:	4b1a      	ldr	r3, [pc, #104]	@ (80139c4 <_txe_thread_create+0x1e0>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	4313      	orrs	r3, r2
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00b      	beq.n	801397a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013962:	f3ef 8305 	mrs	r3, IPSR
 8013966:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013968:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801396a:	4b16      	ldr	r3, [pc, #88]	@ (80139c4 <_txe_thread_create+0x1e0>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	4313      	orrs	r3, r2
 8013970:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013974:	d201      	bcs.n	801397a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013976:	2313      	movs	r3, #19
 8013978:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801397a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801397c:	2b00      	cmp	r3, #0
 801397e:	d112      	bne.n	80139a6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013982:	9305      	str	r3, [sp, #20]
 8013984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013986:	9304      	str	r3, [sp, #16]
 8013988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801398a:	9303      	str	r3, [sp, #12]
 801398c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801398e:	9302      	str	r3, [sp, #8]
 8013990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013992:	9301      	str	r3, [sp, #4]
 8013994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013996:	9300      	str	r3, [sp, #0]
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	68b9      	ldr	r1, [r7, #8]
 801399e:	68f8      	ldr	r0, [r7, #12]
 80139a0:	f7fd ffe0 	bl	8011964 <_tx_thread_create>
 80139a4:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80139a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3750      	adds	r7, #80	@ 0x50
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	24001838 	.word	0x24001838
 80139b4:	240017a8 	.word	0x240017a8
 80139b8:	240017ac 	.word	0x240017ac
 80139bc:	240017a0 	.word	0x240017a0
 80139c0:	240018e8 	.word	0x240018e8
 80139c4:	2400007c 	.word	0x2400007c

080139c8 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139d0:	f3ef 8305 	mrs	r3, IPSR
 80139d4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80139d6:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80139d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013a18 <_txe_thread_delete+0x50>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	4313      	orrs	r3, r2
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d002      	beq.n	80139e8 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80139e2:	2313      	movs	r3, #19
 80139e4:	60fb      	str	r3, [r7, #12]
 80139e6:	e011      	b.n	8013a0c <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d102      	bne.n	80139f4 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80139ee:	230e      	movs	r3, #14
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	e00b      	b.n	8013a0c <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4a08      	ldr	r2, [pc, #32]	@ (8013a1c <_txe_thread_delete+0x54>)
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d002      	beq.n	8013a04 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80139fe:	230e      	movs	r3, #14
 8013a00:	60fb      	str	r3, [r7, #12]
 8013a02:	e003      	b.n	8013a0c <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7fe f8a3 	bl	8011b50 <_tx_thread_delete>
 8013a0a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3710      	adds	r7, #16
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	2400007c 	.word	0x2400007c
 8013a1c:	54485244 	.word	0x54485244

08013a20 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08c      	sub	sp, #48	@ 0x30
 8013a24:	af06      	add	r7, sp, #24
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d102      	bne.n	8013a3a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013a34:	230e      	movs	r3, #14
 8013a36:	617b      	str	r3, [r7, #20]
 8013a38:	e018      	b.n	8013a6c <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8013a78 <_txe_thread_info_get+0x58>)
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d002      	beq.n	8013a4a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013a44:	230e      	movs	r3, #14
 8013a46:	617b      	str	r3, [r7, #20]
 8013a48:	e010      	b.n	8013a6c <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4c:	9304      	str	r3, [sp, #16]
 8013a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a50:	9303      	str	r3, [sp, #12]
 8013a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a54:	9302      	str	r3, [sp, #8]
 8013a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a58:	9301      	str	r3, [sp, #4]
 8013a5a:	6a3b      	ldr	r3, [r7, #32]
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	687a      	ldr	r2, [r7, #4]
 8013a62:	68b9      	ldr	r1, [r7, #8]
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7fe f8eb 	bl	8011c40 <_tx_thread_info_get>
 8013a6a:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8013a6c:	697b      	ldr	r3, [r7, #20]
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3718      	adds	r7, #24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	54485244 	.word	0x54485244

08013a7c <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d102      	bne.n	8013a90 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013a8a:	230e      	movs	r3, #14
 8013a8c:	60fb      	str	r3, [r7, #12]
 8013a8e:	e00b      	b.n	8013aa8 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	4a07      	ldr	r2, [pc, #28]	@ (8013ab4 <_txe_thread_resume+0x38>)
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d002      	beq.n	8013aa0 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013a9a:	230e      	movs	r3, #14
 8013a9c:	60fb      	str	r3, [r7, #12]
 8013a9e:	e003      	b.n	8013aa8 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f7fe f961 	bl	8011d68 <_tx_thread_resume>
 8013aa6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3710      	adds	r7, #16
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	54485244 	.word	0x54485244

08013ab8 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d102      	bne.n	8013acc <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013ac6:	230e      	movs	r3, #14
 8013ac8:	60fb      	str	r3, [r7, #12]
 8013aca:	e00b      	b.n	8013ae4 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	4a07      	ldr	r2, [pc, #28]	@ (8013af0 <_txe_thread_suspend+0x38>)
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d002      	beq.n	8013adc <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013ad6:	230e      	movs	r3, #14
 8013ad8:	60fb      	str	r3, [r7, #12]
 8013ada:	e003      	b.n	8013ae4 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7fe fa6f 	bl	8011fc0 <_tx_thread_suspend>
 8013ae2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3710      	adds	r7, #16
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	54485244 	.word	0x54485244

08013af4 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d102      	bne.n	8013b08 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b02:	230e      	movs	r3, #14
 8013b04:	60fb      	str	r3, [r7, #12]
 8013b06:	e017      	b.n	8013b38 <_txe_thread_terminate+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8013b44 <_txe_thread_terminate+0x50>)
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d002      	beq.n	8013b18 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b12:	230e      	movs	r3, #14
 8013b14:	60fb      	str	r3, [r7, #12]
 8013b16:	e00f      	b.n	8013b38 <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b18:	f3ef 8305 	mrs	r3, IPSR
 8013b1c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8013b1e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013b20:	4b09      	ldr	r3, [pc, #36]	@ (8013b48 <_txe_thread_terminate+0x54>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4313      	orrs	r3, r2
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013b2a:	2313      	movs	r3, #19
 8013b2c:	60fb      	str	r3, [r7, #12]
 8013b2e:	e003      	b.n	8013b38 <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7fe fd07 	bl	8012544 <_tx_thread_terminate>
 8013b36:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013b38:	68fb      	ldr	r3, [r7, #12]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3710      	adds	r7, #16
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	54485244 	.word	0x54485244
 8013b48:	2400007c 	.word	0x2400007c

08013b4c <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8013b58:	4b0c      	ldr	r3, [pc, #48]	@ (8013b8c <_ux_system_error_handler+0x40>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	641a      	str	r2, [r3, #64]	@ 0x40
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8013b60:	4b0a      	ldr	r3, [pc, #40]	@ (8013b8c <_ux_system_error_handler+0x40>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013b66:	3201      	adds	r2, #1
 8013b68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8013b6a:	4b08      	ldr	r3, [pc, #32]	@ (8013b8c <_ux_system_error_handler+0x40>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d006      	beq.n	8013b82 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8013b74:	4b05      	ldr	r3, [pc, #20]	@ (8013b8c <_ux_system_error_handler+0x40>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	68b9      	ldr	r1, [r7, #8]
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	4798      	blx	r3
    }
}
 8013b82:	bf00      	nop
 8013b84:	3710      	adds	r7, #16
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	24001da8 	.word	0x24001da8

08013b90 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b08a      	sub	sp, #40	@ 0x28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d002      	beq.n	8013baa <_ux_system_initialize+0x1a>
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d101      	bne.n	8013bae <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 8013baa:	23fa      	movs	r3, #250	@ 0xfa
 8013bac:	e08a      	b.n	8013cc4 <_ux_system_initialize+0x134>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8013bae:	68ba      	ldr	r2, [r7, #8]
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	f000 fc5a 	bl	801446c <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8013bb8:	4a44      	ldr	r2, [pc, #272]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8013bbe:	234c      	movs	r3, #76	@ 0x4c
 8013bc0:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013bc2:	68fa      	ldr	r2, [r7, #12]
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc6:	4413      	add	r3, r2
 8013bc8:	4a41      	ldr	r2, [pc, #260]	@ (8013cd0 <_ux_system_initialize+0x140>)
 8013bca:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bce:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8013bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	68f9      	ldr	r1, [r7, #12]
 8013bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bdc:	440a      	add	r2, r1
 8013bde:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8013be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be2:	3314      	adds	r3, #20
 8013be4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00c      	beq.n	8013c06 <_ux_system_initialize+0x76>
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d009      	beq.n	8013c06 <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013bf2:	4b36      	ldr	r3, [pc, #216]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68f9      	ldr	r1, [r7, #12]
 8013bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bfa:	440a      	add	r2, r1
 8013bfc:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	3314      	adds	r3, #20
 8013c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c04:	e005      	b.n	8013c12 <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8013c06:	4b31      	ldr	r3, [pc, #196]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	4b30      	ldr	r3, [pc, #192]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	6812      	ldr	r2, [r2, #0]
 8013c10:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013c12:	68fa      	ldr	r2, [r7, #12]
 8013c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c16:	4413      	add	r3, r2
 8013c18:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	3307      	adds	r3, #7
 8013c1e:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013c20:	6a3b      	ldr	r3, [r7, #32]
 8013c22:	f023 0307 	bic.w	r3, r3, #7
 8013c26:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	6a3a      	ldr	r2, [r7, #32]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d301      	bcc.n	8013c3c <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8013c38:	2312      	movs	r3, #18
 8013c3a:	e043      	b.n	8013cc4 <_ux_system_initialize+0x134>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8013c3c:	69fa      	ldr	r2, [r7, #28]
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	1ad3      	subs	r3, r2, r3
 8013c42:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 8013c44:	4b21      	ldr	r3, [pc, #132]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	6a39      	ldr	r1, [r7, #32]
 8013c4c:	69ba      	ldr	r2, [r7, #24]
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 fa7e 	bl	8014150 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d026      	beq.n	8013ca8 <_ux_system_initialize+0x118>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d023      	beq.n	8013ca8 <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 8013c60:	683a      	ldr	r2, [r7, #0]
 8013c62:	2100      	movs	r1, #0
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fc01 	bl	801446c <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8013c6e:	6a3b      	ldr	r3, [r7, #32]
 8013c70:	3307      	adds	r3, #7
 8013c72:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013c74:	6a3b      	ldr	r3, [r7, #32]
 8013c76:	f023 0307 	bic.w	r3, r3, #7
 8013c7a:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	4413      	add	r3, r2
 8013c82:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	6a3a      	ldr	r2, [r7, #32]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d301      	bcc.n	8013c90 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 8013c8c:	2312      	movs	r3, #18
 8013c8e:	e019      	b.n	8013cc4 <_ux_system_initialize+0x134>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8013c98:	4b0c      	ldr	r3, [pc, #48]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	6a39      	ldr	r1, [r7, #32]
 8013ca0:	69ba      	ldr	r2, [r7, #24]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fa54 	bl	8014150 <_ux_utility_memory_byte_pool_create>
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8013ca8:	4b08      	ldr	r3, [pc, #32]	@ (8013ccc <_ux_system_initialize+0x13c>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	330c      	adds	r3, #12
 8013cae:	4909      	ldr	r1, [pc, #36]	@ (8013cd4 <_ux_system_initialize+0x144>)
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f000 fbf5 	bl	80144a0 <_ux_utility_mutex_create>
 8013cb6:	6138      	str	r0, [r7, #16]
    if(status != UX_SUCCESS)
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d001      	beq.n	8013cc2 <_ux_system_initialize+0x132>
        return(UX_MUTEX_ERROR);
 8013cbe:	2317      	movs	r3, #23
 8013cc0:	e000      	b.n	8013cc4 <_ux_system_initialize+0x134>
#endif

    return(UX_SUCCESS);
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3728      	adds	r7, #40	@ 0x28
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	24001da8 	.word	0x24001da8
 8013cd0:	24001dac 	.word	0x24001dac
 8013cd4:	08018bac 	.word	0x08018bac

08013cd8 <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
 8013ce4:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d002      	beq.n	8013cf2 <_uxe_system_initialize+0x1a>
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d101      	bne.n	8013cf6 <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 8013cf2:	23fa      	movs	r3, #250	@ 0xfa
 8013cf4:	e006      	b.n	8013d04 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7ff ff47 	bl	8013b90 <_ux_system_initialize>
 8013d02:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2264      	movs	r2, #100	@ 0x64
 8013d18:	fb02 f303 	mul.w	r3, r2, r3
 8013d1c:	4a07      	ldr	r2, [pc, #28]	@ (8013d3c <_ux_utility_delay_ms+0x30>)
 8013d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d22:	099b      	lsrs	r3, r3, #6
 8013d24:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f7fe f8c7 	bl	8011ec0 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8013d32:	bf00      	nop
}
 8013d34:	3710      	adds	r7, #16
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	10624dd3 	.word	0x10624dd3

08013d40 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
 8013d4c:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8013d4e:	e041      	b.n	8013dd4 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	1c5a      	adds	r2, r3, #1
 8013d54:	60ba      	str	r2, [r7, #8]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d01e      	beq.n	8013d9a <_ux_utility_descriptor_parse+0x5a>
 8013d5c:	2b04      	cmp	r3, #4
 8013d5e:	d12f      	bne.n	8013dc0 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 8013d60:	e004      	b.n	8013d6c <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	1c5a      	adds	r2, r3, #1
 8013d66:	603a      	str	r2, [r7, #0]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	f003 0303 	and.w	r3, r3, #3
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d1f5      	bne.n	8013d62 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8013d76:	68f8      	ldr	r0, [r7, #12]
 8013d78:	f000 f885 	bl	8013e86 <_ux_utility_long_get>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	3304      	adds	r3, #4
 8013d86:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	3304      	adds	r3, #4
 8013d8c:	603b      	str	r3, [r7, #0]
            break;
 8013d8e:	e021      	b.n	8013dd4 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	1c5a      	adds	r2, r3, #1
 8013d94:	603a      	str	r2, [r7, #0]
 8013d96:	2200      	movs	r2, #0
 8013d98:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	f003 0301 	and.w	r3, r3, #1
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d1f5      	bne.n	8013d90 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	f000 fc30 	bl	801460a <_ux_utility_short_get>
 8013daa:	4603      	mov	r3, r0
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	3302      	adds	r3, #2
 8013db6:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	3302      	adds	r3, #2
 8013dbc:	603b      	str	r3, [r7, #0]
            break;
 8013dbe:	e009      	b.n	8013dd4 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	781a      	ldrb	r2, [r3, #0]
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	1e5a      	subs	r2, r3, #1
 8013dd8:	607a      	str	r2, [r7, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1b8      	bne.n	8013d50 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 8013dde:	bf00      	nop
}
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <_ux_utility_event_flags_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b084      	sub	sp, #16
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 8013df0:	2224      	movs	r2, #36	@ 0x24
 8013df2:	6839      	ldr	r1, [r7, #0]
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff f8fd 	bl	8012ff4 <_txe_event_flags_create>
 8013dfa:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d004      	beq.n	8013e0c <_ux_utility_event_flags_create+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 8013e02:	2218      	movs	r2, #24
 8013e04:	2108      	movs	r1, #8
 8013e06:	2002      	movs	r0, #2
 8013e08:	f7ff fea0 	bl	8013b4c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8013e0c:	68fb      	ldr	r3, [r7, #12]
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <_ux_utility_event_flags_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b084      	sub	sp, #16
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7ff f97a 	bl	8013118 <_txe_event_flags_delete>
 8013e24:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8013e26:	68fb      	ldr	r3, [r7, #12]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b088      	sub	sp, #32
 8013e34:	af02      	add	r7, sp, #8
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8013e3e:	f107 0210 	add.w	r2, r7, #16
 8013e42:	6a3b      	ldr	r3, [r7, #32]
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	4613      	mov	r3, r2
 8013e48:	687a      	ldr	r2, [r7, #4]
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f7ff f9a1 	bl	8013194 <_txe_event_flags_get>
 8013e52:	6178      	str	r0, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 8013e54:	693a      	ldr	r2, [r7, #16]
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 8013e5a:	697b      	ldr	r3, [r7, #20]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3718      	adds	r7, #24
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b086      	sub	sp, #24
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8013e70:	687a      	ldr	r2, [r7, #4]
 8013e72:	68b9      	ldr	r1, [r7, #8]
 8013e74:	68f8      	ldr	r0, [r7, #12]
 8013e76:	f7ff f9e3 	bl	8013240 <_txe_event_flags_set>
 8013e7a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8013e7c:	697b      	ldr	r3, [r7, #20]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3718      	adds	r7, #24
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8013e86:	b480      	push	{r7}
 8013e88:	b085      	sub	sp, #20
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	1c5a      	adds	r2, r3, #1
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	781b      	ldrb	r3, [r3, #0]
 8013e96:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	1c5a      	adds	r2, r3, #1
 8013e9c:	607a      	str	r2, [r7, #4]
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	021b      	lsls	r3, r3, #8
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	1c5a      	adds	r2, r3, #1
 8013eac:	607a      	str	r2, [r7, #4]
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	041b      	lsls	r3, r3, #16
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	4313      	orrs	r3, r2
 8013eb6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	061b      	lsls	r3, r3, #24
 8013ebe:	68fa      	ldr	r2, [r7, #12]
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8013ec4:	68fb      	ldr	r3, [r7, #12]
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3714      	adds	r7, #20
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr

08013ed2 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 8013ed2:	b480      	push	{r7}
 8013ed4:	b083      	sub	sp, #12
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
 8013eda:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	1c5a      	adds	r2, r3, #1
 8013ee0:	607a      	str	r2, [r7, #4]
 8013ee2:	683a      	ldr	r2, [r7, #0]
 8013ee4:	b2d2      	uxtb	r2, r2
 8013ee6:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	0a19      	lsrs	r1, r3, #8
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	1c5a      	adds	r2, r3, #1
 8013ef0:	607a      	str	r2, [r7, #4]
 8013ef2:	b2ca      	uxtb	r2, r1
 8013ef4:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	0c19      	lsrs	r1, r3, #16
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	b2ca      	uxtb	r2, r1
 8013f02:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	0e1b      	lsrs	r3, r3, #24
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8013f0e:	bf00      	nop
}
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr
	...

08013f1c <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08e      	sub	sp, #56	@ 0x38
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d104      	bne.n	8013f38 <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8013f2e:	4b73      	ldr	r3, [pc, #460]	@ (80140fc <_ux_utility_memory_allocate+0x1e0>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f36:	e009      	b.n	8013f4c <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d104      	bne.n	8013f48 <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 8013f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80140fc <_ux_utility_memory_allocate+0x1e0>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f46:	e001      	b.n	8013f4c <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 8013f48:	2300      	movs	r3, #0
 8013f4a:	e0d2      	b.n	80140f2 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 8013f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 8013f52:	2300      	movs	r3, #0
 8013f54:	e0cd      	b.n	80140f2 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	e0c8      	b.n	80140f2 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8013f60:	4b66      	ldr	r3, [pc, #408]	@ (80140fc <_ux_utility_memory_allocate+0x1e0>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	330c      	adds	r3, #12
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 facb 	bl	8014502 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f72:	d101      	bne.n	8013f78 <_ux_utility_memory_allocate+0x5c>
        memory_alignment = UX_NO_ALIGN;
 8013f74:	2300      	movs	r3, #0
 8013f76:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2b06      	cmp	r3, #6
 8013f7c:	d801      	bhi.n	8013f82 <_ux_utility_memory_allocate+0x66>
        memory_alignment =  UX_ALIGN_MIN;
 8013f7e:	2307      	movs	r3, #7
 8013f80:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	3307      	adds	r3, #7
 8013f86:	f023 0307 	bic.w	r3, r3, #7
 8013f8a:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2b07      	cmp	r3, #7
 8013f90:	d805      	bhi.n	8013f9e <_ux_utility_memory_allocate+0x82>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 8013f92:	6879      	ldr	r1, [r7, #4]
 8013f94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013f96:	f000 f92b 	bl	80141f0 <_ux_utility_memory_byte_pool_search>
 8013f9a:	6338      	str	r0, [r7, #48]	@ 0x30
 8013f9c:	e007      	b.n	8013fae <_ux_utility_memory_allocate+0x92>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	4413      	add	r3, r2
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013fa8:	f000 f922 	bl	80141f0 <_ux_utility_memory_byte_pool_search>
 8013fac:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 8013fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10c      	bne.n	8013fce <_ux_utility_memory_allocate+0xb2>
    {

        /* We could not find a memory block.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013fb4:	4b51      	ldr	r3, [pc, #324]	@ (80140fc <_ux_utility_memory_allocate+0x1e0>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	330c      	adds	r3, #12
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f000 fa96 	bl	80144ec <_ux_utility_mutex_off>

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8013fc0:	2212      	movs	r2, #18
 8013fc2:	2108      	movs	r1, #8
 8013fc4:	2002      	movs	r0, #2
 8013fc6:	f7ff fdc1 	bl	8013b4c <_ux_system_error_handler>

        return(UX_NULL);
 8013fca:	2300      	movs	r3, #0
 8013fcc:	e091      	b.n	80140f2 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 8013fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8013fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fdc:	1ad3      	subs	r3, r2, r3
 8013fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8013fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe2:	3b08      	subs	r3, #8
 8013fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe8:	3308      	adds	r3, #8
 8013fea:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 8013fec:	6a3a      	ldr	r2, [r7, #32]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	4013      	ands	r3, r2
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d02f      	beq.n	8014056 <_ux_utility_memory_allocate+0x13a>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8013ff6:	6a3b      	ldr	r3, [r7, #32]
 8013ff8:	3308      	adds	r3, #8
 8013ffa:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 8013ffc:	6a3a      	ldr	r2, [r7, #32]
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	4413      	add	r3, r2
 8014002:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	43db      	mvns	r3, r3
 8014008:	6a3a      	ldr	r2, [r7, #32]
 801400a:	4013      	ands	r3, r2
 801400c:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	3b08      	subs	r3, #8
 8014012:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 8014014:	6a3b      	ldr	r3, [r7, #32]
 8014016:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8014018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401a:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 801401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	69fb      	ldr	r3, [r7, #28]
 8014022:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8014024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014026:	3304      	adds	r3, #4
 8014028:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	4a33      	ldr	r2, [pc, #204]	@ (8014100 <_ux_utility_memory_allocate+0x1e4>)
 8014032:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 8014034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	1c5a      	adds	r2, r3, #1
 801403a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801403c:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 801403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014042:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8014044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	461a      	mov	r2, r3
 801404c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801404e:	1a9b      	subs	r3, r3, r2
 8014050:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 8014052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014054:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8014056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	2b13      	cmp	r3, #19
 801405e:	d91e      	bls.n	801409e <_ux_utility_memory_allocate+0x182>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	3308      	adds	r3, #8
 8014064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014066:	4413      	add	r3, r2
 8014068:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801406c:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014070:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 8014072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014074:	681a      	ldr	r2, [r3, #0]
 8014076:	69fb      	ldr	r3, [r7, #28]
 8014078:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801407c:	3304      	adds	r3, #4
 801407e:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	4a1e      	ldr	r2, [pc, #120]	@ (8014100 <_ux_utility_memory_allocate+0x1e4>)
 8014088:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 801408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014092:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 8014094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014098:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a0:	3304      	adds	r3, #4
 80140a2:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80140a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140ac:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 80140ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	f1a3 0208 	sub.w	r2, r3, #8
 80140ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140bc:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 80140be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d105      	bne.n	80140d4 <_ux_utility_memory_allocate+0x1b8>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80140c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 80140cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140d2:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 80140d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d6:	3308      	adds	r3, #8
 80140d8:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 80140da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140dc:	2100      	movs	r1, #0
 80140de:	69b8      	ldr	r0, [r7, #24]
 80140e0:	f000 f9c4 	bl	801446c <_ux_utility_memory_set>
    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)
        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80140e4:	4b05      	ldr	r3, [pc, #20]	@ (80140fc <_ux_utility_memory_allocate+0x1e0>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	330c      	adds	r3, #12
 80140ea:	4618      	mov	r0, r3
 80140ec:	f000 f9fe 	bl	80144ec <_ux_utility_mutex_off>

    return(work_ptr);
 80140f0:	69bb      	ldr	r3, [r7, #24]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3738      	adds	r7, #56	@ 0x38
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	24001da8 	.word	0x24001da8
 8014100:	ffffeeee 	.word	0xffffeeee

08014104 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00a      	beq.n	801412e <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8014118:	2100      	movs	r1, #0
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	fba3 2302 	umull	r2, r3, r3, r2
 8014122:	2b00      	cmp	r3, #0
 8014124:	d000      	beq.n	8014128 <_ux_utility_memory_allocate_mulc_safe+0x24>
 8014126:	2101      	movs	r1, #1
 8014128:	460b      	mov	r3, r1
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10a      	bne.n	8014144 <_ux_utility_memory_allocate_mulc_safe+0x40>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	683a      	ldr	r2, [r7, #0]
 8014132:	fb02 f303 	mul.w	r3, r2, r3
 8014136:	461a      	mov	r2, r3
 8014138:	68b9      	ldr	r1, [r7, #8]
 801413a:	68f8      	ldr	r0, [r7, #12]
 801413c:	f7ff feee 	bl	8013f1c <_ux_utility_memory_allocate>
 8014140:	4603      	mov	r3, r0
 8014142:	e000      	b.n	8014146 <_ux_utility_memory_allocate_mulc_safe+0x42>
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3710      	adds	r7, #16
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
	...

08014150 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b088      	sub	sp, #32
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 801415c:	2214      	movs	r2, #20
 801415e:	2100      	movs	r1, #0
 8014160:	68f8      	ldr	r0, [r7, #12]
 8014162:	f000 f983 	bl	801446c <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f023 0303 	bic.w	r3, r3, #3
 801416c:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	68ba      	ldr	r2, [r7, #8]
 8014172:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	68ba      	ldr	r2, [r7, #8]
 801417e:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f1a3 0208 	sub.w	r2, r3, #8
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2202      	movs	r2, #2
 801418e:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8014194:	69fa      	ldr	r2, [r7, #28]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	4413      	add	r3, r2
 801419a:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	3b04      	subs	r3, #4
 80141a0:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	69ba      	ldr	r2, [r7, #24]
 80141ae:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	3b04      	subs	r3, #4
 80141b4:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80141b6:	69fb      	ldr	r3, [r7, #28]
 80141b8:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	68ba      	ldr	r2, [r7, #8]
 80141be:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	69fa      	ldr	r2, [r7, #28]
 80141cc:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	3304      	adds	r3, #4
 80141d6:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	4a03      	ldr	r2, [pc, #12]	@ (80141ec <_ux_utility_memory_byte_pool_create+0x9c>)
 80141e0:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3720      	adds	r7, #32
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	ffffeeee 	.word	0xffffeeee

080141f0 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b08d      	sub	sp, #52	@ 0x34
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 80141fa:	2300      	movs	r3, #0
 80141fc:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	3b02      	subs	r3, #2
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	4413      	add	r3, r2
 801420c:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 801420e:	683a      	ldr	r2, [r7, #0]
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	429a      	cmp	r2, r3
 8014214:	d301      	bcc.n	801421a <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8014216:	2300      	movs	r3, #0
 8014218:	e07d      	b.n	8014316 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	689a      	ldr	r2, [r3, #8]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	429a      	cmp	r2, r3
 8014224:	d308      	bcc.n	8014238 <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	689a      	ldr	r2, [r3, #8]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	68d9      	ldr	r1, [r3, #12]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	691b      	ldr	r3, [r3, #16]
 8014232:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8014234:	429a      	cmp	r2, r3
 8014236:	d901      	bls.n	801423c <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 8014238:	2300      	movs	r3, #0
 801423a:	e06c      	b.n	8014316 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	3301      	adds	r3, #1
 8014248:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 801424a:	2300      	movs	r3, #0
 801424c:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014250:	3304      	adds	r3, #4
 8014252:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	4a31      	ldr	r2, [pc, #196]	@ (8014324 <_ux_utility_memory_byte_pool_search+0x134>)
 801425e:	4293      	cmp	r3, r2
 8014260:	d143      	bne.n	80142ea <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 8014262:	6a3b      	ldr	r3, [r7, #32]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d104      	bne.n	8014272 <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801426c:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 801426e:	2301      	movs	r3, #1
 8014270:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8014272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014274:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014280:	1ad3      	subs	r3, r2, r3
 8014282:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8014284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014286:	3b08      	subs	r3, #8
 8014288:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 801428a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	d23a      	bcs.n	8014308 <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 8014292:	2300      	movs	r3, #0
 8014294:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	3304      	adds	r3, #4
 801429a:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4a1f      	ldr	r2, [pc, #124]	@ (8014324 <_ux_utility_memory_byte_pool_search+0x134>)
 80142a6:	4293      	cmp	r3, r2
 80142a8:	d113      	bne.n	80142d2 <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	1e5a      	subs	r2, r3, #1
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	689b      	ldr	r3, [r3, #8]
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d114      	bne.n	80142f4 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142ce:	609a      	str	r2, [r3, #8]
 80142d0:	e010      	b.n	80142f4 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 80142dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d008      	beq.n	80142f4 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 80142e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e4:	3b01      	subs	r3, #1
 80142e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80142e8:	e004      	b.n	80142f4 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80142ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ec:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 80142f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d002      	beq.n	8014300 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 80142fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142fc:	3b01      	subs	r3, #1
 80142fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 8014300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1a3      	bne.n	801424e <_ux_utility_memory_byte_pool_search+0x5e>
 8014306:	e000      	b.n	801430a <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 8014308:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 801430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 8014310:	2300      	movs	r3, #0
 8014312:	e000      	b.n	8014316 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8014314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014316:	4618      	mov	r0, r3
 8014318:	3734      	adds	r7, #52	@ 0x34
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop
 8014324:	ffffeeee 	.word	0xffffeeee

08014328 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 8014328:	b480      	push	{r7}
 801432a:	b087      	sub	sp, #28
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 801433c:	e007      	b.n	801434e <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 801433e:	697a      	ldr	r2, [r7, #20]
 8014340:	1c53      	adds	r3, r2, #1
 8014342:	617b      	str	r3, [r7, #20]
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	1c59      	adds	r1, r3, #1
 8014348:	6139      	str	r1, [r7, #16]
 801434a:	7812      	ldrb	r2, [r2, #0]
 801434c:	701a      	strb	r2, [r3, #0]
    while(length--)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	1e5a      	subs	r2, r3, #1
 8014352:	607a      	str	r2, [r7, #4]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d1f2      	bne.n	801433e <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8014358:	bf00      	nop
}
 801435a:	371c      	adds	r7, #28
 801435c:	46bd      	mov	sp, r7
 801435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014362:	4770      	bx	lr

08014364 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b08a      	sub	sp, #40	@ 0x28
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 801436c:	4b3d      	ldr	r3, [pc, #244]	@ (8014464 <_ux_utility_memory_free+0x100>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	330c      	adds	r3, #12
 8014372:	4618      	mov	r0, r3
 8014374:	f000 f8c5 	bl	8014502 <_ux_utility_mutex_on>
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 8014378:	2300      	movs	r3, #0
 801437a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d03b      	beq.n	80143fe <_ux_utility_memory_free+0x9a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8014386:	6a3b      	ldr	r3, [r7, #32]
 8014388:	3b08      	subs	r3, #8
 801438a:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801438c:	6a3b      	ldr	r3, [r7, #32]
 801438e:	3304      	adds	r3, #4
 8014390:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4a33      	ldr	r2, [pc, #204]	@ (8014468 <_ux_utility_memory_free+0x104>)
 801439c:	4293      	cmp	r3, r2
 801439e:	d022      	beq.n	80143e6 <_ux_utility_memory_free+0x82>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80143a0:	6a3b      	ldr	r3, [r7, #32]
 80143a2:	3304      	adds	r3, #4
 80143a4:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 80143b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d00b      	beq.n	80143ce <_ux_utility_memory_free+0x6a>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80143b6:	4b2b      	ldr	r3, [pc, #172]	@ (8014464 <_ux_utility_memory_free+0x100>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 80143bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143be:	429a      	cmp	r2, r3
 80143c0:	d029      	beq.n	8014416 <_ux_utility_memory_free+0xb2>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 80143c2:	4b28      	ldr	r3, [pc, #160]	@ (8014464 <_ux_utility_memory_free+0x100>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80143c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d023      	beq.n	8014416 <_ux_utility_memory_free+0xb2>
            {

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80143ce:	4b25      	ldr	r3, [pc, #148]	@ (8014464 <_ux_utility_memory_free+0x100>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	330c      	adds	r3, #12
 80143d4:	4618      	mov	r0, r3
 80143d6:	f000 f889 	bl	80144ec <_ux_utility_mutex_off>

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80143da:	2219      	movs	r2, #25
 80143dc:	2108      	movs	r1, #8
 80143de:	2002      	movs	r0, #2
 80143e0:	f7ff fbb4 	bl	8013b4c <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 80143e4:	e03b      	b.n	801445e <_ux_utility_memory_free+0xfa>
            }
        }
        else
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80143e6:	4b1f      	ldr	r3, [pc, #124]	@ (8014464 <_ux_utility_memory_free+0x100>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	330c      	adds	r3, #12
 80143ec:	4618      	mov	r0, r3
 80143ee:	f000 f87d 	bl	80144ec <_ux_utility_mutex_off>

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80143f2:	2219      	movs	r2, #25
 80143f4:	2108      	movs	r1, #8
 80143f6:	2002      	movs	r0, #2
 80143f8:	f7ff fba8 	bl	8013b4c <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 80143fc:	e02f      	b.n	801445e <_ux_utility_memory_free+0xfa>
    }
    else
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80143fe:	4b19      	ldr	r3, [pc, #100]	@ (8014464 <_ux_utility_memory_free+0x100>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	330c      	adds	r3, #12
 8014404:	4618      	mov	r0, r3
 8014406:	f000 f871 	bl	80144ec <_ux_utility_mutex_off>

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 801440a:	2219      	movs	r2, #25
 801440c:	2108      	movs	r1, #8
 801440e:	2002      	movs	r0, #2
 8014410:	f7ff fb9c 	bl	8013b4c <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 8014414:	e023      	b.n	801445e <_ux_utility_memory_free+0xfa>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	3304      	adds	r3, #4
 801441a:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	4a11      	ldr	r2, [pc, #68]	@ (8014468 <_ux_utility_memory_free+0x104>)
 8014424:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8014426:	6a3b      	ldr	r3, [r7, #32]
 8014428:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8014430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	68f9      	ldr	r1, [r7, #12]
 8014436:	6a3a      	ldr	r2, [r7, #32]
 8014438:	1a8a      	subs	r2, r1, r2
 801443a:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 801443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801443e:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 8014440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014442:	689b      	ldr	r3, [r3, #8]
 8014444:	6a3a      	ldr	r2, [r7, #32]
 8014446:	429a      	cmp	r2, r3
 8014448:	d202      	bcs.n	8014450 <_ux_utility_memory_free+0xec>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 801444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801444c:	6a3a      	ldr	r2, [r7, #32]
 801444e:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014450:	4b04      	ldr	r3, [pc, #16]	@ (8014464 <_ux_utility_memory_free+0x100>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	330c      	adds	r3, #12
 8014456:	4618      	mov	r0, r3
 8014458:	f000 f848 	bl	80144ec <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 801445c:	bf00      	nop
}
 801445e:	3728      	adds	r7, #40	@ 0x28
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	24001da8 	.word	0x24001da8
 8014468:	ffffeeee 	.word	0xffffeeee

0801446c <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 801446c:	b480      	push	{r7}
 801446e:	b087      	sub	sp, #28
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	460b      	mov	r3, r1
 8014476:	607a      	str	r2, [r7, #4]
 8014478:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 801447e:	e004      	b.n	801448a <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	1c5a      	adds	r2, r3, #1
 8014484:	617a      	str	r2, [r7, #20]
 8014486:	7afa      	ldrb	r2, [r7, #11]
 8014488:	701a      	strb	r2, [r3, #0]
    while(length--)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	1e5a      	subs	r2, r3, #1
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1f5      	bne.n	8014480 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 8014494:	bf00      	nop
}
 8014496:	371c      	adds	r7, #28
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 80144aa:	2334      	movs	r3, #52	@ 0x34
 80144ac:	2200      	movs	r2, #0
 80144ae:	6839      	ldr	r1, [r7, #0]
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7fe fef3 	bl	801329c <_txe_mutex_create>
 80144b6:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d004      	beq.n	80144c8 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	2108      	movs	r1, #8
 80144c2:	2002      	movs	r0, #2
 80144c4:	f7ff fb42 	bl	8013b4c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 80144c8:	68fb      	ldr	r3, [r7, #12]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3710      	adds	r7, #16
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b084      	sub	sp, #16
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f7fe ff7c 	bl	80133d8 <_txe_mutex_delete>
 80144e0:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 80144e2:	68fb      	ldr	r3, [r7, #12]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f7ff f807 	bl	8013508 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 80144fa:	bf00      	nop
}
 80144fc:	3708      	adds	r7, #8
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b084      	sub	sp, #16
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 801450a:	f04f 31ff 	mov.w	r1, #4294967295
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7fe ffa0 	bl	8013454 <_txe_mutex_get>
 8014514:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d005      	beq.n	8014528 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801451c:	68fa      	ldr	r2, [r7, #12]
 801451e:	2108      	movs	r1, #8
 8014520:	2002      	movs	r0, #2
 8014522:	f7ff fb13 	bl	8013b4c <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 8014526:	bf00      	nop
 8014528:	bf00      	nop
}
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 801453c:	231c      	movs	r3, #28
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	68b9      	ldr	r1, [r7, #8]
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f7ff f81a 	bl	801357c <_txe_semaphore_create>
 8014548:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d004      	beq.n	801455a <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8014550:	697a      	ldr	r2, [r7, #20]
 8014552:	2108      	movs	r1, #8
 8014554:	2002      	movs	r0, #2
 8014556:	f7ff faf9 	bl	8013b4c <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 801455a:	697b      	ldr	r3, [r7, #20]
}
 801455c:	4618      	mov	r0, r3
 801455e:	3718      	adds	r7, #24
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7ff f89b 	bl	80136a8 <_txe_semaphore_delete>
 8014572:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8014574:	68fb      	ldr	r3, [r7, #12]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
	...

08014580 <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b092      	sub	sp, #72	@ 0x48
 8014584:	af06      	add	r7, sp, #24
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 801458a:	f7fd fb3b 	bl	8011c04 <_tx_thread_identify>
 801458e:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 8014590:	f107 001c 	add.w	r0, r7, #28
 8014594:	f107 0220 	add.w	r2, r7, #32
 8014598:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 801459c:	f107 0308 	add.w	r3, r7, #8
 80145a0:	9304      	str	r3, [sp, #16]
 80145a2:	f107 030c 	add.w	r3, r7, #12
 80145a6:	9303      	str	r3, [sp, #12]
 80145a8:	f107 0310 	add.w	r3, r7, #16
 80145ac:	9302      	str	r3, [sp, #8]
 80145ae:	f107 0314 	add.w	r3, r7, #20
 80145b2:	9301      	str	r3, [sp, #4]
 80145b4:	f107 0318 	add.w	r3, r7, #24
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	4603      	mov	r3, r0
 80145bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145be:	f7ff fa2f 	bl	8013a20 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 80145c2:	4b0a      	ldr	r3, [pc, #40]	@ (80145ec <_ux_utility_semaphore_get+0x6c>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	689a      	ldr	r2, [r3, #8]
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d203      	bcs.n	80145d6 <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 80145ce:	4b07      	ldr	r3, [pc, #28]	@ (80145ec <_ux_utility_semaphore_get+0x6c>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	69ba      	ldr	r2, [r7, #24]
 80145d4:	609a      	str	r2, [r3, #8]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 80145d6:	6839      	ldr	r1, [r7, #0]
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff f8a3 	bl	8013724 <_txe_semaphore_get>
 80145de:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* Return completion status.  */
    return(status);
 80145e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3730      	adds	r7, #48	@ 0x30
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	24001da8 	.word	0x24001da8

080145f0 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b084      	sub	sp, #16
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f7ff f8d5 	bl	80137a8 <_txe_semaphore_put>
 80145fe:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8014600:	68fb      	ldr	r3, [r7, #12]
}
 8014602:	4618      	mov	r0, r3
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 801460a:	b480      	push	{r7}
 801460c:	b085      	sub	sp, #20
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	1c5a      	adds	r2, r3, #1
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	021b      	lsls	r3, r3, #8
 8014622:	b29a      	uxth	r2, r3
 8014624:	89fb      	ldrh	r3, [r7, #14]
 8014626:	4313      	orrs	r3, r2
 8014628:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 801462a:	89fb      	ldrh	r3, [r7, #14]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3714      	adds	r7, #20
 8014630:	46bd      	mov	sp, r7
 8014632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014636:	4770      	bx	lr

08014638 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d101      	bne.n	801464e <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 801464a:	23ff      	movs	r3, #255	@ 0xff
 801464c:	e01d      	b.n	801468a <_ux_utility_string_length_check+0x52>

    string_length = 0;
 801464e:	2300      	movs	r3, #0
 8014650:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	4413      	add	r3, r2
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00d      	beq.n	801467a <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	3301      	adds	r3, #1
 8014662:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8014664:	697a      	ldr	r2, [r7, #20]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	429a      	cmp	r2, r3
 801466a:	d9f2      	bls.n	8014652 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 801466c:	22ff      	movs	r2, #255	@ 0xff
 801466e:	2108      	movs	r1, #8
 8014670:	2002      	movs	r0, #2
 8014672:	f7ff fa6b 	bl	8013b4c <_ux_system_error_handler>

            return(UX_ERROR);
 8014676:	23ff      	movs	r3, #255	@ 0xff
 8014678:	e007      	b.n	801468a <_ux_utility_string_length_check+0x52>
            break;
 801467a:	bf00      	nop
        }
    }

    if (string_length_ptr)
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d002      	beq.n	8014688 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	697a      	ldr	r2, [r7, #20]
 8014686:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8014688:	2300      	movs	r3, #0
}
 801468a:	4618      	mov	r0, r3
 801468c:	3718      	adds	r7, #24
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 8014692:	b580      	push	{r7, lr}
 8014694:	b08e      	sub	sp, #56	@ 0x38
 8014696:	af08      	add	r7, sp, #32
 8014698:	60f8      	str	r0, [r7, #12]
 801469a:	60b9      	str	r1, [r7, #8]
 801469c:	607a      	str	r2, [r7, #4]
 801469e:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 80146a0:	23b0      	movs	r3, #176	@ 0xb0
 80146a2:	9306      	str	r3, [sp, #24]
 80146a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146a6:	9305      	str	r3, [sp, #20]
 80146a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146aa:	9304      	str	r3, [sp, #16]
 80146ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ae:	9303      	str	r3, [sp, #12]
 80146b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b2:	9302      	str	r3, [sp, #8]
 80146b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b6:	9301      	str	r3, [sp, #4]
 80146b8:	6a3b      	ldr	r3, [r7, #32]
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	68b9      	ldr	r1, [r7, #8]
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	f7ff f88e 	bl	80137e4 <_txe_thread_create>
 80146c8:	6178      	str	r0, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d004      	beq.n	80146da <_ux_utility_thread_create+0x48>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80146d0:	697a      	ldr	r2, [r7, #20]
 80146d2:	2108      	movs	r1, #8
 80146d4:	2002      	movs	r0, #2
 80146d6:	f7ff fa39 	bl	8013b4c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 80146da:	697b      	ldr	r3, [r7, #20]
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3718      	adds	r7, #24
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <_ux_utility_thread_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f7ff fa01 	bl	8013af4 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff f968 	bl	80139c8 <_txe_thread_delete>
 80146f8:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 80146fa:	68fb      	ldr	r3, [r7, #12]
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3710      	adds	r7, #16
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <_ux_utility_thread_resume>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f7ff f9b5 	bl	8013a7c <_txe_thread_resume>
 8014712:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8014714:	68fb      	ldr	r3, [r7, #12]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3710      	adds	r7, #16
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <_ux_utility_thread_suspend>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b084      	sub	sp, #16
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f7ff f9c6 	bl	8013ab8 <_txe_thread_suspend>
 801472c:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 801472e:	68fb      	ldr	r3, [r7, #12]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6a1b      	ldr	r3, [r3, #32]
 8014744:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801474a:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	693a      	ldr	r2, [r7, #16]
 8014756:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d003      	beq.n	801476e <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	6938      	ldr	r0, [r7, #16]
 801476c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 801476e:	2300      	movs	r3, #0
}
 8014770:	4618      	mov	r0, r3
 8014772:	3718      	adds	r7, #24
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b08a      	sub	sp, #40	@ 0x28
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6a1b      	ldr	r3, [r3, #32]
 8014784:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8014786:	6a3b      	ldr	r3, [r7, #32]
 8014788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801478a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801478c:	4b51      	ldr	r3, [pc, #324]	@ (80148d4 <_ux_device_class_cdc_acm_control_request+0x15c>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	3320      	adds	r3, #32
 8014792:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	3338      	adds	r3, #56	@ 0x38
 8014798:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80147a0:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	3354      	adds	r3, #84	@ 0x54
 80147a6:	3302      	adds	r3, #2
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7ff ff2e 	bl	801460a <_ux_utility_short_get>
 80147ae:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	3354      	adds	r3, #84	@ 0x54
 80147b4:	3306      	adds	r3, #6
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff ff27 	bl	801460a <_ux_utility_short_get>
 80147bc:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	2b22      	cmp	r3, #34	@ 0x22
 80147c6:	d009      	beq.n	80147dc <_ux_device_class_cdc_acm_control_request+0x64>
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	2b22      	cmp	r3, #34	@ 0x22
 80147cc:	d877      	bhi.n	80148be <_ux_device_class_cdc_acm_control_request+0x146>
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2b20      	cmp	r3, #32
 80147d2:	d051      	beq.n	8014878 <_ux_device_class_cdc_acm_control_request+0x100>
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	2b21      	cmp	r3, #33	@ 0x21
 80147d8:	d023      	beq.n	8014822 <_ux_device_class_cdc_acm_control_request+0xaa>
 80147da:	e070      	b.n	80148be <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	2200      	movs	r2, #0
 80147e0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	2200      	movs	r2, #0
 80147e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f003 0301 	and.w	r3, r3, #1
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d003      	beq.n	80147fe <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	2201      	movs	r2, #1
 80147fa:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	f003 0302 	and.w	r3, r3, #2
 8014804:	2b00      	cmp	r3, #0
 8014806:	d003      	beq.n	8014810 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	2201      	movs	r2, #1
 801480c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d054      	beq.n	80148c2 <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	69f8      	ldr	r0, [r7, #28]
 801481e:	4798      	blx	r3
            }

            break ;
 8014820:	e04f      	b.n	80148c2 <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	2b07      	cmp	r3, #7
 8014826:	d901      	bls.n	801482c <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 8014828:	2307      	movs	r3, #7
 801482a:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	68da      	ldr	r2, [r3, #12]
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014834:	4619      	mov	r1, r3
 8014836:	4610      	mov	r0, r2
 8014838:	f7ff fb4b 	bl	8013ed2 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	3304      	adds	r3, #4
 8014842:	69fa      	ldr	r2, [r7, #28]
 8014844:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 8014848:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	68db      	ldr	r3, [r3, #12]
 801484e:	3305      	adds	r3, #5
 8014850:	69fa      	ldr	r2, [r7, #28]
 8014852:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8014856:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	3306      	adds	r3, #6
 801485e:	69fa      	ldr	r2, [r7, #28]
 8014860:	f892 207e 	ldrb.w	r2, [r2, #126]	@ 0x7e
 8014864:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	2203      	movs	r2, #3
 801486a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 801486c:	68ba      	ldr	r2, [r7, #8]
 801486e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014870:	6978      	ldr	r0, [r7, #20]
 8014872:	f003 fbc9 	bl	8018008 <_ux_device_stack_transfer_request>
            break; 
 8014876:	e027      	b.n	80148c8 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	4618      	mov	r0, r3
 801487e:	f7ff fb02 	bl	8013e86 <_ux_utility_long_get>
 8014882:	4602      	mov	r2, r0
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	791a      	ldrb	r2, [r3, #4]
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	795a      	ldrb	r2, [r3, #5]
 801489a:	69fb      	ldr	r3, [r7, #28]
 801489c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	799a      	ldrb	r2, [r3, #6]
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d008      	beq.n	80148c6 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	69f8      	ldr	r0, [r7, #28]
 80148ba:	4798      	blx	r3
            }

            break ;
 80148bc:	e003      	b.n	80148c6 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80148be:	23ff      	movs	r3, #255	@ 0xff
 80148c0:	e003      	b.n	80148ca <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 80148c2:	bf00      	nop
 80148c4:	e000      	b.n	80148c8 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 80148c6:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80148c8:	2300      	movs	r3, #0
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3728      	adds	r7, #40	@ 0x28
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	24001dac 	.word	0x24001dac

080148d8 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6a1b      	ldr	r3, [r3, #32]
 80148e4:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80148ea:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	69db      	ldr	r3, [r3, #28]
 80148f6:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	7b9b      	ldrb	r3, [r3, #14]
 80148fc:	b25b      	sxtb	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	db05      	blt.n	801490e <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8014906:	69bb      	ldr	r3, [r7, #24]
 8014908:	695b      	ldr	r3, [r3, #20]
 801490a:	61fb      	str	r3, [r7, #28]
 801490c:	e002      	b.n	8014914 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	695b      	ldr	r3, [r3, #20]
 8014912:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8014914:	2126      	movs	r1, #38	@ 0x26
 8014916:	69f8      	ldr	r0, [r7, #28]
 8014918:	f003 fb64 	bl	8017fe4 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 801491c:	2126      	movs	r1, #38	@ 0x26
 801491e:	69b8      	ldr	r0, [r7, #24]
 8014920:	f003 fb60 	bl	8017fe4 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 8014924:	2200      	movs	r2, #0
 8014926:	2107      	movs	r1, #7
 8014928:	6938      	ldr	r0, [r7, #16]
 801492a:	f000 f8bb 	bl	8014aa4 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d003      	beq.n	801493e <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	6938      	ldr	r0, [r7, #16]
 801493c:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	2200      	movs	r2, #0
 8014942:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2200      	movs	r2, #0
 801494a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3720      	adds	r7, #32
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3b01      	subs	r3, #1
 8014966:	2b06      	cmp	r3, #6
 8014968:	d836      	bhi.n	80149d8 <_ux_device_class_cdc_acm_entry+0x80>
 801496a:	a201      	add	r2, pc, #4	@ (adr r2, 8014970 <_ux_device_class_cdc_acm_entry+0x18>)
 801496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014970:	080149a5 	.word	0x080149a5
 8014974:	080149b5 	.word	0x080149b5
 8014978:	080149c1 	.word	0x080149c1
 801497c:	080149cd 	.word	0x080149cd
 8014980:	0801498d 	.word	0x0801498d
 8014984:	080149d9 	.word	0x080149d9
 8014988:	08014999 	.word	0x08014999
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f829 	bl	80149e4 <_ux_device_class_cdc_acm_initialize>
 8014992:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	e020      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 f9df 	bl	8014d5c <_ux_device_class_cdc_acm_uninitialize>
 801499e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	e01a      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	695b      	ldr	r3, [r3, #20]
 80149a8:	2b0a      	cmp	r3, #10
 80149aa:	d101      	bne.n	80149b0 <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 80149ac:	2300      	movs	r3, #0
 80149ae:	e014      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 80149b0:	2357      	movs	r3, #87	@ 0x57
 80149b2:	e012      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7ff febf 	bl	8014738 <_ux_device_class_cdc_acm_activate>
 80149ba:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	e00c      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7ff ff89 	bl	80148d8 <_ux_device_class_cdc_acm_deactivate>
 80149c6:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	e006      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7ff fed3 	bl	8014778 <_ux_device_class_cdc_acm_control_request>
 80149d2:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	e000      	b.n	80149da <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80149d8:	2354      	movs	r3, #84	@ 0x54
    }   
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop

080149e4 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6a1b      	ldr	r3, [r3, #32]
 80149f0:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 80149f2:	2284      	movs	r2, #132	@ 0x84
 80149f4:	2100      	movs	r1, #0
 80149f6:	2000      	movs	r0, #0
 80149f8:	f7ff fa90 	bl	8013f1c <_ux_utility_memory_allocate>
 80149fc:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 8014a04:	2312      	movs	r3, #18
 8014a06:	e045      	b.n	8014a94 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	693a      	ldr	r2, [r7, #16]
 8014a0c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a12:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	693b      	ldr	r3, [r7, #16]
 8014a1a:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	685a      	ldr	r2, [r3, #4]
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	689a      	ldr	r2, [r3, #8]
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	60da      	str	r2, [r3, #12]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	3310      	adds	r3, #16
 8014a30:	491a      	ldr	r1, [pc, #104]	@ (8014a9c <_ux_device_class_cdc_acm_initialize+0xb8>)
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7ff fd34 	bl	80144a0 <_ux_utility_mutex_create>
 8014a38:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d004      	beq.n	8014a4a <_ux_device_class_cdc_acm_initialize+0x66>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 8014a40:	6938      	ldr	r0, [r7, #16]
 8014a42:	f7ff fc8f 	bl	8014364 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8014a46:	2317      	movs	r3, #23
 8014a48:	e024      	b.n	8014a94 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	3344      	adds	r3, #68	@ 0x44
 8014a4e:	4914      	ldr	r1, [pc, #80]	@ (8014aa0 <_ux_device_class_cdc_acm_initialize+0xbc>)
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7ff fd25 	bl	80144a0 <_ux_utility_mutex_create>
 8014a56:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d009      	beq.n	8014a72 <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	3310      	adds	r3, #16
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7ff fd35 	bl	80144d2 <_ux_utility_mutex_delete>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 8014a68:	6938      	ldr	r0, [r7, #16]
 8014a6a:	f7ff fc7b 	bl	8014364 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8014a6e:	2317      	movs	r3, #23
 8014a70:	e010      	b.n	8014a94 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014a78:	679a      	str	r2, [r3, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	2200      	movs	r2, #0
 8014a86:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	2208      	movs	r2, #8
 8014a8e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3718      	adds	r7, #24
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	08018bbc 	.word	0x08018bbc
 8014aa0:	08018bdc 	.word	0x08018bdc

08014aa4 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b08a      	sub	sp, #40	@ 0x28
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	3b01      	subs	r3, #1
 8014ab8:	2b08      	cmp	r3, #8
 8014aba:	f200 80ae 	bhi.w	8014c1a <_ux_device_class_cdc_acm_ioctl+0x176>
 8014abe:	a201      	add	r2, pc, #4	@ (adr r2, 8014ac4 <_ux_device_class_cdc_acm_ioctl+0x20>)
 8014ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ac4:	08014ae9 	.word	0x08014ae9
 8014ac8:	08014b15 	.word	0x08014b15
 8014acc:	08014b41 	.word	0x08014b41
 8014ad0:	08014b75 	.word	0x08014b75
 8014ad4:	08014b5b 	.word	0x08014b5b
 8014ad8:	08014c1b 	.word	0x08014c1b
 8014adc:	08014c1b 	.word	0x08014c1b
 8014ae0:	08014bd5 	.word	0x08014bd5
 8014ae4:	08014bd5 	.word	0x08014bd5
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	681a      	ldr	r2, [r3, #0]
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	791a      	ldrb	r2, [r3, #4]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	795a      	ldrb	r2, [r3, #5]
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	799a      	ldrb	r2, [r3, #6]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
            
            break;
 8014b12:	e08b      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	719a      	strb	r2, [r3, #6]
            
            break;
 8014b3e:	e075      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	705a      	strb	r2, [r3, #1]
            
            break;
 8014b58:	e068      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	781a      	ldrb	r2, [r3, #0]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	785a      	ldrb	r2, [r3, #1]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            
            break;
 8014b72:	e05b      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	69db      	ldr	r3, [r3, #28]
 8014b7e:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d002      	beq.n	8014b8c <_ux_device_class_cdc_acm_ioctl+0xe8>
 8014b86:	2b02      	cmp	r3, #2
 8014b88:	d009      	beq.n	8014b9e <_ux_device_class_cdc_acm_ioctl+0xfa>
 8014b8a:	e011      	b.n	8014bb0 <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8014b8c:	6a3b      	ldr	r3, [r7, #32]
 8014b8e:	7b9b      	ldrb	r3, [r3, #14]
 8014b90:	b25b      	sxtb	r3, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	db0f      	blt.n	8014bb6 <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014b96:	6a3b      	ldr	r3, [r7, #32]
 8014b98:	695b      	ldr	r3, [r3, #20]
 8014b9a:	623b      	str	r3, [r7, #32]
                }
                break;
 8014b9c:	e00b      	b.n	8014bb6 <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8014b9e:	6a3b      	ldr	r3, [r7, #32]
 8014ba0:	7b9b      	ldrb	r3, [r3, #14]
 8014ba2:	b25b      	sxtb	r3, r3
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	da08      	bge.n	8014bba <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	695b      	ldr	r3, [r3, #20]
 8014bac:	623b      	str	r3, [r7, #32]
                }
                break;
 8014bae:	e004      	b.n	8014bba <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 8014bb0:	2353      	movs	r3, #83	@ 0x53
 8014bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bb4:	e002      	b.n	8014bbc <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 8014bb6:	bf00      	nop
 8014bb8:	e000      	b.n	8014bbc <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 8014bba:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014bbc:	6a3b      	ldr	r3, [r7, #32]
 8014bbe:	3320      	adds	r3, #32
 8014bc0:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8014bc2:	69bb      	ldr	r3, [r7, #24]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d12f      	bne.n	8014c2a <_ux_device_class_cdc_acm_ioctl+0x186>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 8014bca:	21f9      	movs	r1, #249	@ 0xf9
 8014bcc:	69b8      	ldr	r0, [r7, #24]
 8014bce:	f003 f9cf 	bl	8017f70 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 8014bd2:	e02a      	b.n	8014c2a <_ux_device_class_cdc_acm_ioctl+0x186>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	69db      	ldr	r3, [r3, #28]
 8014bde:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	7b9b      	ldrb	r3, [r3, #14]
 8014be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8014be8:	68ba      	ldr	r2, [r7, #8]
 8014bea:	2a08      	cmp	r2, #8
 8014bec:	d101      	bne.n	8014bf2 <_ux_device_class_cdc_acm_ioctl+0x14e>
 8014bee:	2200      	movs	r2, #0
 8014bf0:	e000      	b.n	8014bf4 <_ux_device_class_cdc_acm_ioctl+0x150>
 8014bf2:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d002      	beq.n	8014bfe <_ux_device_class_cdc_acm_ioctl+0x15a>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 8014bf8:	6a3b      	ldr	r3, [r7, #32]
 8014bfa:	695b      	ldr	r3, [r3, #20]
 8014bfc:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014bfe:	6a3b      	ldr	r3, [r7, #32]
 8014c00:	3320      	adds	r3, #32
 8014c02:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8014c04:	69bb      	ldr	r3, [r7, #24]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d102      	bne.n	8014c12 <_ux_device_class_cdc_acm_ioctl+0x16e>
                status = UX_ERROR;
 8014c0c:	23ff      	movs	r3, #255	@ 0xff
 8014c0e:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 8014c10:	e00c      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 8014c18:	e008      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8014c1a:	2254      	movs	r2, #84	@ 0x54
 8014c1c:	2107      	movs	r1, #7
 8014c1e:	2002      	movs	r0, #2
 8014c20:	f7fe ff94 	bl	8013b4c <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8014c24:	2354      	movs	r3, #84	@ 0x54
 8014c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c28:	e000      	b.n	8014c2c <_ux_device_class_cdc_acm_ioctl+0x188>
            break;
 8014c2a:	bf00      	nop
    }

    /* Return status to caller.  */
    return(status);
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3728      	adds	r7, #40	@ 0x28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop

08014c38 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b08a      	sub	sp, #40	@ 0x28
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
 8014c44:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 8014c46:	2300      	movs	r3, #0
 8014c48:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014c4a:	4b43      	ldr	r3, [pc, #268]	@ (8014d58 <_ux_device_class_cdc_acm_read+0x120>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	3320      	adds	r3, #32
 8014c50:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	2b03      	cmp	r3, #3
 8014c58:	d006      	beq.n	8014c68 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014c5a:	2251      	movs	r2, #81	@ 0x51
 8014c5c:	2107      	movs	r1, #7
 8014c5e:	2002      	movs	r0, #2
 8014c60:	f7fe ff74 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014c64:	2351      	movs	r3, #81	@ 0x51
 8014c66:	e073      	b.n	8014d50 <_ux_device_class_cdc_acm_read+0x118>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	69db      	ldr	r3, [r3, #28]
 8014c72:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8014c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c76:	7b9b      	ldrb	r3, [r3, #14]
 8014c78:	b25b      	sxtb	r3, r3
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	da02      	bge.n	8014c84 <_ux_device_class_cdc_acm_read+0x4c>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c80:	695b      	ldr	r3, [r3, #20]
 8014c82:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	3344      	adds	r3, #68	@ 0x44
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7ff fc3a 	bl	8014502 <_ux_utility_mutex_on>

    /* All CDC readings are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c90:	3320      	adds	r3, #32
 8014c92:	613b      	str	r3, [r7, #16]
    }

#else

    /* Reset the actual length.  */
    *actual_length =  0;
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	2200      	movs	r2, #0
 8014c98:	601a      	str	r2, [r3, #0]

    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014c9a:	e041      	b.n	8014d20 <_ux_device_class_cdc_acm_read+0xe8>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c9e:	8a1b      	ldrh	r3, [r3, #16]
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d903      	bls.n	8014cb0 <_ux_device_class_cdc_acm_read+0x78>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014caa:	8a1b      	ldrh	r3, [r3, #16]
 8014cac:	61fb      	str	r3, [r7, #28]
 8014cae:	e001      	b.n	8014cb4 <_ux_device_class_cdc_acm_read+0x7c>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8014cb4:	69fa      	ldr	r2, [r7, #28]
 8014cb6:	69f9      	ldr	r1, [r7, #28]
 8014cb8:	6938      	ldr	r0, [r7, #16]
 8014cba:	f003 f9a5 	bl	8018008 <_ux_device_stack_transfer_request>
 8014cbe:	6238      	str	r0, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 8014cc0:	6a3b      	ldr	r3, [r7, #32]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d125      	bne.n	8014d12 <_ux_device_class_cdc_acm_read+0xda>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	68d9      	ldr	r1, [r3, #12]
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	699b      	ldr	r3, [r3, #24]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	68b8      	ldr	r0, [r7, #8]
 8014cd2:	f7ff fb29 	bl	8014328 <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	699b      	ldr	r3, [r3, #24]
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	4413      	add	r3, r2
 8014cde:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	699b      	ldr	r3, [r3, #24]
 8014ce8:	441a      	add	r2, r3
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	699b      	ldr	r3, [r3, #24]
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	1ad3      	subs	r3, r2, r3
 8014cf6:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	699b      	ldr	r3, [r3, #24]
 8014cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cfe:	8a12      	ldrh	r2, [r2, #16]
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d20d      	bcs.n	8014d20 <_ux_device_class_cdc_acm_read+0xe8>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	3344      	adds	r3, #68	@ 0x44
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7ff fbef 	bl	80144ec <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e01e      	b.n	8014d50 <_ux_device_class_cdc_acm_read+0x118>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	3344      	adds	r3, #68	@ 0x44
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fbe8 	bl	80144ec <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 8014d1c:	6a3b      	ldr	r3, [r7, #32]
 8014d1e:	e017      	b.n	8014d50 <_ux_device_class_cdc_acm_read+0x118>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014d20:	69bb      	ldr	r3, [r7, #24]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2b03      	cmp	r3, #3
 8014d26:	d102      	bne.n	8014d2e <_ux_device_class_cdc_acm_read+0xf6>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d1b6      	bne.n	8014c9c <_ux_device_class_cdc_acm_read+0x64>
    }

#endif

    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3344      	adds	r3, #68	@ 0x44
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7ff fbda 	bl	80144ec <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	d006      	beq.n	8014d4e <_ux_device_class_cdc_acm_read+0x116>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8014d40:	2222      	movs	r2, #34	@ 0x22
 8014d42:	2107      	movs	r1, #7
 8014d44:	2002      	movs	r0, #2
 8014d46:	f7fe ff01 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8014d4a:	2322      	movs	r3, #34	@ 0x22
 8014d4c:	e000      	b.n	8014d50 <_ux_device_class_cdc_acm_read+0x118>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8014d4e:	6a3b      	ldr	r3, [r7, #32]
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3728      	adds	r7, #40	@ 0x28
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	24001dac 	.word	0x24001dac

08014d5c <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6a1b      	ldr	r3, [r3, #32]
 8014d68:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d6e:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d00c      	beq.n	8014d90 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	3310      	adds	r3, #16
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7ff fba9 	bl	80144d2 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	3344      	adds	r3, #68	@ 0x44
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7ff fba4 	bl	80144d2 <_ux_utility_mutex_delete>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8014d8a:	68b8      	ldr	r0, [r7, #8]
 8014d8c:	f7ff faea 	bl	8014364 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8014d90:	2300      	movs	r3, #0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
	...

08014d9c <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b08c      	sub	sp, #48	@ 0x30
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
 8014da8:	603b      	str	r3, [r7, #0]
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
ULONG                       local_host_length;
UINT                        status = 0;
 8014daa:	2300      	movs	r3, #0
 8014dac:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014dae:	4b49      	ldr	r3, [pc, #292]	@ (8014ed4 <_ux_device_class_cdc_acm_write+0x138>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	3320      	adds	r3, #32
 8014db4:	61fb      	str	r3, [r7, #28]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	2b03      	cmp	r3, #3
 8014dbc:	d006      	beq.n	8014dcc <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014dbe:	2251      	movs	r2, #81	@ 0x51
 8014dc0:	2107      	movs	r1, #7
 8014dc2:	2002      	movs	r0, #2
 8014dc4:	f7fe fec2 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014dc8:	2351      	movs	r3, #81	@ 0x51
 8014dca:	e07e      	b.n	8014eca <_ux_device_class_cdc_acm_write+0x12e>
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	61bb      	str	r3, [r7, #24]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	69db      	ldr	r3, [r3, #28]
 8014dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8014dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dda:	7b9b      	ldrb	r3, [r3, #14]
 8014ddc:	b25b      	sxtb	r3, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	db02      	blt.n	8014de8 <_ux_device_class_cdc_acm_write+0x4c>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014de4:	695b      	ldr	r3, [r3, #20]
 8014de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	3310      	adds	r3, #16
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7ff fb88 	bl	8014502 <_ux_utility_mutex_on>

    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014df4:	3320      	adds	r3, #32
 8014df6:	617b      	str	r3, [r7, #20]
    transfer_request -> ux_slave_transfer_request_data_pointer = buffer;
#endif
#endif

    /* Reset the actual length.  */
    *actual_length =  0;
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2b03      	cmp	r3, #3
 8014e04:	d10f      	bne.n	8014e26 <_ux_device_class_cdc_acm_write+0x8a>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d10c      	bne.n	8014e26 <_ux_device_class_cdc_acm_write+0x8a>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	2100      	movs	r1, #0
 8014e10:	6978      	ldr	r0, [r7, #20]
 8014e12:	f003 f8f9 	bl	8018008 <_ux_device_stack_transfer_request>
 8014e16:	6238      	str	r0, [r7, #32]

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	3310      	adds	r3, #16
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7ff fb65 	bl	80144ec <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8014e22:	6a3b      	ldr	r3, [r7, #32]
 8014e24:	e051      	b.n	8014eca <_ux_device_class_cdc_acm_write+0x12e>
            *actual_length = transfer_request -> ux_slave_transfer_request_actual_length;
    }
#else

        /* Check if we need more transactions.  */
        local_host_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE;
 8014e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014e2c:	e035      	b.n	8014e9a <_ux_device_class_cdc_acm_write+0xfe>
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e34:	d903      	bls.n	8014e3e <_ux_device_class_cdc_acm_write+0xa2>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE;
 8014e36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014e3c:	e004      	b.n	8014e48 <_ux_device_class_cdc_acm_write+0xac>
                
            else
            {

                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	62bb      	str	r3, [r7, #40]	@ 0x28
                /* Assume the length match expectation.  */
                local_host_length = requested_length;
#else

                /* Assume expecting more, so ZLP is appended in stack.  */
                local_host_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE + 1;
 8014e42:	f240 2301 	movw	r3, #513	@ 0x201
 8014e46:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	68db      	ldr	r3, [r3, #12]
 8014e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e4e:	68b9      	ldr	r1, [r7, #8]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff fa69 	bl	8014328 <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 8014e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e5a:	6978      	ldr	r0, [r7, #20]
 8014e5c:	f003 f8d4 	bl	8018008 <_ux_device_stack_transfer_request>
 8014e60:	6238      	str	r0, [r7, #32]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 8014e62:	6a3b      	ldr	r3, [r7, #32]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d111      	bne.n	8014e8c <_ux_device_class_cdc_acm_write+0xf0>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	699b      	ldr	r3, [r3, #24]
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	4413      	add	r3, r2
 8014e70:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	681a      	ldr	r2, [r3, #0]
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	699b      	ldr	r3, [r3, #24]
 8014e7a:	441a      	add	r2, r3
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	699b      	ldr	r3, [r3, #24]
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	1ad3      	subs	r3, r2, r3
 8014e88:	607b      	str	r3, [r7, #4]
 8014e8a:	e006      	b.n	8014e9a <_ux_device_class_cdc_acm_write+0xfe>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	3310      	adds	r3, #16
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ff fb2b 	bl	80144ec <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8014e96:	6a3b      	ldr	r3, [r7, #32]
 8014e98:	e017      	b.n	8014eca <_ux_device_class_cdc_acm_write+0x12e>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	d102      	bne.n	8014ea8 <_ux_device_class_cdc_acm_write+0x10c>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d1c2      	bne.n	8014e2e <_ux_device_class_cdc_acm_write+0x92>
#endif /* _BUFF_OWNER && _ZERO_COPY */
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	3310      	adds	r3, #16
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7ff fb1d 	bl	80144ec <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d006      	beq.n	8014ec8 <_ux_device_class_cdc_acm_write+0x12c>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8014eba:	2222      	movs	r2, #34	@ 0x22
 8014ebc:	2107      	movs	r1, #7
 8014ebe:	2002      	movs	r0, #2
 8014ec0:	f7fe fe44 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8014ec4:	2322      	movs	r3, #34	@ 0x22
 8014ec6:	e000      	b.n	8014eca <_ux_device_class_cdc_acm_write+0x12e>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8014ec8:	6a3b      	ldr	r3, [r7, #32]
          
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3730      	adds	r7, #48	@ 0x30
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	24001dac 	.word	0x24001dac

08014ed8 <_ux_device_class_hid_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b088      	sub	sp, #32
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface_ptr;
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	61bb      	str	r3, [r7, #24]
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
UCHAR                                   *pos;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a1b      	ldr	r3, [r3, #32]
 8014ee8:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014eee:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	693a      	ldr	r2, [r7, #16]
 8014efa:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	68fa      	ldr	r2, [r7, #12]
 8014f00:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	69db      	ldr	r3, [r3, #28]
 8014f06:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 8014f08:	e010      	b.n	8014f2c <_ux_device_class_hid_activate+0x54>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8014f0a:	69fb      	ldr	r3, [r7, #28]
 8014f0c:	7bdb      	ldrb	r3, [r3, #15]
 8014f0e:	f003 0303 	and.w	r3, r3, #3
 8014f12:	2b03      	cmp	r3, #3
 8014f14:	d107      	bne.n	8014f26 <_ux_device_class_hid_activate+0x4e>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8014f16:	69fb      	ldr	r3, [r7, #28]
 8014f18:	7b9b      	ldrb	r3, [r3, #14]
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8014f1a:	b25b      	sxtb	r3, r3
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	da02      	bge.n	8014f26 <_ux_device_class_hid_activate+0x4e>
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	61bb      	str	r3, [r7, #24]
#endif

#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 8014f24:	e005      	b.n	8014f32 <_ux_device_class_hid_activate+0x5a>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	695b      	ldr	r3, [r3, #20]
 8014f2a:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 8014f2c:	69fb      	ldr	r3, [r7, #28]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d1eb      	bne.n	8014f0a <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d101      	bne.n	8014f3c <_ux_device_class_hid_activate+0x64>
        return (UX_ERROR);
 8014f38:	23ff      	movs	r3, #255	@ 0xff
 8014f3a:	e013      	b.n	8014f64 <_ux_device_class_hid_activate+0x8c>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	2201      	movs	r2, #1
 8014f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	69ba      	ldr	r2, [r7, #24]
 8014f46:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_ptr -> ux_slave_class_thread);
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	3350      	adds	r3, #80	@ 0x50
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7ff fbd9 	bl	8014704 <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	695b      	ldr	r3, [r3, #20]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d003      	beq.n	8014f62 <_ux_device_class_hid_activate+0x8a>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	695b      	ldr	r3, [r3, #20]
 8014f5e:	6938      	ldr	r0, [r7, #16]
 8014f60:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8014f62:	2300      	movs	r3, #0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3720      	adds	r7, #32
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <_ux_device_class_hid_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b08c      	sub	sp, #48	@ 0x30
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014f74:	4b5a      	ldr	r3, [pc, #360]	@ (80150e0 <_ux_device_class_hid_control_request+0x174>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	3320      	adds	r3, #32
 8014f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8014f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f7e:	3338      	adds	r3, #56	@ 0x38
 8014f80:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8014f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f84:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014f88:	627b      	str	r3, [r7, #36]	@ 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8014f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f8c:	3354      	adds	r3, #84	@ 0x54
 8014f8e:	3302      	adds	r3, #2
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff fb3a 	bl	801460a <_ux_utility_short_get>
 8014f96:	6238      	str	r0, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8014f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f9a:	3354      	adds	r3, #84	@ 0x54
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7ff fb33 	bl	801460a <_ux_utility_short_get>
 8014fa4:	61f8      	str	r0, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8014fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa8:	3354      	adds	r3, #84	@ 0x54
 8014faa:	3306      	adds	r3, #6
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7ff fb2c 	bl	801460a <_ux_utility_short_get>
 8014fb2:	61b8      	str	r0, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8014fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8014fba:	75fb      	strb	r3, [r7, #23]
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6a1b      	ldr	r3, [r3, #32]
 8014fc0:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fc6:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	2b0a      	cmp	r3, #10
 8014fce:	d87e      	bhi.n	80150ce <_ux_device_class_hid_control_request+0x162>
 8014fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8014fd8 <_ux_device_class_hid_control_request+0x6c>)
 8014fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fd6:	bf00      	nop
 8014fd8:	08015005 	.word	0x08015005
 8014fdc:	08015037 	.word	0x08015037
 8014fe0:	080150af 	.word	0x080150af
 8014fe4:	080150cf 	.word	0x080150cf
 8014fe8:	080150cf 	.word	0x080150cf
 8014fec:	08015029 	.word	0x08015029
 8014ff0:	080150cf 	.word	0x080150cf
 8014ff4:	080150cf 	.word	0x080150cf
 8014ff8:	08015013 	.word	0x08015013
 8014ffc:	08015037 	.word	0x08015037
 8015000:	080150c7 	.word	0x080150c7
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	69fa      	ldr	r2, [r7, #28]
 8015008:	6a39      	ldr	r1, [r7, #32]
 801500a:	68f8      	ldr	r0, [r7, #12]
 801500c:	f000 fbba 	bl	8015784 <_ux_device_class_hid_report_get>
            break;
 8015010:	e060      	b.n	80150d4 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 8015012:	6a3b      	ldr	r3, [r7, #32]
 8015014:	0a1b      	lsrs	r3, r3, #8
 8015016:	b2db      	uxtb	r3, r3
 8015018:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	69fa      	ldr	r2, [r7, #28]
 801501e:	68b9      	ldr	r1, [r7, #8]
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f000 fc33 	bl	801588c <_ux_device_class_hid_report_set>
            break;
 8015026:	e055      	b.n	80150d4 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	69fa      	ldr	r2, [r7, #28]
 801502c:	6a39      	ldr	r1, [r7, #32]
 801502e:	68f8      	ldr	r0, [r7, #12]
 8015030:	f000 f878 	bl	8015124 <_ux_device_class_hid_descriptor_send>
            break;            
 8015034:	e04e      	b.n	80150d4 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8015036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015038:	2b02      	cmp	r3, #2
 801503a:	d10b      	bne.n	8015054 <_ux_device_class_hid_control_request+0xe8>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	b2d2      	uxtb	r2, r2
 8015046:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8015048:	69ba      	ldr	r2, [r7, #24]
 801504a:	2101      	movs	r1, #1
 801504c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801504e:	f002 ffdb 	bl	8018008 <_ux_device_stack_transfer_request>
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 8015052:	e03e      	b.n	80150d2 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015058:	b2db      	uxtb	r3, r3
 801505a:	7dfa      	ldrb	r2, [r7, #23]
 801505c:	429a      	cmp	r2, r3
 801505e:	d038      	beq.n	80150d2 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8015060:	7dfa      	ldrb	r2, [r7, #23]
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	64da      	str	r2, [r3, #76]	@ 0x4c
                    if (duration == 0)
 8015066:	7dfb      	ldrb	r3, [r7, #23]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d104      	bne.n	8015076 <_ux_device_class_hid_control_request+0x10a>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 8015074:	e02d      	b.n	80150d2 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8015076:	7dfb      	ldrb	r3, [r7, #23]
 8015078:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801507c:	fb02 f303 	mul.w	r3, r2, r3
 8015080:	4a18      	ldr	r2, [pc, #96]	@ (80150e4 <_ux_device_class_hid_control_request+0x178>)
 8015082:	fba2 2303 	umull	r2, r3, r2, r3
 8015086:	099a      	lsrs	r2, r3, #6
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	651a      	str	r2, [r3, #80]	@ 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015090:	2b00      	cmp	r3, #0
 8015092:	d104      	bne.n	801509e <_ux_device_class_hid_control_request+0x132>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015098:	1c5a      	adds	r2, r3, #1
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	651a      	str	r2, [r3, #80]	@ 0x50
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	3328      	adds	r3, #40	@ 0x28
 80150a2:	2200      	movs	r2, #0
 80150a4:	2102      	movs	r1, #2
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fe fedc 	bl	8013e64 <_ux_utility_event_flags_set>
            break;
 80150ac:	e011      	b.n	80150d2 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80150b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	b2d2      	uxtb	r2, r2
 80150b8:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 80150ba:	69ba      	ldr	r2, [r7, #24]
 80150bc:	2101      	movs	r1, #1
 80150be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80150c0:	f002 ffa2 	bl	8018008 <_ux_device_stack_transfer_request>
            break;
 80150c4:	e006      	b.n	80150d4 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6a3a      	ldr	r2, [r7, #32]
 80150ca:	655a      	str	r2, [r3, #84]	@ 0x54
            break;
 80150cc:	e002      	b.n	80150d4 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80150ce:	23ff      	movs	r3, #255	@ 0xff
 80150d0:	e001      	b.n	80150d6 <_ux_device_class_hid_control_request+0x16a>
            break;
 80150d2:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80150d4:	2300      	movs	r3, #0
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3730      	adds	r7, #48	@ 0x30
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	24001dac 	.word	0x24001dac
 80150e4:	10624dd3 	.word	0x10624dd3

080150e8 <_ux_device_class_hid_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6a1b      	ldr	r3, [r3, #32]
 80150f4:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80150fa:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	2126      	movs	r1, #38	@ 0x26
 8015102:	4618      	mov	r0, r3
 8015104:	f002 ff6e 	bl	8017fe4 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	699b      	ldr	r3, [r3, #24]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d003      	beq.n	8015118 <_ux_device_class_hid_deactivate+0x30>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	699b      	ldr	r3, [r3, #24]
 8015114:	68b8      	ldr	r0, [r7, #8]
 8015116:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8015118:	2300      	movs	r3, #0
}
 801511a:	4618      	mov	r0, r3
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
	...

08015124 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b08e      	sub	sp, #56	@ 0x38
 8015128:	af00      	add	r7, sp, #0
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
 8015130:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 8015132:	23ff      	movs	r3, #255	@ 0xff
 8015134:	633b      	str	r3, [r7, #48]	@ 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 8015136:	23ff      	movs	r3, #255	@ 0xff
 8015138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801513c:	4b5a      	ldr	r3, [pc, #360]	@ (80152a8 <_ux_device_class_hid_descriptor_send+0x184>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015142:	4b59      	ldr	r3, [pc, #356]	@ (80152a8 <_ux_device_class_hid_descriptor_send+0x184>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	3320      	adds	r3, #32
 8015148:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801514a:	6a3b      	ldr	r3, [r7, #32]
 801514c:	3318      	adds	r3, #24
 801514e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	3320      	adds	r3, #32
 8015154:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	2203      	movs	r2, #3
 801515a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	0a1b      	lsrs	r3, r3, #8
 8015160:	b2db      	uxtb	r3, r3
 8015162:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	2b21      	cmp	r3, #33	@ 0x21
 8015168:	d003      	beq.n	8015172 <_ux_device_class_hid_descriptor_send+0x4e>
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	2b22      	cmp	r3, #34	@ 0x22
 801516e:	d060      	beq.n	8015232 <_ux_device_class_hid_descriptor_send+0x10e>
 8015170:	e08b      	b.n	801528a <_ux_device_class_hid_descriptor_send+0x166>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015172:	4b4d      	ldr	r3, [pc, #308]	@ (80152a8 <_ux_device_class_hid_descriptor_send+0x184>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801517a:	637b      	str	r3, [r7, #52]	@ 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 801517c:	4b4a      	ldr	r3, [pc, #296]	@ (80152a8 <_ux_device_class_hid_descriptor_send+0x184>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015186:	4413      	add	r3, r2
 8015188:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 801518a:	e042      	b.n	8015212 <_ux_device_class_hid_descriptor_send+0xee>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 801518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801518e:	3301      	adds	r3, #1
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 8015194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	2b04      	cmp	r3, #4
 801519e:	d103      	bne.n	80151a8 <_ux_device_class_hid_descriptor_send+0x84>
                interface_number = *(device_framework + 2);
 80151a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151a2:	789b      	ldrb	r3, [r3, #2]
 80151a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	2b21      	cmp	r3, #33	@ 0x21
 80151ac:	d12d      	bne.n	801520a <_ux_device_class_hid_descriptor_send+0xe6>
                (interface_number == (UCHAR)request_index))
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 80151b2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d127      	bne.n	801520a <_ux_device_class_hid_descriptor_send+0xe6>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 80151ba:	697a      	ldr	r2, [r7, #20]
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d202      	bcs.n	80151c8 <_ux_device_class_hid_descriptor_send+0xa4>
                    length =  descriptor_length;
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151c6:	e001      	b.n	80151cc <_ux_device_class_hid_descriptor_send+0xa8>
                else                            
                    length =  host_length;                
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80151cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80151d2:	d90c      	bls.n	80151ee <_ux_device_class_hid_descriptor_send+0xca>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 80151d4:	2212      	movs	r2, #18
 80151d6:	2107      	movs	r1, #7
 80151d8:	2002      	movs	r0, #2
 80151da:	f7fe fcb7 	bl	8013b4c <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80151de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e0:	699b      	ldr	r3, [r3, #24]
 80151e2:	69fa      	ldr	r2, [r7, #28]
 80151e4:	2114      	movs	r1, #20
 80151e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80151e8:	4798      	blx	r3
 80151ea:	6338      	str	r0, [r7, #48]	@ 0x30
                    break;
 80151ec:	e015      	b.n	801521a <_ux_device_class_hid_descriptor_send+0xf6>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 80151ee:	69bb      	ldr	r3, [r7, #24]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80151f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7ff f896 	bl	8014328 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80151fc:	683a      	ldr	r2, [r7, #0]
 80151fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015200:	69b8      	ldr	r0, [r7, #24]
 8015202:	f002 ff01 	bl	8018008 <_ux_device_stack_transfer_request>
 8015206:	6338      	str	r0, [r7, #48]	@ 0x30
                break;
 8015208:	e007      	b.n	801521a <_ux_device_class_hid_descriptor_send+0xf6>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801520a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	4413      	add	r3, r2
 8015210:	637b      	str	r3, [r7, #52]	@ 0x34
        while (device_framework < device_framework_end)
 8015212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	429a      	cmp	r2, r3
 8015218:	d3b8      	bcc.n	801518c <_ux_device_class_hid_descriptor_send+0x68>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 801521a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	429a      	cmp	r2, r3
 8015220:	d33b      	bcc.n	801529a <_ux_device_class_hid_descriptor_send+0x176>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015224:	699b      	ldr	r3, [r3, #24]
 8015226:	69fa      	ldr	r2, [r7, #28]
 8015228:	2114      	movs	r1, #20
 801522a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801522c:	4798      	blx	r3
 801522e:	6338      	str	r0, [r7, #48]	@ 0x30

        break;
 8015230:	e033      	b.n	801529a <_ux_device_class_hid_descriptor_send+0x176>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015236:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8015238:	697a      	ldr	r2, [r7, #20]
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	429a      	cmp	r2, r3
 801523e:	d202      	bcs.n	8015246 <_ux_device_class_hid_descriptor_send+0x122>
            length =  descriptor_length;
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015244:	e001      	b.n	801524a <_ux_device_class_hid_descriptor_send+0x126>
        else                            
            length =  host_length;                
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015250:	d90c      	bls.n	801526c <_ux_device_class_hid_descriptor_send+0x148>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8015252:	2212      	movs	r2, #18
 8015254:	2107      	movs	r1, #7
 8015256:	2002      	movs	r0, #2
 8015258:	f7fe fc78 	bl	8013b4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525e:	699b      	ldr	r3, [r3, #24]
 8015260:	69fa      	ldr	r2, [r7, #28]
 8015262:	2114      	movs	r1, #20
 8015264:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015266:	4798      	blx	r3
 8015268:	6338      	str	r0, [r7, #48]	@ 0x30
            break;
 801526a:	e017      	b.n	801529c <_ux_device_class_hid_descriptor_send+0x178>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8015274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015276:	4619      	mov	r1, r3
 8015278:	f7ff f856 	bl	8014328 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801527c:	683a      	ldr	r2, [r7, #0]
 801527e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015280:	69b8      	ldr	r0, [r7, #24]
 8015282:	f002 fec1 	bl	8018008 <_ux_device_stack_transfer_request>
 8015286:	6338      	str	r0, [r7, #48]	@ 0x30
        break;
 8015288:	e008      	b.n	801529c <_ux_device_class_hid_descriptor_send+0x178>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528c:	699b      	ldr	r3, [r3, #24]
 801528e:	69fa      	ldr	r2, [r7, #28]
 8015290:	2114      	movs	r1, #20
 8015292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015294:	4798      	blx	r3
        return(UX_ERROR);
 8015296:	23ff      	movs	r3, #255	@ 0xff
 8015298:	e001      	b.n	801529e <_ux_device_class_hid_descriptor_send+0x17a>
        break;
 801529a:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 801529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3738      	adds	r7, #56	@ 0x38
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	24001dac 	.word	0x24001dac

080152ac <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	3b01      	subs	r3, #1
 80152ba:	2b06      	cmp	r3, #6
 80152bc:	d836      	bhi.n	801532c <_ux_device_class_hid_entry+0x80>
 80152be:	a201      	add	r2, pc, #4	@ (adr r2, 80152c4 <_ux_device_class_hid_entry+0x18>)
 80152c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152c4:	080152f9 	.word	0x080152f9
 80152c8:	08015309 	.word	0x08015309
 80152cc:	08015315 	.word	0x08015315
 80152d0:	08015321 	.word	0x08015321
 80152d4:	080152e1 	.word	0x080152e1
 80152d8:	0801532d 	.word	0x0801532d
 80152dc:	080152ed 	.word	0x080152ed

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f000 f8ff 	bl	80154e4 <_ux_device_class_hid_initialize>
 80152e6:	60f8      	str	r0, [r7, #12]
#endif

        /* Return the completion status.  */
        return(status);
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	e020      	b.n	801532e <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 fb17 	bl	8015920 <_ux_device_class_hid_uninitialize>
 80152f2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	e01a      	b.n	801532e <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	695b      	ldr	r3, [r3, #20]
 80152fc:	2b03      	cmp	r3, #3
 80152fe:	d101      	bne.n	8015304 <_ux_device_class_hid_entry+0x58>
            return(UX_SUCCESS);
 8015300:	2300      	movs	r3, #0
 8015302:	e014      	b.n	801532e <_ux_device_class_hid_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 8015304:	2357      	movs	r3, #87	@ 0x57
 8015306:	e012      	b.n	801532e <_ux_device_class_hid_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7ff fde5 	bl	8014ed8 <_ux_device_class_hid_activate>
 801530e:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	e00c      	b.n	801532e <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f7ff fee7 	bl	80150e8 <_ux_device_class_hid_deactivate>
 801531a:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	e006      	b.n	801532e <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7ff fe23 	bl	8014f6c <_ux_device_class_hid_control_request>
 8015326:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	e000      	b.n	801532e <_ux_device_class_hid_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 801532c:	2354      	movs	r3, #84	@ 0x54
    }   
}
 801532e:	4618      	mov	r0, r3
 8015330:	3710      	adds	r7, #16
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop

08015338 <_ux_device_class_hid_event_check>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_check(UX_SLAVE_CLASS_HID *hid,
                                       UX_DEVICE_CLASS_HID_EVENT **hid_event)
{
 8015338:	b480      	push	{r7}
 801533a:	b085      	sub	sp, #20
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	6039      	str	r1, [r7, #0]
UX_SLAVE_DEVICE                 *device;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015342:	4b0e      	ldr	r3, [pc, #56]	@ (801537c <_ux_device_class_hid_event_check+0x44>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	3320      	adds	r3, #32
 8015348:	60fb      	str	r3, [r7, #12]

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b03      	cmp	r3, #3
 8015350:	d001      	beq.n	8015356 <_ux_device_class_hid_event_check+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8015352:	2350      	movs	r3, #80	@ 0x50
 8015354:	e00c      	b.n	8015370 <_ux_device_class_hid_event_check+0x38>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    if (hid -> ux_device_class_hid_event_array_head ==
 801535e:	429a      	cmp	r2, r3
 8015360:	d101      	bne.n	8015366 <_ux_device_class_hid_event_check+0x2e>

        /* No event to report.  */
        return(UX_ERROR);
 8015362:	23ff      	movs	r3, #255	@ 0xff
 8015364:	e004      	b.n	8015370 <_ux_device_class_hid_event_check+0x38>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	601a      	str	r2, [r3, #0]
    return(UX_SUCCESS);
 801536e:	2300      	movs	r3, #0
}
 8015370:	4618      	mov	r0, r3
 8015372:	3714      	adds	r7, #20
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr
 801537c:	24001dac 	.word	0x24001dac

08015380 <_ux_device_class_hid_event_free>:
/*                                                                        */
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
 8015380:	b480      	push	{r7}
 8015382:	b085      	sub	sp, #20
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801538c:	60fb      	str	r3, [r7, #12]
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	332c      	adds	r3, #44	@ 0x2c
 8015392:	60fb      	str	r3, [r7, #12]
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	429a      	cmp	r2, r3
 801539c:	d302      	bcc.n	80153a4 <_ux_device_class_hid_event_free+0x24>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153a2:	60fb      	str	r3, [r7, #12]
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	68fa      	ldr	r2, [r7, #12]
 80153a8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80153aa:	bf00      	nop
 80153ac:	3714      	adds	r7, #20
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b084      	sub	sp, #16
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 80153c0:	f107 0308 	add.w	r3, r7, #8
 80153c4:	4619      	mov	r1, r3
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7ff ffb6 	bl	8015338 <_ux_device_class_hid_event_check>
 80153cc:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d001      	beq.n	80153d8 <_ux_device_class_hid_event_get+0x22>
        return(status);
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	e019      	b.n	801540c <_ux_device_class_hid_event_get+0x56>

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	2b20      	cmp	r3, #32
 80153de:	d902      	bls.n	80153e6 <_ux_device_class_hid_event_get+0x30>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	2220      	movs	r2, #32
 80153e4:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	689a      	ldr	r2, [r3, #8]
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	609a      	str	r2, [r3, #8]

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	f103 000c 	add.w	r0, r3, #12
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	f103 010c 	add.w	r1, r3, #12
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 80153fa:	68bb      	ldr	r3, [r7, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80153fc:	689b      	ldr	r3, [r3, #8]
 80153fe:	461a      	mov	r2, r3
 8015400:	f7fe ff92 	bl	8014328 <_ux_utility_memory_copy>

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7ff ffbb 	bl	8015380 <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 801540a:	2300      	movs	r3, #0
}
 801540c:	4618      	mov	r0, r3
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015422:	613b      	str	r3, [r7, #16]

    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d101      	bne.n	801542e <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 801542a:	23ff      	movs	r3, #255	@ 0xff
 801542c:	e056      	b.n	80154dc <_ux_device_class_hid_event_set+0xc8>
    
    /* Calculate the next position.  */
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	332c      	adds	r3, #44	@ 0x2c
 8015432:	617b      	str	r3, [r7, #20]
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015438:	697a      	ldr	r2, [r7, #20]
 801543a:	429a      	cmp	r2, r3
 801543c:	d302      	bcc.n	8015444 <_ux_device_class_hid_event_set+0x30>
        next_position = (UCHAR *)hid -> ux_device_class_hid_event_array;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015442:	617b      	str	r3, [r7, #20]
    next_hid_event = (UX_DEVICE_CLASS_HID_EVENT *)next_position;
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	60fb      	str	r3, [r7, #12]

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	429a      	cmp	r2, r3
 8015450:	d101      	bne.n	8015456 <_ux_device_class_hid_event_set+0x42>
        return (UX_ERROR);
 8015452:	23ff      	movs	r3, #255	@ 0xff
 8015454:	e042      	b.n	80154dc <_ux_device_class_hid_event_set+0xc8>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801545a:	613b      	str	r3, [r7, #16]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	6a1b      	ldr	r3, [r3, #32]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d121      	bne.n	80154ae <_ux_device_class_hid_event_set+0x9a>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	689b      	ldr	r3, [r3, #8]
 801546e:	3301      	adds	r3, #1
 8015470:	2b20      	cmp	r3, #32
 8015472:	d906      	bls.n	8015482 <_ux_device_class_hid_event_set+0x6e>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8015474:	2212      	movs	r2, #18
 8015476:	2107      	movs	r1, #7
 8015478:	2002      	movs	r0, #2
 801547a:	f7fe fb67 	bl	8013b4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 801547e:	2312      	movs	r3, #18
 8015480:	e02c      	b.n	80154dc <_ux_device_class_hid_event_set+0xc8>
        }

        /* Store the report ID.  */
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	b2da      	uxtb	r2, r3
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	731a      	strb	r2, [r3, #12]

        /* Store the data itself.  */
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	330c      	adds	r3, #12
 8015490:	1c58      	adds	r0, r3, #1
                                hid_event -> ux_device_class_hid_event_buffer,
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	f103 010c 	add.w	r1, r3, #12
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	461a      	mov	r2, r3
 801549e:	f7fe ff43 	bl	8014328 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	689b      	ldr	r3, [r3, #8]
 80154a6:	1c5a      	adds	r2, r3, #1
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	609a      	str	r2, [r3, #8]
 80154ac:	e00e      	b.n	80154cc <_ux_device_class_hid_event_set+0xb8>
    {
    
        /* No report ID to consider.  */

        /* Store copy of data so application can free event there (easier use).  */
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	f103 000c 	add.w	r0, r3, #12
                                hid_event -> ux_device_class_hid_event_buffer,
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	f103 010c 	add.w	r1, r3, #12
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	461a      	mov	r2, r3
 80154c0:	f7fe ff32 	bl	8014328 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	689a      	ldr	r2, [r3, #8]
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	609a      	str	r2, [r3, #8]
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	3328      	adds	r3, #40	@ 0x28
 80154d0:	2200      	movs	r2, #0
 80154d2:	2101      	movs	r1, #1
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7fe fcc5 	bl	8013e64 <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 80154da:	2300      	movs	r3, #0
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3718      	adds	r7, #24
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08e      	sub	sp, #56	@ 0x38
 80154e8:	af06      	add	r7, sp, #24
 80154ea:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class_ptr;
UINT                                    status = UX_SUCCESS;
 80154ec:	2300      	movs	r3, #0
 80154ee:	61fb      	str	r3, [r7, #28]
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH <= UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
#endif


    /* Get the pointer to the application parameters for the hid class.  */
    hid_parameter =  command -> ux_slave_class_command_parameter;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154f4:	61bb      	str	r3, [r7, #24]

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6a1b      	ldr	r3, [r3, #32]
 80154fa:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 80154fc:	2268      	movs	r2, #104	@ 0x68
 80154fe:	2100      	movs	r1, #0
 8015500:	2000      	movs	r0, #0
 8015502:	f7fe fd0b 	bl	8013f1c <_ux_utility_memory_allocate>
 8015506:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <_ux_device_class_hid_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 801550e:	2312      	movs	r3, #18
 8015510:	e09f      	b.n	8015652 <_ux_device_class_hid_initialize+0x16e>

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	693a      	ldr	r2, [r7, #16]
 8015516:	649a      	str	r2, [r3, #72]	@ 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class_ptr -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 8015518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801551c:	2100      	movs	r1, #0
 801551e:	2000      	movs	r0, #0
 8015520:	f7fe fcfc 	bl	8013f1c <_ux_utility_memory_allocate>
 8015524:	4602      	mov	r2, r0
    class_ptr -> ux_slave_class_thread_stack =  
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    
    /* Check for successful allocation.  */
    if (class_ptr -> ux_slave_class_thread_stack == UX_NULL)
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015532:	2b00      	cmp	r3, #0
 8015534:	d101      	bne.n	801553a <_ux_device_class_hid_initialize+0x56>
        status = UX_MEMORY_INSUFFICIENT;
 8015536:	2312      	movs	r3, #18
 8015538:	61fb      	str	r3, [r7, #28]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d118      	bne.n	8015572 <_ux_device_class_hid_initialize+0x8e>
        status =  _ux_device_thread_create(&class_ptr -> ux_slave_class_thread, "ux_slave_hid_thread", 
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8015546:	697a      	ldr	r2, [r7, #20]
 8015548:	697b      	ldr	r3, [r7, #20]
 801554a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801554e:	2100      	movs	r1, #0
 8015550:	9105      	str	r1, [sp, #20]
 8015552:	2100      	movs	r1, #0
 8015554:	9104      	str	r1, [sp, #16]
 8015556:	2114      	movs	r1, #20
 8015558:	9103      	str	r1, [sp, #12]
 801555a:	2114      	movs	r1, #20
 801555c:	9102      	str	r1, [sp, #8]
 801555e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015562:	9101      	str	r1, [sp, #4]
 8015564:	9300      	str	r3, [sp, #0]
 8015566:	4613      	mov	r3, r2
 8015568:	4a3c      	ldr	r2, [pc, #240]	@ (801565c <_ux_device_class_hid_initialize+0x178>)
 801556a:	493d      	ldr	r1, [pc, #244]	@ (8015660 <_ux_device_class_hid_initialize+0x17c>)
 801556c:	f7ff f891 	bl	8014692 <_ux_utility_thread_create>
 8015570:	61f8      	str	r0, [r7, #28]
    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d158      	bne.n	801562a <_ux_device_class_hid_initialize+0x146>
        UX_THREAD_EXTENSION_PTR_SET(&(class_ptr -> ux_slave_class_thread), class_ptr)
#endif


        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8015578:	69bb      	ldr	r3, [r7, #24]
 801557a:	689a      	ldr	r2, [r3, #8]
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	691a      	ldr	r2, [r3, #16]
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	625a      	str	r2, [r3, #36]	@ 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 8015588:	69bb      	ldr	r3, [r7, #24]
 801558a:	68da      	ldr	r2, [r3, #12]
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	695a      	ldr	r2, [r3, #20]
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	699a      	ldr	r2, [r3, #24]
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        UX_ASSERT(!UX_OVERFLOW_CHECK_MULC_ULONG(
                    UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid),
                    UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter)));
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 80155a0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80155a4:	60fb      	str	r3, [r7, #12]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	2100      	movs	r1, #0
 80155aa:	2000      	movs	r0, #0
 80155ac:	f7fe fcb6 	bl	8013f1c <_ux_utility_memory_allocate>
 80155b0:	4602      	mov	r2, r0
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Regular event place data following id,type and length.  */
#endif
        }

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d02d      	beq.n	801561a <_ux_device_class_hid_initialize+0x136>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	65da      	str	r2, [r3, #92]	@ 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	661a      	str	r2, [r3, #96]	@ 0x60
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	441a      	add	r2, r3
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	665a      	str	r2, [r3, #100]	@ 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	681a      	ldr	r2, [r3, #0]
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	685a      	ldr	r2, [r3, #4]
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	f04f 32ff 	mov.w	r2, #4294967295
 80155f0:	651a      	str	r2, [r3, #80]	@ 0x50

#if !defined(UX_DEVICE_STANDALONE)

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	3328      	adds	r3, #40	@ 0x28
 80155f6:	491b      	ldr	r1, [pc, #108]	@ (8015664 <_ux_device_class_hid_initialize+0x180>)
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fe fbf4 	bl	8013de6 <_ux_utility_event_flags_create>
 80155fe:	61f8      	str	r0, [r7, #28]

            /* Check status.  */
            if (status != UX_SUCCESS)
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d007      	beq.n	8015616 <_ux_device_class_hid_initialize+0x132>
                status = UX_EVENT_ERROR;
 8015606:	2318      	movs	r3, #24
 8015608:	61fb      	str	r3, [r7, #28]
             * and some error occurs in this stage.  */
            /* Free allocated event array memory.  */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
#endif
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801560e:	4618      	mov	r0, r3
 8015610:	f7fe fea8 	bl	8014364 <_ux_utility_memory_free>
 8015614:	e003      	b.n	801561e <_ux_device_class_hid_initialize+0x13a>
                return(status);
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	e01b      	b.n	8015652 <_ux_device_class_hid_initialize+0x16e>
#endif

        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 801561a:	2312      	movs	r3, #18
 801561c:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	3350      	adds	r3, #80	@ 0x50
 8015622:	4618      	mov	r0, r3
 8015624:	f7ff f85e 	bl	80146e4 <_ux_utility_thread_delete>
 8015628:	e001      	b.n	801562e <_ux_device_class_hid_initialize+0x14a>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 801562a:	2316      	movs	r3, #22
 801562c:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class_ptr -> ux_slave_class_thread_stack)
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015634:	2b00      	cmp	r3, #0
 8015636:	d005      	beq.n	8015644 <_ux_device_class_hid_initialize+0x160>
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801563e:	4618      	mov	r0, r3
 8015640:	f7fe fe90 	bl	8014364 <_ux_utility_memory_free>
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Unmount instance. */
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	2200      	movs	r2, #0
 8015648:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 801564a:	6938      	ldr	r0, [r7, #16]
 801564c:	f7fe fe8a 	bl	8014364 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8015650:	69fb      	ldr	r3, [r7, #28]
}
 8015652:	4618      	mov	r0, r3
 8015654:	3720      	adds	r7, #32
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	08015669 	.word	0x08015669
 8015660:	08018c00 	.word	0x08018c00
 8015664:	08018c14 	.word	0x08018c14

08015668 <_ux_device_class_hid_interrupt_thread>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b08c      	sub	sp, #48	@ 0x30
 801566c:	af02      	add	r7, sp, #8
 801566e:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class_ptr, UX_SLAVE_CLASS, hid_class)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8015674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015678:	623b      	str	r3, [r7, #32]
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801567a:	4b41      	ldr	r3, [pc, #260]	@ (8015780 <_ux_device_class_hid_interrupt_thread+0x118>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	3320      	adds	r3, #32
 8015680:	61fb      	str	r3, [r7, #28]
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8015682:	6a3b      	ldr	r3, [r7, #32]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	3320      	adds	r3, #32
 8015688:	61bb      	str	r3, [r7, #24]

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801568a:	e06c      	b.n	8015766 <_ux_device_class_hid_interrupt_thread+0xfe>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 801568c:	6a3b      	ldr	r3, [r7, #32]
 801568e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015692:	6a3b      	ldr	r3, [r7, #32]
 8015694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015696:	f107 0208 	add.w	r2, r7, #8
 801569a:	9300      	str	r3, [sp, #0]
 801569c:	4613      	mov	r3, r2
 801569e:	2201      	movs	r2, #1
 80156a0:	2103      	movs	r1, #3
 80156a2:	f7fe fbc5 	bl	8013e30 <_ux_utility_event_flags_get>
 80156a6:	6178      	str	r0, [r7, #20]
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	2b07      	cmp	r3, #7
 80156ac:	d124      	bne.n	80156f8 <_ux_device_class_hid_interrupt_thread+0x90>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	695b      	ldr	r3, [r3, #20]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d10b      	bne.n	80156ce <_ux_device_class_hid_interrupt_thread+0x66>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	615a      	str	r2, [r3, #20]
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
#else

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	695b      	ldr	r3, [r3, #20]
 80156c6:	461a      	mov	r2, r3
 80156c8:	2100      	movs	r1, #0
 80156ca:	f7fe fecf 	bl	801446c <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
#endif
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	6959      	ldr	r1, [r3, #20]
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	695b      	ldr	r3, [r3, #20]
 80156d6:	461a      	mov	r2, r3
 80156d8:	69b8      	ldr	r0, [r7, #24]
 80156da:	f002 fc95 	bl	8018008 <_ux_device_stack_transfer_request>
 80156de:	6178      	str	r0, [r7, #20]
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d03e      	beq.n	8015764 <_ux_device_class_hid_interrupt_thread+0xfc>
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2b26      	cmp	r3, #38	@ 0x26
 80156ea:	d03b      	beq.n	8015764 <_ux_device_class_hid_interrupt_thread+0xfc>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 80156ec:	697a      	ldr	r2, [r7, #20]
 80156ee:	2107      	movs	r1, #7
 80156f0:	2002      	movs	r0, #2
 80156f2:	f7fe fa2b 	bl	8013b4c <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 80156f6:	e035      	b.n	8015764 <_ux_device_class_hid_interrupt_thread+0xfc>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d028      	beq.n	8015750 <_ux_device_class_hid_interrupt_thread+0xe8>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 80156fe:	697a      	ldr	r2, [r7, #20]
 8015700:	2107      	movs	r1, #7
 8015702:	2002      	movs	r0, #2
 8015704:	f7fe fa22 	bl	8013b4c <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 8015708:	e037      	b.n	801577a <_ux_device_class_hid_interrupt_thread+0x112>
                /* Directly use the event buffer for transfer.  */
                buffer = hid_event -> ux_device_class_hid_event_buffer;
                transfer_request_in -> ux_slave_transfer_request_data_pointer = buffer;
#else
                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 801570a:	69bb      	ldr	r3, [r7, #24]
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	613b      	str	r3, [r7, #16]
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, UX_DEVICE_CLASS_HID_EVENT_BUFFER(hid_event), hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f103 010c 	add.w	r1, r3, #12
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	689b      	ldr	r3, [r3, #8]
 801571a:	461a      	mov	r2, r3
 801571c:	6938      	ldr	r0, [r7, #16]
 801571e:	f7fe fe03 	bl	8014328 <_ux_utility_memory_copy>
#endif

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event -> ux_device_class_hid_event_length, 
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	6899      	ldr	r1, [r3, #8]
                                                            hid_event -> ux_device_class_hid_event_length);
 8015726:	68fb      	ldr	r3, [r7, #12]
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event -> ux_device_class_hid_event_length, 
 8015728:	689b      	ldr	r3, [r3, #8]
 801572a:	461a      	mov	r2, r3
 801572c:	69b8      	ldr	r0, [r7, #24]
 801572e:	f002 fc6b 	bl	8018008 <_ux_device_stack_transfer_request>
 8015732:	6178      	str	r0, [r7, #20]

                /* The queue tail is handled and should be freed.  */
                _ux_device_class_hid_event_free(hid);
 8015734:	6a38      	ldr	r0, [r7, #32]
 8015736:	f7ff fe23 	bl	8015380 <_ux_device_class_hid_event_free>

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d007      	beq.n	8015750 <_ux_device_class_hid_interrupt_thread+0xe8>
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	2b26      	cmp	r3, #38	@ 0x26
 8015744:	d004      	beq.n	8015750 <_ux_device_class_hid_interrupt_thread+0xe8>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8015746:	697a      	ldr	r2, [r7, #20]
 8015748:	2107      	movs	r1, #7
 801574a:	2002      	movs	r0, #2
 801574c:	f7fe f9fe 	bl	8013b4c <_ux_system_error_handler>
            while (_ux_device_class_hid_event_check(hid, &hid_event) == UX_SUCCESS)
 8015750:	f107 030c 	add.w	r3, r7, #12
 8015754:	4619      	mov	r1, r3
 8015756:	6a38      	ldr	r0, [r7, #32]
 8015758:	f7ff fdee 	bl	8015338 <_ux_device_class_hid_event_check>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d0d3      	beq.n	801570a <_ux_device_class_hid_interrupt_thread+0xa2>
 8015762:	e000      	b.n	8015766 <_ux_device_class_hid_interrupt_thread+0xfe>
                continue;
 8015764:	bf00      	nop
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2b03      	cmp	r3, #3
 801576c:	d08e      	beq.n	801568c <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class_ptr -> ux_slave_class_thread);
 801576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015770:	3350      	adds	r3, #80	@ 0x50
 8015772:	4618      	mov	r0, r3
 8015774:	f7fe ffd3 	bl	801471e <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8015778:	e783      	b.n	8015682 <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 801577a:	3728      	adds	r7, #40	@ 0x28
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	24001dac 	.word	0x24001dac

08015784 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b096      	sub	sp, #88	@ 0x58
 8015788:	af00      	add	r7, sp, #0
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	607a      	str	r2, [r7, #4]
 8015790:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8015792:	23ff      	movs	r3, #255	@ 0xff
 8015794:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015796:	4b3c      	ldr	r3, [pc, #240]	@ (8015888 <_ux_device_class_hid_report_get+0x104>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	3320      	adds	r3, #32
 801579c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801579e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157a0:	3318      	adds	r3, #24
 80157a2:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80157a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157a6:	3320      	adds	r3, #32
 80157a8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 80157aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157ac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80157b0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 80157b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157b6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80157ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80157be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157c0:	2203      	movs	r2, #3
 80157c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80157c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 80157ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80157ce:	613b      	str	r3, [r7, #16]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 80157d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80157d4:	617b      	str	r3, [r7, #20]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 80157d6:	2320      	movs	r3, #32
 80157d8:	61bb      	str	r3, [r7, #24]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 80157da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80157de:	2b01      	cmp	r3, #1
 80157e0:	d10b      	bne.n	80157fa <_ux_device_class_hid_report_get+0x76>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d007      	beq.n	80157fa <_ux_device_class_hid_report_get+0x76>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 80157ea:	f107 0310 	add.w	r3, r7, #16
 80157ee:	4619      	mov	r1, r3
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f7ff fde0 	bl	80153b6 <_ux_device_class_hid_event_get>
 80157f6:	6538      	str	r0, [r7, #80]	@ 0x50
 80157f8:	e00b      	b.n	8015812 <_ux_device_class_hid_report_get+0x8e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	691b      	ldr	r3, [r3, #16]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d007      	beq.n	8015812 <_ux_device_class_hid_report_get+0x8e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	691b      	ldr	r3, [r3, #16]
 8015806:	f107 0210 	add.w	r2, r7, #16
 801580a:	4611      	mov	r1, r2
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	4798      	blx	r3
 8015810:	6538      	str	r0, [r7, #80]	@ 0x50
    }

    if (status == UX_SUCCESS)
 8015812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015814:	2b00      	cmp	r3, #0
 8015816:	d11d      	bne.n	8015854 <_ux_device_class_hid_report_get+0xd0>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	683a      	ldr	r2, [r7, #0]
 801581c:	429a      	cmp	r2, r3
 801581e:	d202      	bcs.n	8015826 <_ux_device_class_hid_report_get+0xa2>
            hid_event_length =  host_length;
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	657b      	str	r3, [r7, #84]	@ 0x54
 8015824:	e001      	b.n	801582a <_ux_device_class_hid_report_get+0xa6>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	657b      	str	r3, [r7, #84]	@ 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801582a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801582c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015830:	d902      	bls.n	8015838 <_ux_device_class_hid_report_get+0xb4>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8015832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015836:	657b      	str	r3, [r7, #84]	@ 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8015838:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801583a:	2100      	movs	r1, #0
 801583c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801583e:	f7fe fe15 	bl	801446c <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8015842:	f107 0310 	add.w	r3, r7, #16
 8015846:	330c      	adds	r3, #12
 8015848:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801584a:	4619      	mov	r1, r3
 801584c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801584e:	f7fe fd6b 	bl	8014328 <_ux_utility_memory_copy>
 8015852:	e00d      	b.n	8015870 <_ux_device_class_hid_report_get+0xec>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	2bff      	cmp	r3, #255	@ 0xff
 8015858:	d802      	bhi.n	8015860 <_ux_device_class_hid_report_get+0xdc>
            hid_event_length =  host_length;
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	657b      	str	r3, [r7, #84]	@ 0x54
 801585e:	e002      	b.n	8015866 <_ux_device_class_hid_report_get+0xe2>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8015860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015864:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8015866:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015868:	2100      	movs	r1, #0
 801586a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801586c:	f7fe fdfe 	bl	801446c <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015874:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015876:	f002 fbc7 	bl	8018008 <_ux_device_stack_transfer_request>
 801587a:	6538      	str	r0, [r7, #80]	@ 0x50

    /* Return the status to the caller.  */
    return(status);
 801587c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 801587e:	4618      	mov	r0, r3
 8015880:	3758      	adds	r7, #88	@ 0x58
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	24001dac 	.word	0x24001dac

0801588c <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b094      	sub	sp, #80	@ 0x50
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801589a:	4b20      	ldr	r3, [pc, #128]	@ (801591c <_ux_device_class_hid_report_set+0x90>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	3320      	adds	r3, #32
 80158a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80158a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80158a4:	3318      	adds	r3, #24
 80158a6:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80158a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80158aa:	3320      	adds	r3, #32
 80158ac:	643b      	str	r3, [r7, #64]	@ 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	61bb      	str	r3, [r7, #24]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80158b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158b4:	68db      	ldr	r3, [r3, #12]
 80158b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6a1b      	ldr	r3, [r3, #32]
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d10a      	bne.n	80158d6 <_ux_device_class_hid_report_set+0x4a>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 80158c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	617b      	str	r3, [r7, #20]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 80158c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158c8:	699b      	ldr	r3, [r3, #24]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	61fb      	str	r3, [r7, #28]
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 80158ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158d0:	3301      	adds	r3, #1
 80158d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80158d4:	e004      	b.n	80158e0 <_ux_device_class_hid_report_set+0x54>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 80158d6:	2300      	movs	r3, #0
 80158d8:	617b      	str	r3, [r7, #20]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 80158da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158dc:	699b      	ldr	r3, [r3, #24]
 80158de:	61fb      	str	r3, [r7, #28]
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 80158e0:	69fb      	ldr	r3, [r7, #28]
 80158e2:	2b20      	cmp	r3, #32
 80158e4:	d901      	bls.n	80158ea <_ux_device_class_hid_report_set+0x5e>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80158e6:	2320      	movs	r3, #32
 80158e8:	61fb      	str	r3, [r7, #28]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80158ea:	69fa      	ldr	r2, [r7, #28]
 80158ec:	f107 0314 	add.w	r3, r7, #20
 80158f0:	330c      	adds	r3, #12
 80158f2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7fe fd17 	bl	8014328 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d006      	beq.n	8015910 <_ux_device_class_hid_report_set+0x84>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	f107 0214 	add.w	r2, r7, #20
 801590a:	4611      	mov	r1, r2
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 8015910:	2300      	movs	r3, #0
}
 8015912:	4618      	mov	r0, r3
 8015914:	3750      	adds	r7, #80	@ 0x50
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	24001dac 	.word	0x24001dac

08015920 <_ux_device_class_hid_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_ptr;


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6a1b      	ldr	r3, [r3, #32]
 801592c:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015932:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	3350      	adds	r3, #80	@ 0x50
 8015938:	4618      	mov	r0, r3
 801593a:	f7fe fed3 	bl	80146e4 <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015944:	4618      	mov	r0, r3
 8015946:	f7fe fd0d 	bl	8014364 <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	3328      	adds	r3, #40	@ 0x28
 801594e:	4618      	mov	r0, r3
 8015950:	f7fe fa61 	bl	8013e16 <_ux_utility_event_flags_delete>

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015958:	4618      	mov	r0, r3
 801595a:	f7fe fd03 	bl	8014364 <_ux_utility_memory_free>
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 801595e:	68b8      	ldr	r0, [r7, #8]
 8015960:	f7fe fd00 	bl	8014364 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8015964:	2300      	movs	r3, #0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}

0801596e <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 801596e:	b580      	push	{r7, lr}
 8015970:	b082      	sub	sp, #8
 8015972:	af00      	add	r7, sp, #0
 8015974:	6078      	str	r0, [r7, #4]
 8015976:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2280      	movs	r2, #128	@ 0x80
 801597c:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2201      	movs	r2, #1
 8015982:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8015984:	6838      	ldr	r0, [r7, #0]
 8015986:	f001 fac3 	bl	8016f10 <_ux_device_stack_control_request_process>
}
 801598a:	bf00      	nop
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8015992:	b580      	push	{r7, lr}
 8015994:	b084      	sub	sp, #16
 8015996:	af00      	add	r7, sp, #0
 8015998:	60f8      	str	r0, [r7, #12]
 801599a:	60b9      	str	r1, [r7, #8]
 801599c:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	2200      	movs	r2, #0
 80159a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2280      	movs	r2, #128	@ 0x80
 80159a8:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80159aa:	68b8      	ldr	r0, [r7, #8]
 80159ac:	f001 fab0 	bl	8016f10 <_ux_device_stack_control_request_process>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d108      	bne.n	80159c8 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	2203      	movs	r2, #3
 80159ba:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80159bc:	2300      	movs	r3, #0
 80159be:	2200      	movs	r2, #0
 80159c0:	2100      	movs	r1, #0
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f7f2 f91f 	bl	8007c06 <HAL_PCD_EP_Transmit>
    }
}
 80159c8:	bf00      	nop
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b084      	sub	sp, #16
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2280      	movs	r2, #128	@ 0x80
 80159e0:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80159e2:	68b8      	ldr	r0, [r7, #8]
 80159e4:	f001 fa94 	bl	8016f10 <_ux_device_stack_control_request_process>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d108      	bne.n	8015a00 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2204      	movs	r2, #4
 80159f2:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80159f4:	2300      	movs	r3, #0
 80159f6:	2200      	movs	r2, #0
 80159f8:	2100      	movs	r1, #0
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f7f2 f903 	bl	8007c06 <HAL_PCD_EP_Transmit>
    }
}
 8015a00:	bf00      	nop
 8015a02:	3710      	adds	r7, #16
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}

08015a08 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b088      	sub	sp, #32
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015a10:	4b39      	ldr	r3, [pc, #228]	@ (8015af8 <HAL_PCD_SetupStageCallback+0xf0>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	69db      	ldr	r3, [r3, #28]
 8015a1a:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8015a1c:	69bb      	ldr	r3, [r7, #24]
 8015a1e:	3304      	adds	r3, #4
 8015a20:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	3320      	adds	r3, #32
 8015a28:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015a36:	2208      	movs	r2, #8
 8015a38:	4619      	mov	r1, r3
 8015a3a:	f7fe fc75 	bl	8014328 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	2200      	movs	r2, #0
 8015a42:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	2201      	movs	r2, #1
 8015a48:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	f023 020e 	bic.w	r2, r3, #14
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8015a62:	b25b      	sxtb	r3, r3
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	da04      	bge.n	8015a72 <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8015a68:	6939      	ldr	r1, [r7, #16]
 8015a6a:	6978      	ldr	r0, [r7, #20]
 8015a6c:	f7ff ff7f 	bl	801596e <_ux_dcd_stm32_setup_in>
 8015a70:	e03e      	b.n	8015af0 <HAL_PCD_SetupStageCallback+0xe8>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2200      	movs	r2, #0
 8015a76:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d10a      	bne.n	8015a98 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d105      	bne.n	8015a98 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	6939      	ldr	r1, [r7, #16]
 8015a90:	6978      	ldr	r0, [r7, #20]
 8015a92:	f7ff ff9d 	bl	80159d0 <_ux_dcd_stm32_setup_status>
 8015a96:	e02b      	b.n	8015af0 <HAL_PCD_SetupStageCallback+0xe8>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	3354      	adds	r3, #84	@ 0x54
 8015aa2:	3306      	adds	r3, #6
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fe fdb0 	bl	801460a <_ux_utility_short_get>
 8015aaa:	4602      	mov	r2, r0
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	695b      	ldr	r3, [r3, #20]
 8015ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ab8:	d907      	bls.n	8015aca <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8015aba:	68f9      	ldr	r1, [r7, #12]
 8015abc:	69b8      	ldr	r0, [r7, #24]
 8015abe:	f000 fad0 	bl	8016062 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8015ac8:	e012      	b.n	8015af0 <HAL_PCD_SetupStageCallback+0xe8>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	2200      	movs	r2, #0
 8015ace:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	68da      	ldr	r2, [r3, #12]
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	695b      	ldr	r3, [r3, #20]
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7f2 f83b 	bl	8007b60 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	2202      	movs	r2, #2
 8015aee:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8015af0:	3720      	adds	r7, #32
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	24001dac 	.word	0x24001dac

08015afc <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b088      	sub	sp, #32
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	460b      	mov	r3, r1
 8015b06:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015b08:	4b56      	ldr	r3, [pc, #344]	@ (8015c64 <HAL_PCD_DataInStageCallback+0x168>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	69db      	ldr	r3, [r3, #28]
 8015b12:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8015b14:	78fb      	ldrb	r3, [r7, #3]
 8015b16:	f003 030f 	and.w	r3, r3, #15
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d00b      	beq.n	8015b36 <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8015b1e:	78fb      	ldrb	r3, [r7, #3]
 8015b20:	f003 020f 	and.w	r2, r3, #15
 8015b24:	4613      	mov	r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4413      	add	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	3370      	adds	r3, #112	@ 0x70
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	4413      	add	r3, r2
 8015b32:	61fb      	str	r3, [r7, #28]
 8015b34:	e00a      	b.n	8015b4c <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015b36:	78fb      	ldrb	r3, [r7, #3]
 8015b38:	f003 020f 	and.w	r2, r3, #15
 8015b3c:	4613      	mov	r3, r2
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	4413      	add	r3, r2
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	693a      	ldr	r2, [r7, #16]
 8015b46:	4413      	add	r3, r2
 8015b48:	3304      	adds	r3, #4
 8015b4a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	3320      	adds	r3, #32
 8015b52:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015b54:	78fb      	ldrb	r3, [r7, #3]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d15c      	bne.n	8015c14 <HAL_PCD_DataInStageCallback+0x118>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	689b      	ldr	r3, [r3, #8]
 8015b5e:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	7a1b      	ldrb	r3, [r3, #8]
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d179      	bne.n	8015c5c <HAL_PCD_DataInStageCallback+0x160>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8015b68:	2300      	movs	r3, #0
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f7f1 fff6 	bl	8007b60 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015b78:	68ba      	ldr	r2, [r7, #8]
 8015b7a:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d824      	bhi.n	8015bca <HAL_PCD_DataInStageCallback+0xce>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b84:	2b01      	cmp	r3, #1
 8015b86:	d10a      	bne.n	8015b9e <HAL_PCD_DataInStageCallback+0xa2>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	7b99      	ldrb	r1, [r3, #14]
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	2200      	movs	r2, #0
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7f2 f838 	bl	8007c06 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8015b9c:	e05e      	b.n	8015c5c <HAL_PCD_DataInStageCallback+0x160>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2202      	movs	r2, #2
 8015ba8:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d003      	beq.n	8015bc2 <HAL_PCD_DataInStageCallback+0xc6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	2204      	movs	r2, #4
 8015bc6:	721a      	strb	r2, [r3, #8]
}
 8015bc8:	e048      	b.n	8015c5c <HAL_PCD_DataInStageCallback+0x160>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	69db      	ldr	r3, [r3, #28]
 8015bce:	68ba      	ldr	r2, [r7, #8]
 8015bd0:	8a12      	ldrh	r2, [r2, #16]
 8015bd2:	1a9b      	subs	r3, r3, r2
 8015bd4:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	8a1b      	ldrh	r3, [r3, #16]
 8015bda:	461a      	mov	r2, r3
 8015bdc:	69bb      	ldr	r3, [r7, #24]
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d902      	bls.n	8015be8 <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	8a1b      	ldrh	r3, [r3, #16]
 8015be6:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	691b      	ldr	r3, [r3, #16]
 8015bec:	68ba      	ldr	r2, [r7, #8]
 8015bee:	8a12      	ldrh	r2, [r2, #16]
 8015bf0:	441a      	add	r2, r3
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	69da      	ldr	r2, [r3, #28]
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	1ad2      	subs	r2, r2, r3
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8015c0a:	69bb      	ldr	r3, [r7, #24]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7f1 fffa 	bl	8007c06 <HAL_PCD_EP_Transmit>
}
 8015c12:	e023      	b.n	8015c5c <HAL_PCD_DataInStageCallback+0x160>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d010      	beq.n	8015c3e <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_requested_length)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00c      	beq.n	8015c3e <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2200      	movs	r2, #0
 8015c28:	651a      	str	r2, [r3, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8015c30:	78f9      	ldrb	r1, [r7, #3]
 8015c32:	2300      	movs	r3, #0
 8015c34:	2200      	movs	r2, #0
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f7f1 ffe5 	bl	8007c06 <HAL_PCD_EP_Transmit>
}
 8015c3c:	e00e      	b.n	8015c5c <HAL_PCD_DataInStageCallback+0x160>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2200      	movs	r2, #0
 8015c42:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2202      	movs	r2, #2
 8015c48:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	3330      	adds	r3, #48	@ 0x30
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7fe fcca 	bl	80145f0 <_ux_utility_semaphore_put>
}
 8015c5c:	bf00      	nop
 8015c5e:	3720      	adds	r7, #32
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	24001dac 	.word	0x24001dac

08015c68 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b088      	sub	sp, #32
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8015c74:	4b3b      	ldr	r3, [pc, #236]	@ (8015d64 <HAL_PCD_DataOutStageCallback+0xfc>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	69db      	ldr	r3, [r3, #28]
 8015c7e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015c80:	78fb      	ldrb	r3, [r7, #3]
 8015c82:	f003 020f 	and.w	r2, r3, #15
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	69ba      	ldr	r2, [r7, #24]
 8015c90:	4413      	add	r3, r2
 8015c92:	3304      	adds	r3, #4
 8015c94:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	3320      	adds	r3, #32
 8015c9c:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015c9e:	78fb      	ldrb	r3, [r7, #3]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d147      	bne.n	8015d34 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	7a1b      	ldrb	r3, [r3, #8]
 8015ca8:	2b02      	cmp	r3, #2
 8015caa:	d156      	bne.n	8015d5a <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	689b      	ldr	r3, [r3, #8]
 8015cb0:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015cb2:	78fb      	ldrb	r3, [r7, #3]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f7f1 ff8d 	bl	8007bd6 <HAL_PCD_EP_GetRxCount>
 8015cbc:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	699a      	ldr	r2, [r3, #24]
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	441a      	add	r2, r3
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d822      	bhi.n	8015d1c <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d005      	beq.n	8015cee <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	8a1b      	ldrh	r3, [r3, #16]
 8015ce6:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	4293      	cmp	r3, r2
 8015cec:	d005      	beq.n	8015cfa <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 8015cee:	687a      	ldr	r2, [r7, #4]
 8015cf0:	6939      	ldr	r1, [r7, #16]
 8015cf2:	6978      	ldr	r0, [r7, #20]
 8015cf4:	f7ff fe4d 	bl	8015992 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8015cf8:	e02f      	b.n	8015d5a <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	691b      	ldr	r3, [r3, #16]
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	8a12      	ldrh	r2, [r2, #16]
 8015d02:	441a      	add	r2, r3
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7f1 ff23 	bl	8007b60 <HAL_PCD_EP_Receive>
}
 8015d1a:	e01e      	b.n	8015d5a <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	2227      	movs	r2, #39	@ 0x27
 8015d20:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d017      	beq.n	8015d5a <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d2e:	6938      	ldr	r0, [r7, #16]
 8015d30:	4798      	blx	r3
}
 8015d32:	e012      	b.n	8015d5a <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015d34:	78fb      	ldrb	r3, [r7, #3]
 8015d36:	4619      	mov	r1, r3
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f7f1 ff4c 	bl	8007bd6 <HAL_PCD_EP_GetRxCount>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	2200      	movs	r2, #0
 8015d48:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	3330      	adds	r3, #48	@ 0x30
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fe fc4b 	bl	80145f0 <_ux_utility_semaphore_put>
}
 8015d5a:	bf00      	nop
 8015d5c:	3720      	adds	r7, #32
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}
 8015d62:	bf00      	nop
 8015d64:	24001dac 	.word	0x24001dac

08015d68 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b082      	sub	sp, #8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8015d70:	4b14      	ldr	r3, [pc, #80]	@ (8015dc4 <HAL_PCD_ResetCallback+0x5c>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	6a1b      	ldr	r3, [r3, #32]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d001      	beq.n	8015d7e <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8015d7a:	f001 fc35 	bl	80175e8 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	79db      	ldrb	r3, [r3, #7]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d002      	beq.n	8015d8c <HAL_PCD_ResetCallback+0x24>
 8015d86:	2b02      	cmp	r3, #2
 8015d88:	d006      	beq.n	8015d98 <HAL_PCD_ResetCallback+0x30>
 8015d8a:	e00b      	b.n	8015da4 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 8015d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8015dc4 <HAL_PCD_ResetCallback+0x5c>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2202      	movs	r2, #2
 8015d92:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        break;
 8015d96:	e00b      	b.n	8015db0 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8015d98:	4b0a      	ldr	r3, [pc, #40]	@ (8015dc4 <HAL_PCD_ResetCallback+0x5c>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        break;
 8015da2:	e005      	b.n	8015db0 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8015da4:	4b07      	ldr	r3, [pc, #28]	@ (8015dc4 <HAL_PCD_ResetCallback+0x5c>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2201      	movs	r2, #1
 8015daa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        break;
 8015dae:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8015db0:	f000 fa94 	bl	80162dc <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015db4:	4b03      	ldr	r3, [pc, #12]	@ (8015dc4 <HAL_PCD_ResetCallback+0x5c>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2201      	movs	r2, #1
 8015dba:	621a      	str	r2, [r3, #32]
}
 8015dbc:	bf00      	nop
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	24001dac 	.word	0x24001dac

08015dc8 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015dd0:	4b07      	ldr	r3, [pc, #28]	@ (8015df0 <HAL_PCD_ConnectCallback+0x28>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d005      	beq.n	8015de8 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 8015ddc:	4b04      	ldr	r3, [pc, #16]	@ (8015df0 <HAL_PCD_ConnectCallback+0x28>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015de4:	20f1      	movs	r0, #241	@ 0xf1
 8015de6:	4798      	blx	r3
    }
}
 8015de8:	bf00      	nop
 8015dea:	3708      	adds	r7, #8
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	24001dac 	.word	0x24001dac

08015df4 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8015e2c <HAL_PCD_DisconnectCallback+0x38>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d005      	beq.n	8015e14 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 8015e08:	4b08      	ldr	r3, [pc, #32]	@ (8015e2c <HAL_PCD_DisconnectCallback+0x38>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e10:	20f2      	movs	r0, #242	@ 0xf2
 8015e12:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8015e14:	4b05      	ldr	r3, [pc, #20]	@ (8015e2c <HAL_PCD_DisconnectCallback+0x38>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	6a1b      	ldr	r3, [r3, #32]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d001      	beq.n	8015e22 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8015e1e:	f001 fbe3 	bl	80175e8 <_ux_device_stack_disconnect>
    }
}
 8015e22:	bf00      	nop
 8015e24:	3708      	adds	r7, #8
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	24001dac 	.word	0x24001dac

08015e30 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015e38:	4b07      	ldr	r3, [pc, #28]	@ (8015e58 <HAL_PCD_SuspendCallback+0x28>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d005      	beq.n	8015e50 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8015e44:	4b04      	ldr	r3, [pc, #16]	@ (8015e58 <HAL_PCD_SuspendCallback+0x28>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e4c:	20f4      	movs	r0, #244	@ 0xf4
 8015e4e:	4798      	blx	r3
    }
}
 8015e50:	bf00      	nop
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	24001dac 	.word	0x24001dac

08015e5c <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b082      	sub	sp, #8
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015e64:	4b07      	ldr	r3, [pc, #28]	@ (8015e84 <HAL_PCD_ResumeCallback+0x28>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d005      	beq.n	8015e7c <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8015e70:	4b04      	ldr	r3, [pc, #16]	@ (8015e84 <HAL_PCD_ResumeCallback+0x28>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e78:	20f3      	movs	r0, #243	@ 0xf3
 8015e7a:	4798      	blx	r3
    }
}
 8015e7c:	bf00      	nop
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	24001dac 	.word	0x24001dac

08015e88 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015e90:	4b07      	ldr	r3, [pc, #28]	@ (8015eb0 <HAL_PCD_SOFCallback+0x28>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d005      	beq.n	8015ea8 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8015e9c:	4b04      	ldr	r3, [pc, #16]	@ (8015eb0 <HAL_PCD_SOFCallback+0x28>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015ea4:	20f0      	movs	r0, #240	@ 0xf0
 8015ea6:	4798      	blx	r3
    }
}
 8015ea8:	bf00      	nop
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}
 8015eb0:	24001dac 	.word	0x24001dac

08015eb4 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015ec4:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015ecc:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	2b08      	cmp	r3, #8
 8015ed2:	d807      	bhi.n	8015ee4 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8015eda:	791b      	ldrb	r3, [r3, #4]
 8015edc:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	4293      	cmp	r3, r2
 8015ee2:	d301      	bcc.n	8015ee8 <_stm32_ed_get+0x34>
        return(UX_NULL);
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	e013      	b.n	8015f10 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d008      	beq.n	8015f00 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8015eee:	68ba      	ldr	r2, [r7, #8]
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	005b      	lsls	r3, r3, #1
 8015ef4:	4413      	add	r3, r2
 8015ef6:	009b      	lsls	r3, r3, #2
 8015ef8:	3370      	adds	r3, #112	@ 0x70
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	4413      	add	r3, r2
 8015efe:	e007      	b.n	8015f10 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	4613      	mov	r3, r2
 8015f04:	005b      	lsls	r3, r3, #1
 8015f06:	4413      	add	r3, r2
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	3304      	adds	r3, #4
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3714      	adds	r7, #20
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	7b9b      	ldrb	r3, [r3, #14]
 8015f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015f2e:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	7b9b      	ldrb	r3, [r3, #14]
 8015f34:	4619      	mov	r1, r3
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7ff ffbc 	bl	8015eb4 <_stm32_ed_get>
 8015f3c:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d101      	bne.n	8015f48 <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 8015f44:	2314      	movs	r3, #20
 8015f46:	e030      	b.n	8015faa <_ux_dcd_stm32_endpoint_create+0x8e>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	f003 0301 	and.w	r3, r3, #1
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d129      	bne.n	8015fa8 <_ux_dcd_stm32_endpoint_create+0x8c>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	f043 0201 	orr.w	r2, r3, #1
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	68ba      	ldr	r2, [r7, #8]
 8015f64:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	683a      	ldr	r2, [r7, #0]
 8015f6a:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	b2da      	uxtb	r2, r3
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	7b9b      	ldrb	r3, [r3, #14]
 8015f78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8015f7c:	b2da      	uxtb	r2, r3
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d00d      	beq.n	8015fa4 <_ux_dcd_stm32_endpoint_create+0x88>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	7b99      	ldrb	r1, [r3, #14]
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	8a1a      	ldrh	r2, [r3, #16]
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	7bdb      	ldrb	r3, [r3, #15]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015f9a:	f003 0303 	and.w	r3, r3, #3
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	f7f1 fd2a 	bl	80079f8 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	e000      	b.n	8015faa <_ux_dcd_stm32_endpoint_create+0x8e>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 8015fa8:	2314      	movs	r3, #20
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3710      	adds	r7, #16
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015fb2:	b580      	push	{r7, lr}
 8015fb4:	b084      	sub	sp, #16
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	6078      	str	r0, [r7, #4]
 8015fba:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	7b9b      	ldrb	r3, [r3, #14]
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	4610      	mov	r0, r2
 8015fd6:	f7f1 fd79 	bl	8007acc <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8015fda:	2300      	movs	r3, #0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3710      	adds	r7, #16
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b088      	sub	sp, #32
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	689b      	ldr	r3, [r3, #8]
 8015ff2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8015ff8:	617b      	str	r3, [r7, #20]
    return(posture);
 8015ffa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015ffc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015ffe:	b672      	cpsid	i
    return(int_posture);
 8016000:	693b      	ldr	r3, [r7, #16]

    UX_DISABLE
 8016002:	61bb      	str	r3, [r7, #24]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	685b      	ldr	r3, [r3, #4]
 8016008:	f423 7243 	bic.w	r2, r3, #780	@ 0x30c
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	2200      	movs	r2, #0
 8016014:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	7b9b      	ldrb	r3, [r3, #14]
 8016020:	4619      	mov	r1, r3
 8016022:	4610      	mov	r0, r2
 8016024:	f7f1 fe8c 	bl	8007d40 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	7b9b      	ldrb	r3, [r3, #14]
 8016032:	4619      	mov	r1, r3
 8016034:	4610      	mov	r0, r2
 8016036:	f7f1 ff0a 	bl	8007e4e <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801603e:	2b00      	cmp	r3, #0
 8016040:	d004      	beq.n	801604c <_ux_dcd_stm32_endpoint_reset+0x68>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	3350      	adds	r3, #80	@ 0x50
 8016046:	4618      	mov	r0, r3
 8016048:	f7fe fad2 	bl	80145f0 <_ux_utility_semaphore_put>
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f383 8810 	msr	PRIMASK, r3
}
 8016056:	bf00      	nop
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 8016058:	2300      	movs	r3, #0
}
 801605a:	4618      	mov	r0, r3
 801605c:	3720      	adds	r7, #32
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}

08016062 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8016062:	b580      	push	{r7, lr}
 8016064:	b084      	sub	sp, #16
 8016066:	af00      	add	r7, sp, #0
 8016068:	6078      	str	r0, [r7, #4]
 801606a:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	685b      	ldr	r3, [r3, #4]
 8016076:	f043 0204 	orr.w	r2, r3, #4
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	7b9a      	ldrb	r2, [r3, #14]
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	7a9b      	ldrb	r3, [r3, #10]
 801608c:	4313      	orrs	r3, r2
 801608e:	b2db      	uxtb	r3, r3
 8016090:	4619      	mov	r1, r3
 8016092:	f7f1 fdf2 	bl	8007c7a <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8016096:	2300      	movs	r3, #0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3710      	adds	r7, #16
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <_stm32_ed_get>:
{
 80160a0:	b480      	push	{r7}
 80160a2:	b085      	sub	sp, #20
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80160b0:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80160b8:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	2b08      	cmp	r3, #8
 80160be:	d807      	bhi.n	80160d0 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80160c6:	791b      	ldrb	r3, [r3, #4]
 80160c8:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d301      	bcc.n	80160d4 <_stm32_ed_get+0x34>
        return(UX_NULL);
 80160d0:	2300      	movs	r3, #0
 80160d2:	e013      	b.n	80160fc <_stm32_ed_get+0x5c>
    if (ep_dir)
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d008      	beq.n	80160ec <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80160da:	68ba      	ldr	r2, [r7, #8]
 80160dc:	4613      	mov	r3, r2
 80160de:	005b      	lsls	r3, r3, #1
 80160e0:	4413      	add	r3, r2
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	3370      	adds	r3, #112	@ 0x70
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	4413      	add	r3, r2
 80160ea:	e007      	b.n	80160fc <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80160ec:	68ba      	ldr	r2, [r7, #8]
 80160ee:	4613      	mov	r3, r2
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4413      	add	r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	687a      	ldr	r2, [r7, #4]
 80160f8:	4413      	add	r3, r2
 80160fa:	3304      	adds	r3, #4
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3714      	adds	r7, #20
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 8016112:	6839      	ldr	r1, [r7, #0]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7ff ffc3 	bl	80160a0 <_stm32_ed_get>
 801611a:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	685b      	ldr	r3, [r3, #4]
 8016120:	f003 0301 	and.w	r3, r3, #1
 8016124:	2b00      	cmp	r3, #0
 8016126:	d101      	bne.n	801612c <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 8016128:	23ff      	movs	r3, #255	@ 0xff
 801612a:	e008      	b.n	801613e <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	f003 0304 	and.w	r3, r3, #4
 8016134:	2b00      	cmp	r3, #0
 8016136:	d101      	bne.n	801613c <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 8016138:	2300      	movs	r3, #0
 801613a:	e000      	b.n	801613e <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 801613c:	2301      	movs	r3, #1
}
 801613e:	4618      	mov	r0, r3
 8016140:	3710      	adds	r7, #16
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 8016146:	b480      	push	{r7}
 8016148:	b083      	sub	sp, #12
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
 801614e:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 8016150:	2300      	movs	r3, #0
}
 8016152:	4618      	mov	r0, r3
 8016154:	370c      	adds	r7, #12
 8016156:	46bd      	mov	sp, r7
 8016158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615c:	4770      	bx	lr
	...

08016160 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d106      	bne.n	8016182 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8016174:	2255      	movs	r2, #85	@ 0x55
 8016176:	2102      	movs	r1, #2
 8016178:	2002      	movs	r0, #2
 801617a:	f7fd fce7 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801617e:	2355      	movs	r3, #85	@ 0x55
 8016180:	e077      	b.n	8016272 <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	69db      	ldr	r3, [r3, #28]
 8016186:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	3b0a      	subs	r3, #10
 801618c:	2b0b      	cmp	r3, #11
 801618e:	d867      	bhi.n	8016260 <_ux_dcd_stm32_function+0x100>
 8016190:	a201      	add	r2, pc, #4	@ (adr r2, 8016198 <_ux_dcd_stm32_function+0x38>)
 8016192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016196:	bf00      	nop
 8016198:	080161c9 	.word	0x080161c9
 801619c:	08016261 	.word	0x08016261
 80161a0:	080161d5 	.word	0x080161d5
 80161a4:	080161e1 	.word	0x080161e1
 80161a8:	080161ed 	.word	0x080161ed
 80161ac:	080161f9 	.word	0x080161f9
 80161b0:	08016205 	.word	0x08016205
 80161b4:	0801621d 	.word	0x0801621d
 80161b8:	08016261 	.word	0x08016261
 80161bc:	08016235 	.word	0x08016235
 80161c0:	08016211 	.word	0x08016211
 80161c4:	08016253 	.word	0x08016253
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80161c8:	6879      	ldr	r1, [r7, #4]
 80161ca:	6938      	ldr	r0, [r7, #16]
 80161cc:	f7ff ffbb 	bl	8016146 <_ux_dcd_stm32_frame_number_get>
 80161d0:	6178      	str	r0, [r7, #20]
        break;
 80161d2:	e04d      	b.n	8016270 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 80161d4:	6879      	ldr	r1, [r7, #4]
 80161d6:	6938      	ldr	r0, [r7, #16]
 80161d8:	f000 f96b 	bl	80164b2 <_ux_dcd_stm32_transfer_request>
 80161dc:	6178      	str	r0, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 80161de:	e047      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 80161e0:	6879      	ldr	r1, [r7, #4]
 80161e2:	6938      	ldr	r0, [r7, #16]
 80161e4:	f000 f946 	bl	8016474 <_ux_dcd_stm32_transfer_abort>
 80161e8:	6178      	str	r0, [r7, #20]
        break;
 80161ea:	e041      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 80161ec:	6879      	ldr	r1, [r7, #4]
 80161ee:	6938      	ldr	r0, [r7, #16]
 80161f0:	f7ff fe94 	bl	8015f1c <_ux_dcd_stm32_endpoint_create>
 80161f4:	6178      	str	r0, [r7, #20]
        break;
 80161f6:	e03b      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 80161f8:	6879      	ldr	r1, [r7, #4]
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	f7ff fed9 	bl	8015fb2 <_ux_dcd_stm32_endpoint_destroy>
 8016200:	6178      	str	r0, [r7, #20]
        break;
 8016202:	e035      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8016204:	6879      	ldr	r1, [r7, #4]
 8016206:	6938      	ldr	r0, [r7, #16]
 8016208:	f7ff feec 	bl	8015fe4 <_ux_dcd_stm32_endpoint_reset>
 801620c:	6178      	str	r0, [r7, #20]
        break;
 801620e:	e02f      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8016210:	6879      	ldr	r1, [r7, #4]
 8016212:	6938      	ldr	r0, [r7, #16]
 8016214:	f7ff ff25 	bl	8016062 <_ux_dcd_stm32_endpoint_stall>
 8016218:	6178      	str	r0, [r7, #20]
        break;
 801621a:	e029      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	b2d2      	uxtb	r2, r2
 8016226:	4611      	mov	r1, r2
 8016228:	4618      	mov	r0, r3
 801622a:	f7f1 fbc1 	bl	80079b0 <HAL_PCD_SetAddress>
 801622e:	4603      	mov	r3, r0
 8016230:	617b      	str	r3, [r7, #20]
        break;
 8016232:	e01d      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2b0b      	cmp	r3, #11
 8016238:	d108      	bne.n	801624c <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8016240:	4618      	mov	r0, r3
 8016242:	f7f0 fe94 	bl	8006f6e <HAL_PCD_Stop>
 8016246:	4603      	mov	r3, r0
 8016248:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 801624a:	e011      	b.n	8016270 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 801624c:	2300      	movs	r3, #0
 801624e:	617b      	str	r3, [r7, #20]
        break;
 8016250:	e00e      	b.n	8016270 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	4619      	mov	r1, r3
 8016256:	6938      	ldr	r0, [r7, #16]
 8016258:	f7ff ff56 	bl	8016108 <_ux_dcd_stm32_endpoint_status>
 801625c:	6178      	str	r0, [r7, #20]
        break;
 801625e:	e007      	b.n	8016270 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8016260:	2254      	movs	r2, #84	@ 0x54
 8016262:	2102      	movs	r1, #2
 8016264:	2002      	movs	r0, #2
 8016266:	f7fd fc71 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 801626a:	2354      	movs	r3, #84	@ 0x54
 801626c:	617b      	str	r3, [r7, #20]
        break;
 801626e:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 8016270:	697b      	ldr	r3, [r7, #20]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3718      	adds	r7, #24
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop

0801627c <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016286:	4b13      	ldr	r3, [pc, #76]	@ (80162d4 <_ux_dcd_stm32_initialize+0x58>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2280      	movs	r2, #128	@ 0x80
 8016290:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8016292:	22e0      	movs	r2, #224	@ 0xe0
 8016294:	2100      	movs	r1, #0
 8016296:	2000      	movs	r0, #0
 8016298:	f7fd fe40 	bl	8013f1c <_ux_utility_memory_allocate>
 801629c:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d101      	bne.n	80162a8 <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 80162a4:	2312      	movs	r3, #18
 80162a6:	e010      	b.n	80162ca <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	68ba      	ldr	r2, [r7, #8]
 80162ac:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	68fa      	ldr	r2, [r7, #12]
 80162b2:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	4a08      	ldr	r2, [pc, #32]	@ (80162d8 <_ux_dcd_stm32_initialize+0x5c>)
 80162b8:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2201      	movs	r2, #1
 80162c6:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3710      	adds	r7, #16
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	24001dac 	.word	0x24001dac
 80162d8:	08016161 	.word	0x08016161

080162dc <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b086      	sub	sp, #24
 80162e0:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80162e2:	4b62      	ldr	r3, [pc, #392]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	69db      	ldr	r3, [r3, #28]
 80162ec:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80162ee:	4b5f      	ldr	r3, [pc, #380]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	3320      	adds	r3, #32
 80162f4:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 80162f6:	4b5d      	ldr	r3, [pc, #372]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80162fe:	2b01      	cmp	r3, #1
 8016300:	d110      	bne.n	8016324 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8016302:	4b5a      	ldr	r3, [pc, #360]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016304:	681a      	ldr	r2, [r3, #0]
 8016306:	4b59      	ldr	r3, [pc, #356]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
 801630e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8016312:	4b56      	ldr	r3, [pc, #344]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	4b55      	ldr	r3, [pc, #340]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 801631e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8016322:	e02b      	b.n	801637c <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8016324:	4b51      	ldr	r3, [pc, #324]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	2200      	movs	r2, #0
 801632a:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801632e:	4b4f      	ldr	r3, [pc, #316]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8016336:	2b01      	cmp	r3, #1
 8016338:	d110      	bne.n	801635c <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801633a:	4b4c      	ldr	r3, [pc, #304]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801633c:	681a      	ldr	r2, [r3, #0]
 801633e:	4b4b      	ldr	r3, [pc, #300]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8016346:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801634a:	4b48      	ldr	r3, [pc, #288]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	4b47      	ldr	r3, [pc, #284]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8016356:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 801635a:	e00f      	b.n	801637c <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 801635c:	4b43      	ldr	r3, [pc, #268]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	4b42      	ldr	r3, [pc, #264]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8016368:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 801636c:	4b3f      	ldr	r3, [pc, #252]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801636e:	681a      	ldr	r2, [r3, #0]
 8016370:	4b3e      	ldr	r3, [pc, #248]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8016378:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801637c:	4b3b      	ldr	r3, [pc, #236]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016384:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 801638a:	220e      	movs	r2, #14
 801638c:	4938      	ldr	r1, [pc, #224]	@ (8016470 <_ux_dcd_stm32_initialize_complete+0x194>)
 801638e:	68b8      	ldr	r0, [r7, #8]
 8016390:	f7fd fcd6 	bl	8013d40 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	3338      	adds	r3, #56	@ 0x38
 8016398:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80163a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	f103 0218 	add.w	r2, r3, #24
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	689b      	ldr	r3, [r3, #8]
 80163bc:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	7adb      	ldrb	r3, [r3, #11]
 80163c2:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f103 0218 	add.w	r2, r3, #24
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 80163d6:	68fa      	ldr	r2, [r7, #12]
 80163d8:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80163da:	210e      	movs	r1, #14
 80163dc:	6978      	ldr	r0, [r7, #20]
 80163de:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80163e6:	2100      	movs	r1, #0
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7f1 fd30 	bl	8007e4e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	7adb      	ldrb	r3, [r3, #11]
 80163f8:	461a      	mov	r2, r3
 80163fa:	2300      	movs	r3, #0
 80163fc:	2100      	movs	r1, #0
 80163fe:	f7f1 fafb 	bl	80079f8 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8016402:	693b      	ldr	r3, [r7, #16]
 8016404:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8016408:	2180      	movs	r1, #128	@ 0x80
 801640a:	4618      	mov	r0, r3
 801640c:	f7f1 fd1f 	bl	8007e4e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	7adb      	ldrb	r3, [r3, #11]
 801641a:	461a      	mov	r2, r3
 801641c:	2300      	movs	r3, #0
 801641e:	2180      	movs	r1, #128	@ 0x80
 8016420:	f7f1 faea 	bl	80079f8 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2200      	movs	r2, #0
 8016428:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2201      	movs	r2, #1
 801642e:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2201      	movs	r2, #1
 8016434:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2208      	movs	r2, #8
 801643a:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2208      	movs	r2, #8
 8016440:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2200      	movs	r2, #0
 8016446:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8016448:	4b08      	ldr	r3, [pc, #32]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016450:	2b00      	cmp	r3, #0
 8016452:	d005      	beq.n	8016460 <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8016454:	4b05      	ldr	r3, [pc, #20]	@ (801646c <_ux_dcd_stm32_initialize_complete+0x190>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801645c:	2001      	movs	r0, #1
 801645e:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8016460:	2300      	movs	r3, #0
}
 8016462:	4618      	mov	r0, r3
 8016464:	3718      	adds	r7, #24
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	24001dac 	.word	0x24001dac
 8016470:	24000088 	.word	0x24000088

08016474 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	7b9b      	ldrb	r3, [r3, #14]
 801648e:	4619      	mov	r1, r3
 8016490:	4610      	mov	r0, r2
 8016492:	f7f1 fcab 	bl	8007dec <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	7b9b      	ldrb	r3, [r3, #14]
 80164a0:	4619      	mov	r1, r3
 80164a2:	4610      	mov	r0, r2
 80164a4:	f7f1 fcd3 	bl	8007e4e <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3710      	adds	r7, #16
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}

080164b2 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	b084      	sub	sp, #16
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	6078      	str	r0, [r7, #4]
 80164ba:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	689b      	ldr	r3, [r3, #8]
 80164c0:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164c6:	2b03      	cmp	r3, #3
 80164c8:	d12c      	bne.n	8016524 <_ux_dcd_stm32_transfer_request+0x72>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	695b      	ldr	r3, [r3, #20]
 80164dc:	f7f1 fb93 	bl	8007c06 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	7b9b      	ldrb	r3, [r3, #14]
 80164e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d044      	beq.n	8016576 <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80164f6:	4619      	mov	r1, r3
 80164f8:	4610      	mov	r0, r2
 80164fa:	f7fe f841 	bl	8014580 <_ux_utility_semaphore_get>
 80164fe:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <_ux_dcd_stm32_transfer_request+0x58>
                return(status);
 8016506:	68bb      	ldr	r3, [r7, #8]
 8016508:	e036      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	695a      	ldr	r2, [r3, #20]
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016516:	2b00      	cmp	r3, #0
 8016518:	d002      	beq.n	8016520 <_ux_dcd_stm32_transfer_request+0x6e>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801651e:	e02b      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8016520:	2300      	movs	r3, #0
 8016522:	e029      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	f7f1 fb13 	bl	8007b60 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	7b9b      	ldrb	r3, [r3, #14]
 801653e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016542:	2b00      	cmp	r3, #0
 8016544:	d017      	beq.n	8016576 <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8016550:	4619      	mov	r1, r3
 8016552:	4610      	mov	r0, r2
 8016554:	f7fe f814 	bl	8014580 <_ux_utility_semaphore_get>
 8016558:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d001      	beq.n	8016564 <_ux_dcd_stm32_transfer_request+0xb2>
                return(status);
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	e009      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016568:	2b00      	cmp	r3, #0
 801656a:	d002      	beq.n	8016572 <_ux_dcd_stm32_transfer_request+0xc0>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016570:	e002      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8016572:	2300      	movs	r3, #0
 8016574:	e000      	b.n	8016578 <_ux_dcd_stm32_transfer_request+0xc6>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8016576:	2300      	movs	r3, #0
}
 8016578:	4618      	mov	r0, r3
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016588:	4b1b      	ldr	r3, [pc, #108]	@ (80165f8 <_ux_device_stack_alternate_setting_get+0x78>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	3320      	adds	r3, #32
 801658e:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b03      	cmp	r3, #3
 8016596:	d129      	bne.n	80165ec <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801659e:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 80165a0:	e021      	b.n	80165e6 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 80165a2:	69fb      	ldr	r3, [r7, #28]
 80165a4:	7b9b      	ldrb	r3, [r3, #14]
 80165a6:	461a      	mov	r2, r3
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d118      	bne.n	80165e0 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	3318      	adds	r3, #24
 80165b2:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	3320      	adds	r3, #32
 80165b8:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 80165be:	69fa      	ldr	r2, [r7, #28]
 80165c0:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 80165c2:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 80165c4:	693b      	ldr	r3, [r7, #16]
 80165c6:	2201      	movs	r2, #1
 80165c8:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	2203      	movs	r2, #3
 80165ce:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80165d0:	2201      	movs	r2, #1
 80165d2:	2101      	movs	r1, #1
 80165d4:	6938      	ldr	r0, [r7, #16]
 80165d6:	f001 fd17 	bl	8018008 <_ux_device_stack_transfer_request>
 80165da:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	e006      	b.n	80165ee <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	699b      	ldr	r3, [r3, #24]
 80165e4:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d1da      	bne.n	80165a2 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 80165ec:	23ff      	movs	r3, #255	@ 0xff
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3720      	adds	r7, #32
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	24001dac 	.word	0x24001dac

080165fc <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b0a4      	sub	sp, #144	@ 0x90
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016606:	4bb5      	ldr	r3, [pc, #724]	@ (80168dc <_ux_device_stack_alternate_setting_set+0x2e0>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	3320      	adds	r3, #32
 801660c:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801660e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2b03      	cmp	r3, #3
 8016614:	d001      	beq.n	801661a <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8016616:	2354      	movs	r3, #84	@ 0x54
 8016618:	e1ee      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 801661a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801661c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 8016624:	e00b      	b.n	801663e <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8016626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801662a:	7b9b      	ldrb	r3, [r3, #14]
 801662c:	461a      	mov	r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	4293      	cmp	r3, r2
 8016632:	d009      	beq.n	8016648 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8016634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016638:	699b      	ldr	r3, [r3, #24]
 801663a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 801663e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016642:	2b00      	cmp	r3, #0
 8016644:	d1ef      	bne.n	8016626 <_ux_device_stack_alternate_setting_set+0x2a>
 8016646:	e000      	b.n	801664a <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 8016648:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 801664a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801664e:	2b00      	cmp	r3, #0
 8016650:	d106      	bne.n	8016660 <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8016652:	2252      	movs	r2, #82	@ 0x52
 8016654:	2107      	movs	r1, #7
 8016656:	2002      	movs	r0, #2
 8016658:	f7fd fa78 	bl	8013b4c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 801665c:	2352      	movs	r3, #82	@ 0x52
 801665e:	e1cb      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8016660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016664:	7bdb      	ldrb	r3, [r3, #15]
 8016666:	461a      	mov	r2, r3
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	4293      	cmp	r3, r2
 801666c:	d101      	bne.n	8016672 <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 801666e:	2300      	movs	r3, #0
 8016670:	e1c2      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8016672:	4b9a      	ldr	r3, [pc, #616]	@ (80168dc <_ux_device_stack_alternate_setting_set+0x2e0>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016678:	4b98      	ldr	r3, [pc, #608]	@ (80168dc <_ux_device_stack_alternate_setting_set+0x2e0>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8016684:	4b95      	ldr	r3, [pc, #596]	@ (80168dc <_ux_device_stack_alternate_setting_set+0x2e0>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801668c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8016690:	e1ac      	b.n	80169ec <_ux_device_stack_alternate_setting_set+0x3f0>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8016692:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 801669a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801669e:	785b      	ldrb	r3, [r3, #1]
 80166a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80166a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80166a8:	2b02      	cmp	r3, #2
 80166aa:	f040 8193 	bne.w	80169d4 <_ux_device_stack_alternate_setting_set+0x3d8>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 80166ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80166b2:	2208      	movs	r2, #8
 80166b4:	498a      	ldr	r1, [pc, #552]	@ (80168e0 <_ux_device_stack_alternate_setting_set+0x2e4>)
 80166b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80166ba:	f7fd fb41 	bl	8013d40 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 80166be:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80166c2:	461a      	mov	r2, r3
 80166c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80166c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80166ca:	429a      	cmp	r2, r3
 80166cc:	f040 8182 	bne.w	80169d4 <_ux_device_stack_alternate_setting_set+0x3d8>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 80166d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80166d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 80166d8:	e176      	b.n	80169c8 <_ux_device_stack_alternate_setting_set+0x3cc>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 80166da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 80166e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80166e6:	785b      	ldrb	r3, [r3, #1]
 80166e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80166ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80166f0:	2b04      	cmp	r3, #4
 80166f2:	f040 815d 	bne.w	80169b0 <_ux_device_stack_alternate_setting_set+0x3b4>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 80166f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80166fa:	2209      	movs	r2, #9
 80166fc:	4979      	ldr	r1, [pc, #484]	@ (80168e4 <_ux_device_stack_alternate_setting_set+0x2e8>)
 80166fe:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8016702:	f7fd fb1d 	bl	8013d40 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8016706:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 801670a:	461a      	mov	r2, r3
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	4293      	cmp	r3, r2
 8016710:	f040 814e 	bne.w	80169b0 <_ux_device_stack_alternate_setting_set+0x3b4>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8016714:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8016718:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	4293      	cmp	r3, r2
 801671e:	f040 8147 	bne.w	80169b0 <_ux_device_stack_alternate_setting_set+0x3b4>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016726:	69db      	ldr	r3, [r3, #28]
 8016728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 801672c:	e026      	b.n	801677c <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 801672e:	2126      	movs	r1, #38	@ 0x26
 8016730:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8016734:	f001 fc56 	bl	8017fe4 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8016738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801673a:	699b      	ldr	r3, [r3, #24]
 801673c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016740:	210f      	movs	r1, #15
 8016742:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016744:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8016746:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801674a:	695b      	ldr	r3, [r3, #20]
 801674c:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801674e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016752:	2200      	movs	r2, #0
 8016754:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8016756:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801675a:	2200      	movs	r2, #0
 801675c:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801675e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016762:	2200      	movs	r2, #0
 8016764:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8016766:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801676a:	2200      	movs	r2, #0
 801676c:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801676e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016772:	2200      	movs	r2, #0
 8016774:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8016776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 801677c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016780:	2b00      	cmp	r3, #0
 8016782:	d1d4      	bne.n	801672e <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 8016784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016788:	2200      	movs	r2, #0
 801678a:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 801678c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	461a      	mov	r2, r3
 8016794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016798:	1a9b      	subs	r3, r3, r2
 801679a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 801679e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	461a      	mov	r2, r3
 80167a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167aa:	4413      	add	r3, r2
 80167ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 80167b0:	e0c9      	b.n	8016946 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 80167b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 80167ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167be:	785b      	ldrb	r3, [r3, #1]
 80167c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 80167c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80167c8:	2b05      	cmp	r3, #5
 80167ca:	d009      	beq.n	80167e0 <_ux_device_stack_alternate_setting_set+0x1e4>
 80167cc:	2b05      	cmp	r3, #5
 80167ce:	f300 80ad 	bgt.w	801692c <_ux_device_stack_alternate_setting_set+0x330>
 80167d2:	2b02      	cmp	r3, #2
 80167d4:	f000 80a6 	beq.w	8016924 <_ux_device_stack_alternate_setting_set+0x328>
 80167d8:	2b04      	cmp	r3, #4
 80167da:	f000 80a3 	beq.w	8016924 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 80167de:	e0a5      	b.n	801692c <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 80167e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80167e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80167e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80167ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80167ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80167f0:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 80167f2:	e011      	b.n	8016818 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80167f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d104      	bne.n	8016808 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 80167fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016802:	2201      	movs	r2, #1
 8016804:	601a      	str	r2, [r3, #0]
                                            break;
 8016806:	e00a      	b.n	801681e <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 8016808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801680c:	3380      	adds	r3, #128	@ 0x80
 801680e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 8016812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016814:	3b01      	subs	r3, #1
 8016816:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 8016818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1ea      	bne.n	80167f4 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 801681e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 8016824:	2312      	movs	r3, #18
 8016826:	e0e7      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8016828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801682c:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 801682e:	2206      	movs	r2, #6
 8016830:	492d      	ldr	r1, [pc, #180]	@ (80168e8 <_ux_device_stack_alternate_setting_set+0x2ec>)
 8016832:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8016836:	f7fd fa83 	bl	8013d40 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801683a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801683e:	3320      	adds	r3, #32
 8016840:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8016842:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016846:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 8016848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801684c:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801684e:	4b23      	ldr	r3, [pc, #140]	@ (80168dc <_ux_device_stack_alternate_setting_set+0x2e0>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8016856:	2b02      	cmp	r3, #2
 8016858:	d11a      	bne.n	8016890 <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801685a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801685e:	7bdb      	ldrb	r3, [r3, #15]
 8016860:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8016864:	2b00      	cmp	r3, #0
 8016866:	d013      	beq.n	8016890 <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8016868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801686c:	8a1b      	ldrh	r3, [r3, #16]
 801686e:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8016872:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 8016874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00a      	beq.n	8016890 <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801687a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801687c:	0adb      	lsrs	r3, r3, #11
 801687e:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 8016880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016882:	3301      	adds	r3, #1
 8016884:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 8016886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016888:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801688a:	fb02 f303 	mul.w	r3, r2, r3
 801688e:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8016890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016892:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016894:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8016896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016898:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801689c:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801689e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80168a0:	f04f 32ff 	mov.w	r2, #4294967295
 80168a4:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 80168a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80168aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80168ae:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 80168b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80168b4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80168b6:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80168b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80168ba:	699b      	ldr	r3, [r3, #24]
 80168bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80168c0:	210e      	movs	r1, #14
 80168c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80168c4:	4798      	blx	r3
 80168c6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 80168c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d00e      	beq.n	80168ec <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80168ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80168d2:	2200      	movs	r2, #0
 80168d4:	601a      	str	r2, [r3, #0]
                                        return(status);
 80168d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168d8:	e08e      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>
 80168da:	bf00      	nop
 80168dc:	24001dac 	.word	0x24001dac
 80168e0:	24000098 	.word	0x24000098
 80168e4:	240000a0 	.word	0x240000a0
 80168e8:	24000080 	.word	0x24000080
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 80168ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168f0:	69db      	ldr	r3, [r3, #28]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d105      	bne.n	8016902 <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80168f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80168fe:	61da      	str	r2, [r3, #28]
                                    break;
 8016900:	e015      	b.n	801692e <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016906:	69db      	ldr	r3, [r3, #28]
 8016908:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801690a:	e002      	b.n	8016912 <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801690c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801690e:	695b      	ldr	r3, [r3, #20]
 8016910:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8016912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016914:	695b      	ldr	r3, [r3, #20]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d1f8      	bne.n	801690c <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801691a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801691c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016920:	615a      	str	r2, [r3, #20]
                                    break;
 8016922:	e004      	b.n	801692e <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 8016924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 801692a:	e000      	b.n	801692e <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 801692c:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 801692e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016934:	1ad3      	subs	r3, r2, r3
 8016936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 801693a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801693e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016940:	4413      	add	r3, r2
 8016942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 8016946:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801694a:	2b00      	cmp	r3, #0
 801694c:	f47f af31 	bne.w	80167b2 <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8016950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016954:	330c      	adds	r3, #12
 8016956:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801695a:	220c      	movs	r2, #12
 801695c:	4618      	mov	r0, r3
 801695e:	f7fd fce3 	bl	8014328 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016962:	4b27      	ldr	r3, [pc, #156]	@ (8016a00 <_ux_device_stack_alternate_setting_set+0x404>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801696a:	7b92      	ldrb	r2, [r2, #14]
 801696c:	3246      	adds	r2, #70	@ 0x46
 801696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016972:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8016974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016976:	2b00      	cmp	r3, #0
 8016978:	d003      	beq.n	8016982 <_ux_device_stack_alternate_setting_set+0x386>
 801697a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801697c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801697e:	2b00      	cmp	r3, #0
 8016980:	d101      	bne.n	8016986 <_ux_device_stack_alternate_setting_set+0x38a>
                            {

                                return (UX_NO_CLASS_MATCH);
 8016982:	2357      	movs	r3, #87	@ 0x57
 8016984:	e038      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8016986:	2306      	movs	r3, #6
 8016988:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 801698a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801698e:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8016990:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016992:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8016994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016996:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801699a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801699e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80169a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169a2:	f107 020c 	add.w	r2, r7, #12
 80169a6:	4610      	mov	r0, r2
 80169a8:	4798      	blx	r3
 80169aa:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 80169ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169ae:	e023      	b.n	80169f8 <_ux_device_stack_alternate_setting_set+0x3fc>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 80169b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80169b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 80169bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80169c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169c2:	4413      	add	r3, r2
 80169c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 80169c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f47f ae84 	bne.w	80166da <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 80169d2:	e010      	b.n	80169f6 <_ux_device_stack_alternate_setting_set+0x3fa>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80169d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80169d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169da:	1ad3      	subs	r3, r2, r3
 80169dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80169e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80169e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169e6:	4413      	add	r3, r2
 80169e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 80169ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f47f ae4e 	bne.w	8016692 <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 80169f6:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3790      	adds	r7, #144	@ 0x90
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	24001dac 	.word	0x24001dac

08016a04 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b094      	sub	sp, #80	@ 0x50
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8016a12:	2300      	movs	r3, #0
 8016a14:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8016a16:	f107 0314 	add.w	r3, r7, #20
 8016a1a:	223f      	movs	r2, #63	@ 0x3f
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	68f8      	ldr	r0, [r7, #12]
 8016a20:	f7fd fe0a 	bl	8014638 <_ux_utility_string_length_check>
 8016a24:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 8016a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d001      	beq.n	8016a30 <_ux_device_stack_class_register+0x2c>
        return(status);
 8016a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a2e:	e046      	b.n	8016abe <_ux_device_stack_class_register+0xba>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8016a30:	4b25      	ldr	r3, [pc, #148]	@ (8016ac8 <_ux_device_stack_class_register+0xc4>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016a38:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016a3e:	e036      	b.n	8016aae <_ux_device_stack_class_register+0xaa>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8016a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d12b      	bne.n	8016aa0 <_ux_device_stack_class_register+0x9c>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8016a48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	461a      	mov	r2, r3
 8016a50:	68f9      	ldr	r1, [r7, #12]
 8016a52:	f7fd fc69 	bl	8014328 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8016a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a58:	68ba      	ldr	r2, [r7, #8]
 8016a5a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8016a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016a60:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8016a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a66:	687a      	ldr	r2, [r7, #4]
 8016a68:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8016a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a6e:	683a      	ldr	r2, [r7, #0]
 8016a70:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8016a74:	2305      	movs	r3, #5
 8016a76:	61bb      	str	r3, [r7, #24]
            command.ux_slave_class_command_parameter  =  parameter;
 8016a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8016a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a7e:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 8016a80:	f107 0218 	add.w	r2, r7, #24
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	4610      	mov	r0, r2
 8016a88:	4798      	blx	r3
 8016a8a:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 8016a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d001      	beq.n	8016a96 <_ux_device_stack_class_register+0x92>
                return(status);
 8016a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a94:	e013      	b.n	8016abe <_ux_device_stack_class_register+0xba>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 8016a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a98:	2201      	movs	r2, #1
 8016a9a:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	e00e      	b.n	8016abe <_ux_device_stack_class_register+0xba>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 8016aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016aa2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8016aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016aaa:	3301      	adds	r3, #1
 8016aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016aae:	4b06      	ldr	r3, [pc, #24]	@ (8016ac8 <_ux_device_stack_class_register+0xc4>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8016ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d3c1      	bcc.n	8016a40 <_ux_device_stack_class_register+0x3c>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 8016abc:	2312      	movs	r3, #18
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3750      	adds	r7, #80	@ 0x50
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	24001dac 	.word	0x24001dac

08016acc <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b08a      	sub	sp, #40	@ 0x28
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	60b9      	str	r1, [r7, #8]
 8016ad6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8016b88 <_ux_device_stack_clear_feature+0xbc>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016ade:	4b2a      	ldr	r3, [pc, #168]	@ (8016b88 <_ux_device_stack_clear_feature+0xbc>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	3320      	adds	r3, #32
 8016ae4:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016ae6:	69bb      	ldr	r3, [r7, #24]
 8016ae8:	3318      	adds	r3, #24
 8016aea:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f003 0303 	and.w	r3, r3, #3
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d002      	beq.n	8016afc <_ux_device_stack_clear_feature+0x30>
 8016af6:	2b02      	cmp	r3, #2
 8016af8:	d011      	beq.n	8016b1e <_ux_device_stack_clear_feature+0x52>
 8016afa:	e036      	b.n	8016b6a <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	2b01      	cmp	r3, #1
 8016b00:	d13b      	bne.n	8016b7a <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8016b02:	4b21      	ldr	r3, [pc, #132]	@ (8016b88 <_ux_device_stack_clear_feature+0xbc>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d005      	beq.n	8016b1a <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8016b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8016b88 <_ux_device_stack_clear_feature+0xbc>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	2200      	movs	r2, #0
 8016b14:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8016b18:	e02f      	b.n	8016b7a <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8016b1a:	2354      	movs	r3, #84	@ 0x54
 8016b1c:	e02f      	b.n	8016b7e <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016b1e:	69bb      	ldr	r3, [r7, #24]
 8016b20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016b24:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 8016b26:	e01d      	b.n	8016b64 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b2a:	69db      	ldr	r3, [r3, #28]
 8016b2c:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8016b2e:	e013      	b.n	8016b58 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8016b30:	6a3b      	ldr	r3, [r7, #32]
 8016b32:	7b9b      	ldrb	r3, [r3, #14]
 8016b34:	461a      	mov	r2, r3
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d10a      	bne.n	8016b52 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8016b3c:	69fb      	ldr	r3, [r7, #28]
 8016b3e:	699b      	ldr	r3, [r3, #24]
 8016b40:	6a3a      	ldr	r2, [r7, #32]
 8016b42:	2110      	movs	r1, #16
 8016b44:	69f8      	ldr	r0, [r7, #28]
 8016b46:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8016b48:	6a3b      	ldr	r3, [r7, #32]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8016b4e:	2300      	movs	r3, #0
 8016b50:	e015      	b.n	8016b7e <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8016b52:	6a3b      	ldr	r3, [r7, #32]
 8016b54:	695b      	ldr	r3, [r3, #20]
 8016b56:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d1e8      	bne.n	8016b30 <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8016b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b60:	699b      	ldr	r3, [r3, #24]
 8016b62:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 8016b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d1de      	bne.n	8016b28 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	699b      	ldr	r3, [r3, #24]
 8016b6e:	697a      	ldr	r2, [r7, #20]
 8016b70:	2114      	movs	r1, #20
 8016b72:	69f8      	ldr	r0, [r7, #28]
 8016b74:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8016b76:	2300      	movs	r3, #0
 8016b78:	e001      	b.n	8016b7e <_ux_device_stack_clear_feature+0xb2>
        break;
 8016b7a:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8016b7c:	2300      	movs	r3, #0
}
 8016b7e:	4618      	mov	r0, r3
 8016b80:	3728      	adds	r7, #40	@ 0x28
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	24001dac 	.word	0x24001dac

08016b8c <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016b92:	4b0f      	ldr	r3, [pc, #60]	@ (8016bd0 <_ux_device_stack_configuration_get+0x44>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	3320      	adds	r3, #32
 8016b98:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	3318      	adds	r3, #24
 8016b9e:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	3320      	adds	r3, #32
 8016ba4:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8016bb0:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8016bb2:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2203      	movs	r2, #3
 8016bb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8016bba:	2201      	movs	r2, #1
 8016bbc:	2101      	movs	r1, #1
 8016bbe:	6878      	ldr	r0, [r7, #4]
 8016bc0:	f001 fa22 	bl	8018008 <_ux_device_stack_transfer_request>
 8016bc4:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 8016bc6:	683b      	ldr	r3, [r7, #0]
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3710      	adds	r7, #16
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	24001dac 	.word	0x24001dac

08016bd4 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b0a2      	sub	sp, #136	@ 0x88
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8016bdc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016be0:	2200      	movs	r2, #0
 8016be2:	601a      	str	r2, [r3, #0]
 8016be4:	605a      	str	r2, [r3, #4]
 8016be6:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8016be8:	2300      	movs	r3, #0
 8016bea:	677b      	str	r3, [r7, #116]	@ 0x74
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8016bec:	2300      	movs	r3, #0
 8016bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
ULONG                           iad_number_interfaces =  0;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	66bb      	str	r3, [r7, #104]	@ 0x68

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016bf4:	4ba8      	ldr	r3, [pc, #672]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	3320      	adds	r3, #32
 8016c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8016c02:	2300      	movs	r3, #0
 8016c04:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8016c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d101      	bne.n	8016c16 <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 8016c12:	2300      	movs	r3, #0
 8016c14:	e176      	b.n	8016f04 <_ux_device_stack_configuration_set+0x330>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8016c16:	4ba0      	ldr	r3, [pc, #640]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8016c22:	4b9d      	ldr	r3, [pc, #628]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016c2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8016c2e:	e026      	b.n	8016c7e <_ux_device_stack_configuration_set+0xaa>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8016c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8016c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016c3c:	785b      	ldrb	r3, [r3, #1]
 8016c3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8016c42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016c46:	2b02      	cmp	r3, #2
 8016c48:	d10d      	bne.n	8016c66 <_ux_device_stack_configuration_set+0x92>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8016c4a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016c4e:	2208      	movs	r2, #8
 8016c50:	4992      	ldr	r1, [pc, #584]	@ (8016e9c <_ux_device_stack_configuration_set+0x2c8>)
 8016c52:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8016c56:	f7fd f873 	bl	8013d40 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8016c5a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8016c5e:	461a      	mov	r2, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	4293      	cmp	r3, r2
 8016c64:	d010      	beq.n	8016c88 <_ux_device_stack_configuration_set+0xb4>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 8016c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c6c:	1ad3      	subs	r3, r2, r3
 8016c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8016c72:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c78:	4413      	add	r3, r2
 8016c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (device_framework_length != 0)
 8016c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d1d4      	bne.n	8016c30 <_ux_device_stack_configuration_set+0x5c>
 8016c86:	e000      	b.n	8016c8a <_ux_device_stack_configuration_set+0xb6>
                break;
 8016c88:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8016c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d104      	bne.n	8016c9c <_ux_device_stack_configuration_set+0xc8>
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d001      	beq.n	8016c9c <_ux_device_stack_configuration_set+0xc8>
        return(UX_ERROR);
 8016c98:	23ff      	movs	r3, #255	@ 0xff
 8016c9a:	e133      	b.n	8016f04 <_ux_device_stack_configuration_set+0x330>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8016c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d021      	beq.n	8016cea <_ux_device_stack_configuration_set+0x116>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016ca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016cac:	67fb      	str	r3, [r7, #124]	@ 0x7c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8016cae:	e019      	b.n	8016ce4 <_ux_device_stack_configuration_set+0x110>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8016cb0:	2303      	movs	r3, #3
 8016cb2:	60fb      	str	r3, [r7, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8016cb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016cb6:	617b      	str	r3, [r7, #20]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8016cb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016cba:	685b      	ldr	r3, [r3, #4]
 8016cbc:	67bb      	str	r3, [r7, #120]	@ 0x78

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8016cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8016cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d005      	beq.n	8016cd4 <_ux_device_stack_configuration_set+0x100>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8016cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ccc:	f107 020c 	add.w	r2, r7, #12
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8016cd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016cd6:	699b      	ldr	r3, [r3, #24]
 8016cd8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8016cda:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8016cdc:	f000 ff42 	bl	8017b64 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8016ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (interface_ptr != UX_NULL)
 8016ce4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d1e2      	bne.n	8016cb0 <_ux_device_stack_configuration_set+0xdc>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8016cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016cec:	2200      	movs	r2, #0
 8016cee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8016cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8016cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016cfa:	699b      	ldr	r3, [r3, #24]
 8016cfc:	2201      	movs	r2, #1
 8016cfe:	2113      	movs	r1, #19
 8016d00:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016d02:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d101      	bne.n	8016d0e <_ux_device_stack_configuration_set+0x13a>
        return(UX_SUCCESS);
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	e0fa      	b.n	8016f04 <_ux_device_stack_configuration_set+0x330>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8016d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016d10:	687a      	ldr	r2, [r7, #4]
 8016d12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 8016d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016d18:	339c      	adds	r3, #156	@ 0x9c
    _ux_utility_descriptor_parse(device_framework,
 8016d1a:	2208      	movs	r2, #8
 8016d1c:	495f      	ldr	r1, [pc, #380]	@ (8016e9c <_ux_device_stack_configuration_set+0x2c8>)
 8016d1e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8016d22:	f7fd f80d 	bl	8013d40 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8016d26:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8016d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d001      	beq.n	8016d36 <_ux_device_stack_configuration_set+0x162>
 8016d32:	2202      	movs	r2, #2
 8016d34:	e000      	b.n	8016d38 <_ux_device_stack_configuration_set+0x164>
 8016d36:	2201      	movs	r2, #1
 8016d38:	4b57      	ldr	r3, [pc, #348]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8016d40:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8016d44:	115b      	asrs	r3, r3, #5
 8016d46:	461a      	mov	r2, r3
 8016d48:	4b53      	ldr	r3, [pc, #332]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f002 0201 	and.w	r2, r2, #1
 8016d50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 8016d54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8016d5c:	e0c3      	b.n	8016ee6 <_ux_device_stack_configuration_set+0x312>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8016d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8016d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d6a:	785b      	ldrb	r3, [r3, #1]
 8016d6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8016d70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016d74:	2b0b      	cmp	r3, #11
 8016d76:	d10b      	bne.n	8016d90 <_ux_device_stack_configuration_set+0x1bc>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 8016d78:	2301      	movs	r3, #1
 8016d7a:	673b      	str	r3, [r7, #112]	@ 0x70

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8016d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d80:	3302      	adds	r3, #2
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8016d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d8a:	3303      	adds	r3, #3
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8016d90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016d94:	2b04      	cmp	r3, #4
 8016d96:	f040 809a 	bne.w	8016ece <_ux_device_stack_configuration_set+0x2fa>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8016d9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016d9e:	2209      	movs	r2, #9
 8016da0:	493f      	ldr	r1, [pc, #252]	@ (8016ea0 <_ux_device_stack_configuration_set+0x2cc>)
 8016da2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8016da6:	f7fc ffcb 	bl	8013d40 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8016daa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	f040 808d 	bne.w	8016ece <_ux_device_stack_configuration_set+0x2fa>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8016db4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d14a      	bne.n	8016e50 <_ux_device_stack_configuration_set+0x27c>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8016dba:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016dc2:	4293      	cmp	r3, r2
 8016dc4:	d133      	bne.n	8016e2e <_ux_device_stack_configuration_set+0x25a>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8016dc6:	4b34      	ldr	r3, [pc, #208]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016dce:	67bb      	str	r3, [r7, #120]	@ 0x78

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8016dd4:	e023      	b.n	8016e1e <_ux_device_stack_configuration_set+0x24a>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8016dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016dda:	2b01      	cmp	r3, #1
 8016ddc:	d118      	bne.n	8016e10 <_ux_device_stack_configuration_set+0x23c>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8016dde:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8016de2:	461a      	mov	r2, r3
 8016de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016de6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d110      	bne.n	8016e10 <_ux_device_stack_configuration_set+0x23c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8016dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016df0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8016df4:	687a      	ldr	r2, [r7, #4]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d10a      	bne.n	8016e10 <_ux_device_stack_configuration_set+0x23c>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8016dfa:	4b27      	ldr	r3, [pc, #156]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8016e02:	3246      	adds	r2, #70	@ 0x46
 8016e04:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8016e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 8016e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e0c:	677b      	str	r3, [r7, #116]	@ 0x74

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 8016e0e:	e016      	b.n	8016e3e <_ux_device_stack_configuration_set+0x26a>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 8016e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e12:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8016e16:	67bb      	str	r3, [r7, #120]	@ 0x78
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016e1a:	3301      	adds	r3, #1
 8016e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8016e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8016e26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d3d4      	bcc.n	8016dd6 <_ux_device_stack_configuration_set+0x202>
 8016e2c:	e007      	b.n	8016e3e <_ux_device_stack_configuration_set+0x26a>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8016e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8016e36:	3246      	adds	r2, #70	@ 0x46
 8016e38:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8016e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8016e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016e40:	3b01      	subs	r3, #1
 8016e42:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8016e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d13a      	bne.n	8016ec0 <_ux_device_stack_configuration_set+0x2ec>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8016e4e:	e037      	b.n	8016ec0 <_ux_device_stack_configuration_set+0x2ec>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8016e50:	4b11      	ldr	r3, [pc, #68]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016e58:	67bb      	str	r3, [r7, #120]	@ 0x78

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8016e5e:	e028      	b.n	8016eb2 <_ux_device_stack_configuration_set+0x2de>
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8016e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	d11d      	bne.n	8016ea4 <_ux_device_stack_configuration_set+0x2d0>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8016e68:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d115      	bne.n	8016ea4 <_ux_device_stack_configuration_set+0x2d0>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8016e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8016e7e:	687a      	ldr	r2, [r7, #4]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d10f      	bne.n	8016ea4 <_ux_device_stack_configuration_set+0x2d0>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8016e84:	4b04      	ldr	r3, [pc, #16]	@ (8016e98 <_ux_device_stack_configuration_set+0x2c4>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8016e8c:	3246      	adds	r2, #70	@ 0x46
 8016e8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8016e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 8016e94:	e014      	b.n	8016ec0 <_ux_device_stack_configuration_set+0x2ec>
 8016e96:	bf00      	nop
 8016e98:	24001dac 	.word	0x24001dac
 8016e9c:	24000098 	.word	0x24000098
 8016ea0:	240000a0 	.word	0x240000a0
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 8016ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ea6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8016eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016eae:	3301      	adds	r3, #1
 8016eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8016eb2:	4b16      	ldr	r3, [pc, #88]	@ (8016f0c <_ux_device_stack_configuration_set+0x338>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8016eba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d3cf      	bcc.n	8016e60 <_ux_device_stack_configuration_set+0x28c>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8016ec6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8016eca:	f000 fe93 	bl	8017bf4 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8016ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8016eda:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016ee0:	4413      	add	r3, r2
 8016ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (device_framework_length != 0)
 8016ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f47f af37 	bne.w	8016d5e <_ux_device_stack_configuration_set+0x18a>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8016ef0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016ef2:	2203      	movs	r2, #3
 8016ef4:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8016ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016ef8:	699b      	ldr	r3, [r3, #24]
 8016efa:	2203      	movs	r2, #3
 8016efc:	2113      	movs	r1, #19
 8016efe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016f00:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 8016f02:	2300      	movs	r3, #0
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3788      	adds	r7, #136	@ 0x88
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	24001dac 	.word	0x24001dac

08016f10 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8016f10:	b590      	push	{r4, r7, lr}
 8016f12:	b09d      	sub	sp, #116	@ 0x74
 8016f14:	af02      	add	r7, sp, #8
 8016f16:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8016f18:	23ff      	movs	r3, #255	@ 0xff
 8016f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016f1c:	4b9b      	ldr	r3, [pc, #620]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016f22:	4b9a      	ldr	r3, [pc, #616]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3320      	adds	r3, #32
 8016f28:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	f040 8139 	bne.w	80171a6 <_ux_device_stack_control_request_process+0x296>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8016f3a:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016f42:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	3354      	adds	r3, #84	@ 0x54
 8016f48:	3302      	adds	r3, #2
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7fd fb5d 	bl	801460a <_ux_utility_short_get>
 8016f50:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	3354      	adds	r3, #84	@ 0x54
 8016f56:	3304      	adds	r3, #4
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7fd fb56 	bl	801460a <_ux_utility_short_get>
 8016f5e:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	3354      	adds	r3, #84	@ 0x54
 8016f64:	3306      	adds	r3, #6
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7fd fb4f 	bl	801460a <_ux_utility_short_get>
 8016f6c:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8016f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f70:	2b06      	cmp	r3, #6
 8016f72:	d002      	beq.n	8016f7a <_ux_device_stack_control_request_process+0x6a>
 8016f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f76:	2b07      	cmp	r3, #7
 8016f78:	d10d      	bne.n	8016f96 <_ux_device_stack_control_request_process+0x86>
 8016f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f7c:	0a1b      	lsrs	r3, r3, #8
 8016f7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d007      	beq.n	8016f96 <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8016f86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016f88:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8016f8c:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8016f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016f90:	f043 0320 	orr.w	r3, r3, #32
 8016f94:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8016f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016f98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016f9c:	2b40      	cmp	r3, #64	@ 0x40
 8016f9e:	d13a      	bne.n	8017016 <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8016fa0:	4b7a      	ldr	r3, [pc, #488]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d034      	beq.n	8017016 <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8016fac:	4b77      	ldr	r3, [pc, #476]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8016fb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d12d      	bne.n	8017016 <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8016fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016fbe:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8016fc0:	4b72      	ldr	r3, [pc, #456]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	f8d3 4184 	ldr.w	r4, [r3, #388]	@ 0x184
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	f107 020c 	add.w	r2, r7, #12
 8016fd0:	9201      	str	r2, [sp, #4]
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016fd8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016fda:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016fdc:	47a0      	blx	r4
 8016fde:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 8016fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d110      	bne.n	8017008 <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fe8:	3318      	adds	r3, #24
 8016fea:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fee:	3320      	adds	r3, #32
 8016ff0:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2203      	movs	r2, #3
 8016ff6:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016ffc:	4619      	mov	r1, r3
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f001 f802 	bl	8018008 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8017004:	2300      	movs	r3, #0
 8017006:	e0cf      	b.n	80171a8 <_ux_device_stack_control_request_process+0x298>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8017008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801700a:	3318      	adds	r3, #24
 801700c:	4618      	mov	r0, r3
 801700e:	f000 fb45 	bl	801769c <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8017012:	2300      	movs	r3, #0
 8017014:	e0c8      	b.n	80171a8 <_ux_device_stack_control_request_process+0x298>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8017016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017018:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801701c:	2b20      	cmp	r3, #32
 801701e:	d004      	beq.n	801702a <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8017020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017022:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8017026:	2b40      	cmp	r3, #64	@ 0x40
 8017028:	d14e      	bne.n	80170c8 <_ux_device_stack_control_request_process+0x1b8>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 801702a:	2304      	movs	r3, #4
 801702c:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801702e:	2300      	movs	r3, #0
 8017030:	663b      	str	r3, [r7, #96]	@ 0x60
 8017032:	e03a      	b.n	80170aa <_ux_device_stack_control_request_process+0x19a>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8017034:	4b55      	ldr	r3, [pc, #340]	@ (801718c <_ux_device_stack_control_request_process+0x27c>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801703a:	3246      	adds	r2, #70	@ 0x46
 801703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017040:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8017042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017044:	2b00      	cmp	r3, #0
 8017046:	d02a      	beq.n	801709e <_ux_device_stack_control_request_process+0x18e>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8017048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801704a:	f003 0303 	and.w	r3, r3, #3
 801704e:	2b01      	cmp	r3, #1
 8017050:	d118      	bne.n	8017084 <_ux_device_stack_control_request_process+0x174>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8017052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017054:	2ba1      	cmp	r3, #161	@ 0xa1
 8017056:	d110      	bne.n	801707a <_ux_device_stack_control_request_process+0x16a>
 8017058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801705a:	2b00      	cmp	r3, #0
 801705c:	d10d      	bne.n	801707a <_ux_device_stack_control_request_process+0x16a>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 801705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017060:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8017064:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8017066:	2b07      	cmp	r3, #7
 8017068:	d107      	bne.n	801707a <_ux_device_stack_control_request_process+0x16a>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8017070:	461a      	mov	r2, r3
 8017072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017074:	4293      	cmp	r3, r2
 8017076:	d005      	beq.n	8017084 <_ux_device_stack_control_request_process+0x174>
                            continue;
 8017078:	e014      	b.n	80170a4 <_ux_device_stack_control_request_process+0x194>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 801707a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801707c:	b2db      	uxtb	r3, r3
 801707e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017080:	429a      	cmp	r2, r3
 8017082:	d10e      	bne.n	80170a2 <_ux_device_stack_control_request_process+0x192>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8017084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017086:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8017088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801708a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801708c:	f107 0210 	add.w	r2, r7, #16
 8017090:	4610      	mov	r0, r2
 8017092:	4798      	blx	r3
 8017094:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8017096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017098:	2b00      	cmp	r3, #0
 801709a:	d00a      	beq.n	80170b2 <_ux_device_stack_control_request_process+0x1a2>
 801709c:	e002      	b.n	80170a4 <_ux_device_stack_control_request_process+0x194>
                    continue;
 801709e:	bf00      	nop
 80170a0:	e000      	b.n	80170a4 <_ux_device_stack_control_request_process+0x194>
                            continue;
 80170a2:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 80170a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170a6:	3301      	adds	r3, #1
 80170a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80170aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170ac:	2b0f      	cmp	r3, #15
 80170ae:	d9c1      	bls.n	8017034 <_ux_device_stack_control_request_process+0x124>
 80170b0:	e000      	b.n	80170b4 <_ux_device_stack_control_request_process+0x1a4>

                    /* We are done, break the loop!  */
                    break;
 80170b2:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 80170b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d004      	beq.n	80170c4 <_ux_device_stack_control_request_process+0x1b4>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80170ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170bc:	3318      	adds	r3, #24
 80170be:	4618      	mov	r0, r3
 80170c0:	f000 faec 	bl	801769c <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 80170c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80170c6:	e06f      	b.n	80171a8 <_ux_device_stack_control_request_process+0x298>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 80170c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80170ca:	2b0c      	cmp	r3, #12
 80170cc:	d860      	bhi.n	8017190 <_ux_device_stack_control_request_process+0x280>
 80170ce:	a201      	add	r2, pc, #4	@ (adr r2, 80170d4 <_ux_device_stack_control_request_process+0x1c4>)
 80170d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170d4:	08017109 	.word	0x08017109
 80170d8:	08017117 	.word	0x08017117
 80170dc:	08017191 	.word	0x08017191
 80170e0:	08017125 	.word	0x08017125
 80170e4:	08017191 	.word	0x08017191
 80170e8:	08017133 	.word	0x08017133
 80170ec:	08017149 	.word	0x08017149
 80170f0:	08017157 	.word	0x08017157
 80170f4:	0801715d 	.word	0x0801715d
 80170f8:	08017165 	.word	0x08017165
 80170fc:	0801716f 	.word	0x0801716f
 8017100:	08017179 	.word	0x08017179
 8017104:	08017185 	.word	0x08017185
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8017108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801710a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801710c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801710e:	f000 fafd 	bl	801770c <_ux_device_stack_get_status>
 8017112:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017114:	e03f      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8017116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017118:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801711a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801711c:	f7ff fcd6 	bl	8016acc <_ux_device_stack_clear_feature>
 8017120:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017122:	e038      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8017124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017126:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8017128:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801712a:	f000 fec5 	bl	8017eb8 <_ux_device_stack_set_feature>
 801712e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017130:	e031      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8017132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017136:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8017138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801713a:	699b      	ldr	r3, [r3, #24]
 801713c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801713e:	2111      	movs	r1, #17
 8017140:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8017142:	4798      	blx	r3
 8017144:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017146:	e026      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8017148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801714a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801714c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801714e:	f000 f82f 	bl	80171b0 <_ux_device_stack_descriptor_send>
 8017152:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017154:	e01f      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8017156:	2354      	movs	r3, #84	@ 0x54
 8017158:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801715a:	e01c      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 801715c:	f7ff fd16 	bl	8016b8c <_ux_device_stack_configuration_get>
 8017160:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017162:	e018      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8017164:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017166:	f7ff fd35 	bl	8016bd4 <_ux_device_stack_configuration_set>
 801716a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 801716c:	e013      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 801716e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017170:	f7ff fa06 	bl	8016580 <_ux_device_stack_alternate_setting_get>
 8017174:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017176:	e00e      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8017178:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801717a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801717c:	f7ff fa3e 	bl	80165fc <_ux_device_stack_alternate_setting_set>
 8017180:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8017182:	e008      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8017184:	2300      	movs	r3, #0
 8017186:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8017188:	e005      	b.n	8017196 <_ux_device_stack_control_request_process+0x286>
 801718a:	bf00      	nop
 801718c:	24001dac 	.word	0x24001dac

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8017190:	2354      	movs	r3, #84	@ 0x54
 8017192:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8017194:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 8017196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017198:	2b00      	cmp	r3, #0
 801719a:	d004      	beq.n	80171a6 <_ux_device_stack_control_request_process+0x296>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801719c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801719e:	3318      	adds	r3, #24
 80171a0:	4618      	mov	r0, r3
 80171a2:	f000 fa7b 	bl	801769c <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 80171a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	376c      	adds	r7, #108	@ 0x6c
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd90      	pop	{r4, r7, pc}

080171b0 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b09a      	sub	sp, #104	@ 0x68
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	60f8      	str	r0, [r7, #12]
 80171b8:	60b9      	str	r1, [r7, #8]
 80171ba:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 80171bc:	2300      	movs	r3, #0
 80171be:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 80171c0:	23ff      	movs	r3, #255	@ 0xff
 80171c2:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80171c4:	4b98      	ldr	r3, [pc, #608]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80171ca:	4b97      	ldr	r3, [pc, #604]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	3320      	adds	r3, #32
 80171d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80171d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171d4:	3318      	adds	r3, #24
 80171d6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80171d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171da:	3320      	adds	r3, #32
 80171dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e0:	2203      	movs	r2, #3
 80171e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	b2db      	uxtb	r3, r3
 80171e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 80171ea:	2300      	movs	r3, #0
 80171ec:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	0a1b      	lsrs	r3, r3, #8
 80171f2:	b2db      	uxtb	r3, r3
 80171f4:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	3b01      	subs	r3, #1
 80171fe:	2b0e      	cmp	r3, #14
 8017200:	f200 81e0 	bhi.w	80175c4 <_ux_device_stack_descriptor_send+0x414>
 8017204:	a201      	add	r2, pc, #4	@ (adr r2, 801720c <_ux_device_stack_descriptor_send+0x5c>)
 8017206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801720a:	bf00      	nop
 801720c:	08017249 	.word	0x08017249
 8017210:	080172dd 	.word	0x080172dd
 8017214:	080173f9 	.word	0x080173f9
 8017218:	080175c5 	.word	0x080175c5
 801721c:	080175c5 	.word	0x080175c5
 8017220:	08017253 	.word	0x08017253
 8017224:	080172dd 	.word	0x080172dd
 8017228:	080175c5 	.word	0x080175c5
 801722c:	08017263 	.word	0x08017263
 8017230:	080175c5 	.word	0x080175c5
 8017234:	080175c5 	.word	0x080175c5
 8017238:	080175c5 	.word	0x080175c5
 801723c:	080175c5 	.word	0x080175c5
 8017240:	080175c5 	.word	0x080175c5
 8017244:	080172dd 	.word	0x080172dd
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2b12      	cmp	r3, #18
 801724c:	d901      	bls.n	8017252 <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 801724e:	2312      	movs	r3, #18
 8017250:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2b06      	cmp	r3, #6
 8017256:	d104      	bne.n	8017262 <_ux_device_stack_descriptor_send+0xb2>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2b0a      	cmp	r3, #10
 801725c:	d901      	bls.n	8017262 <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 801725e:	230a      	movs	r3, #10
 8017260:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2b09      	cmp	r3, #9
 8017266:	d104      	bne.n	8017272 <_ux_device_stack_descriptor_send+0xc2>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2b05      	cmp	r3, #5
 801726c:	d901      	bls.n	8017272 <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 801726e:	2305      	movs	r3, #5
 8017270:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8017272:	4b6d      	ldr	r3, [pc, #436]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801727a:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801727c:	4b6a      	ldr	r3, [pc, #424]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017284:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 8017286:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801728a:	4413      	add	r3, r2
 801728c:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 801728e:	e020      	b.n	80172d2 <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8017290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8017296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017298:	3301      	adds	r3, #1
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	461a      	mov	r2, r3
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	4293      	cmp	r3, r2
 80172a2:	d10e      	bne.n	80172c2 <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80172a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80172aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80172ac:	4618      	mov	r0, r3
 80172ae:	f7fd f83b 	bl	8014328 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80172b2:	687a      	ldr	r2, [r7, #4]
 80172b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80172b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80172b8:	f000 fea6 	bl	8018008 <_ux_device_stack_transfer_request>
 80172bc:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 80172be:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 80172c0:	e18b      	b.n	80175da <_ux_device_stack_descriptor_send+0x42a>
            device_framework_length -=  descriptor_length;
 80172c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80172c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172c6:	1ad3      	subs	r3, r2, r3
 80172c8:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 80172ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80172cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ce:	4413      	add	r3, r2
 80172d0:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 80172d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80172d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d3da      	bcc.n	8017290 <_ux_device_stack_descriptor_send+0xe0>
        break;
 80172da:	e17e      	b.n	80175da <_ux_device_stack_descriptor_send+0x42a>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b07      	cmp	r3, #7
 80172e0:	d10e      	bne.n	8017300 <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80172e2:	4b51      	ldr	r3, [pc, #324]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80172ea:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80172ec:	4b4e      	ldr	r3, [pc, #312]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80172f4:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 80172f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80172f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80172fa:	4413      	add	r3, r2
 80172fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80172fe:	e045      	b.n	801738c <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8017300:	4b49      	ldr	r3, [pc, #292]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017308:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801730a:	4b47      	ldr	r3, [pc, #284]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017312:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 8017314:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017318:	4413      	add	r3, r2
 801731a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 801731c:	e036      	b.n	801738c <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 801731e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	2b0f      	cmp	r3, #15
 8017328:	d110      	bne.n	801734c <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 801732a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801732c:	3301      	adds	r3, #1
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2b0f      	cmp	r3, #15
 8017332:	d123      	bne.n	801737c <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8017334:	f107 0310 	add.w	r3, r7, #16
 8017338:	2204      	movs	r2, #4
 801733a:	493c      	ldr	r1, [pc, #240]	@ (801742c <_ux_device_stack_descriptor_send+0x27c>)
 801733c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801733e:	f7fc fcff 	bl	8013d40 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8017342:	8a7b      	ldrh	r3, [r7, #18]
 8017344:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8017346:	2300      	movs	r3, #0
 8017348:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 801734a:	e023      	b.n	8017394 <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801734c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801734e:	3301      	adds	r3, #1
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	2b02      	cmp	r3, #2
 8017354:	d112      	bne.n	801737c <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8017356:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801735a:	429a      	cmp	r2, r3
 801735c:	d10b      	bne.n	8017376 <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 801735e:	f107 0318 	add.w	r3, r7, #24
 8017362:	2208      	movs	r2, #8
 8017364:	4932      	ldr	r1, [pc, #200]	@ (8017430 <_ux_device_stack_descriptor_send+0x280>)
 8017366:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8017368:	f7fc fcea 	bl	8013d40 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 801736c:	8b7b      	ldrh	r3, [r7, #26]
 801736e:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8017370:	2300      	movs	r3, #0
 8017372:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 8017374:	e00e      	b.n	8017394 <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8017376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017378:	3301      	adds	r3, #1
 801737a:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801737c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017380:	1ad3      	subs	r3, r2, r3
 8017382:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8017384:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017388:	4413      	add	r3, r2
 801738a:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 801738c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801738e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017390:	429a      	cmp	r2, r3
 8017392:	d3c4      	bcc.n	801731e <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 8017394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017396:	2b00      	cmp	r3, #0
 8017398:	f040 811c 	bne.w	80175d4 <_ux_device_stack_descriptor_send+0x424>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 801739c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d202      	bcs.n	80173aa <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 80173a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80173a8:	e001      	b.n	80173ae <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80173ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80173b4:	d90c      	bls.n	80173d0 <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80173b6:	2212      	movs	r2, #18
 80173b8:	2109      	movs	r1, #9
 80173ba:	2002      	movs	r0, #2
 80173bc:	f7fc fbc6 	bl	8013b4c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80173c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173c2:	699b      	ldr	r3, [r3, #24]
 80173c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80173c6:	2114      	movs	r1, #20
 80173c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80173ca:	4798      	blx	r3
 80173cc:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 80173ce:	e104      	b.n	80175da <_ux_device_stack_descriptor_send+0x42a>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80173d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d2:	68db      	ldr	r3, [r3, #12]
 80173d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80173d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80173d8:	4618      	mov	r0, r3
 80173da:	f7fc ffa5 	bl	8014328 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 80173de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	3301      	adds	r3, #1
 80173e4:	68fa      	ldr	r2, [r7, #12]
 80173e6:	b2d2      	uxtb	r2, r2
 80173e8:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80173ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80173f0:	f000 fe0a 	bl	8018008 <_ux_device_stack_transfer_request>
 80173f4:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 80173f6:	e0ed      	b.n	80175d4 <_ux_device_stack_descriptor_send+0x424>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 80173f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d14f      	bne.n	801749e <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80173fe:	4b0a      	ldr	r3, [pc, #40]	@ (8017428 <_ux_device_stack_descriptor_send+0x278>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017406:	3302      	adds	r3, #2
 8017408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801740c:	d912      	bls.n	8017434 <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801740e:	2212      	movs	r2, #18
 8017410:	2109      	movs	r1, #9
 8017412:	2002      	movs	r0, #2
 8017414:	f7fc fb9a 	bl	8013b4c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801741a:	699b      	ldr	r3, [r3, #24]
 801741c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801741e:	2114      	movs	r1, #20
 8017420:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017422:	4798      	blx	r3
 8017424:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 8017426:	e0d8      	b.n	80175da <_ux_device_stack_descriptor_send+0x42a>
 8017428:	24001dac 	.word	0x24001dac
 801742c:	240000ac 	.word	0x240000ac
 8017430:	24000098 	.word	0x24000098
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8017434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 801743a:	4b6a      	ldr	r3, [pc, #424]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017442:	b2db      	uxtb	r3, r3
 8017444:	3302      	adds	r3, #2
 8017446:	b2da      	uxtb	r2, r3
 8017448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801744a:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 801744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801744e:	3301      	adds	r3, #1
 8017450:	2203      	movs	r2, #3
 8017452:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8017454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017456:	1c98      	adds	r0, r3, #2
 8017458:	4b62      	ldr	r3, [pc, #392]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8017460:	4b60      	ldr	r3, [pc, #384]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 8017462:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8017464:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017468:	461a      	mov	r2, r3
 801746a:	f7fc ff5d 	bl	8014328 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 801746e:	4b5d      	ldr	r3, [pc, #372]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017476:	3302      	adds	r3, #2
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	429a      	cmp	r2, r3
 801747c:	d906      	bls.n	801748c <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 801747e:	4b59      	ldr	r3, [pc, #356]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017486:	3302      	adds	r3, #2
 8017488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801748a:	e001      	b.n	8017490 <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8017490:	687a      	ldr	r2, [r7, #4]
 8017492:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8017494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017496:	f000 fdb7 	bl	8018008 <_ux_device_stack_transfer_request>
 801749a:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 801749c:	e09c      	b.n	80175d8 <_ux_device_stack_descriptor_send+0x428>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801749e:	4b51      	ldr	r3, [pc, #324]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80174a6:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 80174a8:	4b4e      	ldr	r3, [pc, #312]	@ (80175e4 <_ux_device_stack_descriptor_send+0x434>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80174b0:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 80174b2:	e079      	b.n	80175a8 <_ux_device_stack_descriptor_send+0x3f8>
                if (_ux_utility_short_get(string_framework) == request_index)
 80174b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80174b6:	f7fd f8a8 	bl	801460a <_ux_utility_short_get>
 80174ba:	4602      	mov	r2, r0
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	4293      	cmp	r3, r2
 80174c0:	d163      	bne.n	801758a <_ux_device_stack_descriptor_send+0x3da>
                    if (*(string_framework + 2) == descriptor_index)
 80174c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174c4:	3302      	adds	r3, #2
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	461a      	mov	r2, r3
 80174ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174cc:	4293      	cmp	r3, r2
 80174ce:	d15c      	bne.n	801758a <_ux_device_stack_descriptor_send+0x3da>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80174d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174d2:	3303      	adds	r3, #3
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	3301      	adds	r3, #1
 80174d8:	005b      	lsls	r3, r3, #1
 80174da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80174de:	dd0c      	ble.n	80174fa <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80174e0:	2212      	movs	r2, #18
 80174e2:	2109      	movs	r1, #9
 80174e4:	2002      	movs	r0, #2
 80174e6:	f7fc fb31 	bl	8013b4c <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80174ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174ec:	699b      	ldr	r3, [r3, #24]
 80174ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80174f0:	2114      	movs	r1, #20
 80174f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80174f4:	4798      	blx	r3
 80174f6:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 80174f8:	e059      	b.n	80175ae <_ux_device_stack_descriptor_send+0x3fe>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80174fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174fc:	68db      	ldr	r3, [r3, #12]
 80174fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8017500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017502:	3303      	adds	r3, #3
 8017504:	781b      	ldrb	r3, [r3, #0]
 8017506:	3301      	adds	r3, #1
 8017508:	b2db      	uxtb	r3, r3
 801750a:	005b      	lsls	r3, r3, #1
 801750c:	b2da      	uxtb	r2, r3
 801750e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017510:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8017512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017514:	3301      	adds	r3, #1
 8017516:	2203      	movs	r2, #3
 8017518:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801751a:	2300      	movs	r3, #0
 801751c:	643b      	str	r3, [r7, #64]	@ 0x40
 801751e:	e014      	b.n	801754a <_ux_device_stack_descriptor_send+0x39a>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8017520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017522:	3304      	adds	r3, #4
 8017524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017526:	441a      	add	r2, r3
 8017528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801752a:	3301      	adds	r3, #1
 801752c:	005b      	lsls	r3, r3, #1
 801752e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017530:	440b      	add	r3, r1
 8017532:	7812      	ldrb	r2, [r2, #0]
 8017534:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8017536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017538:	005b      	lsls	r3, r3, #1
 801753a:	3303      	adds	r3, #3
 801753c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801753e:	4413      	add	r3, r2
 8017540:	2200      	movs	r2, #0
 8017542:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8017544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017546:	3301      	adds	r3, #1
 8017548:	643b      	str	r3, [r7, #64]	@ 0x40
 801754a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801754c:	3303      	adds	r3, #3
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	461a      	mov	r2, r3
 8017552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017554:	4293      	cmp	r3, r2
 8017556:	d3e3      	bcc.n	8017520 <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8017558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801755a:	3303      	adds	r3, #3
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	3301      	adds	r3, #1
 8017560:	005b      	lsls	r3, r3, #1
 8017562:	461a      	mov	r2, r3
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	4293      	cmp	r3, r2
 8017568:	d906      	bls.n	8017578 <_ux_device_stack_descriptor_send+0x3c8>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 801756a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801756c:	3303      	adds	r3, #3
 801756e:	781b      	ldrb	r3, [r3, #0]
 8017570:	3301      	adds	r3, #1
 8017572:	005b      	lsls	r3, r3, #1
 8017574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017576:	e001      	b.n	801757c <_ux_device_stack_descriptor_send+0x3cc>
                            length =  host_length;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8017580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017582:	f000 fd41 	bl	8018008 <_ux_device_stack_transfer_request>
 8017586:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 8017588:	e011      	b.n	80175ae <_ux_device_stack_descriptor_send+0x3fe>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 801758a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801758c:	3303      	adds	r3, #3
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	461a      	mov	r2, r3
 8017592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017594:	1a9b      	subs	r3, r3, r2
 8017596:	3b04      	subs	r3, #4
 8017598:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801759a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801759c:	3303      	adds	r3, #3
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	3304      	adds	r3, #4
 80175a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80175a4:	4413      	add	r3, r2
 80175a6:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 80175a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d182      	bne.n	80174b4 <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 80175ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d111      	bne.n	80175d8 <_ux_device_stack_descriptor_send+0x428>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80175b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175b6:	699b      	ldr	r3, [r3, #24]
 80175b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80175ba:	2114      	movs	r1, #20
 80175bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80175be:	4798      	blx	r3
                return(UX_ERROR);
 80175c0:	23ff      	movs	r3, #255	@ 0xff
 80175c2:	e00b      	b.n	80175dc <_ux_device_stack_descriptor_send+0x42c>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80175c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175c6:	699b      	ldr	r3, [r3, #24]
 80175c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80175ca:	2114      	movs	r1, #20
 80175cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80175ce:	4798      	blx	r3
        return(UX_ERROR);
 80175d0:	23ff      	movs	r3, #255	@ 0xff
 80175d2:	e003      	b.n	80175dc <_ux_device_stack_descriptor_send+0x42c>
        break;
 80175d4:	bf00      	nop
 80175d6:	e000      	b.n	80175da <_ux_device_stack_descriptor_send+0x42a>
        break;
 80175d8:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 80175da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3768      	adds	r7, #104	@ 0x68
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	24001dac 	.word	0x24001dac

080175e8 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b092      	sub	sp, #72	@ 0x48
 80175ec:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 80175ee:	23ff      	movs	r3, #255	@ 0xff
 80175f0:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80175f2:	4b29      	ldr	r3, [pc, #164]	@ (8017698 <_ux_device_stack_disconnect+0xb0>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80175f8:	4b27      	ldr	r3, [pc, #156]	@ (8017698 <_ux_device_stack_disconnect+0xb0>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	3320      	adds	r3, #32
 80175fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8017600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2b03      	cmp	r3, #3
 8017606:	d123      	bne.n	8017650 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8017608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801760a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801760e:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8017610:	e018      	b.n	8017644 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8017612:	2303      	movs	r3, #3
 8017614:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8017616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017618:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 801761a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8017620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017622:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 8017624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017626:	2b00      	cmp	r3, #0
 8017628:	d004      	beq.n	8017634 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 801762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801762c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801762e:	1d3a      	adds	r2, r7, #4
 8017630:	4610      	mov	r0, r2
 8017632:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8017634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017636:	699b      	ldr	r3, [r3, #24]
 8017638:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 801763a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801763c:	f000 fa92 	bl	8017b64 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8017640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017642:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 8017644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017646:	2b00      	cmp	r3, #0
 8017648:	d1e3      	bne.n	8017612 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801764c:	2201      	movs	r2, #1
 801764e:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8017650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2b01      	cmp	r3, #1
 8017656:	d107      	bne.n	8017668 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8017658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801765a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 801765c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801765e:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8017660:	210f      	movs	r1, #15
 8017662:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017664:	4798      	blx	r3
 8017666:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8017668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801766a:	2200      	movs	r2, #0
 801766c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8017670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017672:	2200      	movs	r2, #0
 8017674:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8017676:	4b08      	ldr	r3, [pc, #32]	@ (8017698 <_ux_device_stack_disconnect+0xb0>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801767e:	2b00      	cmp	r3, #0
 8017680:	d005      	beq.n	801768e <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8017682:	4b05      	ldr	r3, [pc, #20]	@ (8017698 <_ux_device_stack_disconnect+0xb0>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801768a:	200a      	movs	r0, #10
 801768c:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 801768e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8017690:	4618      	mov	r0, r3
 8017692:	3748      	adds	r7, #72	@ 0x48
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}
 8017698:	24001dac 	.word	0x24001dac

0801769c <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b088      	sub	sp, #32
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80176a4:	4b18      	ldr	r3, [pc, #96]	@ (8017708 <_ux_device_stack_endpoint_stall+0x6c>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 80176aa:	23ff      	movs	r3, #255	@ 0xff
 80176ac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80176ae:	f3ef 8310 	mrs	r3, PRIMASK
 80176b2:	613b      	str	r3, [r7, #16]
    return(posture);
 80176b4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80176b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80176b8:	b672      	cpsid	i
    return(int_posture);
 80176ba:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 80176bc:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80176be:	4b12      	ldr	r3, [pc, #72]	@ (8017708 <_ux_device_stack_endpoint_stall+0x6c>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	6a1b      	ldr	r3, [r3, #32]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d013      	beq.n	80176f0 <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80176cc:	2b02      	cmp	r3, #2
 80176ce:	d00f      	beq.n	80176f0 <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80176d0:	69bb      	ldr	r3, [r7, #24]
 80176d2:	699b      	ldr	r3, [r3, #24]
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	2114      	movs	r1, #20
 80176d8:	69b8      	ldr	r0, [r7, #24]
 80176da:	4798      	blx	r3
 80176dc:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	7bdb      	ldrb	r3, [r3, #15]
 80176e2:	f003 0303 	and.w	r3, r3, #3
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d002      	beq.n	80176f0 <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2202      	movs	r2, #2
 80176ee:	605a      	str	r2, [r3, #4]
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	f383 8810 	msr	PRIMASK, r3
}
 80176fa:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 80176fc:	69fb      	ldr	r3, [r7, #28]
}
 80176fe:	4618      	mov	r0, r3
 8017700:	3720      	adds	r7, #32
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}
 8017706:	bf00      	nop
 8017708:	24001dac 	.word	0x24001dac

0801770c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b08a      	sub	sp, #40	@ 0x28
 8017710:	af00      	add	r7, sp, #0
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017718:	4b39      	ldr	r3, [pc, #228]	@ (8017800 <_ux_device_stack_get_status+0xf4>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801771e:	4b38      	ldr	r3, [pc, #224]	@ (8017800 <_ux_device_stack_get_status+0xf4>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	3320      	adds	r3, #32
 8017724:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017726:	69fb      	ldr	r3, [r7, #28]
 8017728:	3318      	adds	r3, #24
 801772a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	3320      	adds	r3, #32
 8017730:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8017732:	697b      	ldr	r3, [r7, #20]
 8017734:	68db      	ldr	r3, [r3, #12]
 8017736:	2200      	movs	r2, #0
 8017738:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	3301      	adds	r3, #1
 8017740:	2200      	movs	r2, #0
 8017742:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 8017744:	2302      	movs	r3, #2
 8017746:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	f003 0303 	and.w	r3, r3, #3
 801774e:	2b00      	cmp	r3, #0
 8017750:	d002      	beq.n	8017758 <_ux_device_stack_get_status+0x4c>
 8017752:	2b02      	cmp	r3, #2
 8017754:	d021      	beq.n	801779a <_ux_device_stack_get_status+0x8e>
 8017756:	e03a      	b.n	80177ce <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 801775e:	d102      	bne.n	8017766 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8017760:	2301      	movs	r3, #1
 8017762:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 8017764:	e03b      	b.n	80177de <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8017766:	4b26      	ldr	r3, [pc, #152]	@ (8017800 <_ux_device_stack_get_status+0xf4>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801776e:	2b02      	cmp	r3, #2
 8017770:	d103      	bne.n	801777a <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8017772:	697b      	ldr	r3, [r7, #20]
 8017774:	68db      	ldr	r3, [r3, #12]
 8017776:	2201      	movs	r2, #1
 8017778:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 801777a:	4b21      	ldr	r3, [pc, #132]	@ (8017800 <_ux_device_stack_get_status+0xf4>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8017782:	2b00      	cmp	r3, #0
 8017784:	d02b      	beq.n	80177de <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	68db      	ldr	r3, [r3, #12]
 801778a:	781a      	ldrb	r2, [r3, #0]
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	68db      	ldr	r3, [r3, #12]
 8017790:	f042 0202 	orr.w	r2, r2, #2
 8017794:	b2d2      	uxtb	r2, r2
 8017796:	701a      	strb	r2, [r3, #0]
        break;
 8017798:	e021      	b.n	80177de <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 801779a:	6a3b      	ldr	r3, [r7, #32]
 801779c:	699b      	ldr	r3, [r3, #24]
 801779e:	68ba      	ldr	r2, [r7, #8]
 80177a0:	2115      	movs	r1, #21
 80177a2:	6a38      	ldr	r0, [r7, #32]
 80177a4:	4798      	blx	r3
 80177a6:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	2bff      	cmp	r3, #255	@ 0xff
 80177ac:	d007      	beq.n	80177be <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	2b01      	cmp	r3, #1
 80177b2:	d116      	bne.n	80177e2 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	68db      	ldr	r3, [r3, #12]
 80177b8:	2201      	movs	r2, #1
 80177ba:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 80177bc:	e011      	b.n	80177e2 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80177be:	6a3b      	ldr	r3, [r7, #32]
 80177c0:	699b      	ldr	r3, [r3, #24]
 80177c2:	69ba      	ldr	r2, [r7, #24]
 80177c4:	2114      	movs	r1, #20
 80177c6:	6a38      	ldr	r0, [r7, #32]
 80177c8:	4798      	blx	r3
            return(UX_SUCCESS);            
 80177ca:	2300      	movs	r3, #0
 80177cc:	e014      	b.n	80177f8 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80177ce:	6a3b      	ldr	r3, [r7, #32]
 80177d0:	699b      	ldr	r3, [r3, #24]
 80177d2:	69ba      	ldr	r2, [r7, #24]
 80177d4:	2114      	movs	r1, #20
 80177d6:	6a38      	ldr	r0, [r7, #32]
 80177d8:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80177da:	2300      	movs	r3, #0
 80177dc:	e00c      	b.n	80177f8 <_ux_device_stack_get_status+0xec>
        break;
 80177de:	bf00      	nop
 80177e0:	e000      	b.n	80177e4 <_ux_device_stack_get_status+0xd8>
        break;
 80177e2:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80177e4:	697b      	ldr	r3, [r7, #20]
 80177e6:	2203      	movs	r2, #3
 80177e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 80177ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80177ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80177ee:	6978      	ldr	r0, [r7, #20]
 80177f0:	f000 fc0a 	bl	8018008 <_ux_device_stack_transfer_request>
 80177f4:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 80177f6:	693b      	ldr	r3, [r7, #16]
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	3728      	adds	r7, #40	@ 0x28
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}
 8017800:	24001dac 	.word	0x24001dac

08017804 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b094      	sub	sp, #80	@ 0x50
 8017808:	af00      	add	r7, sp, #0
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
 8017810:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017812:	4b95      	ldr	r3, [pc, #596]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	3320      	adds	r3, #32
 8017818:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801781a:	4b93      	ldr	r3, [pc, #588]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	68fa      	ldr	r2, [r7, #12]
 8017820:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8017824:	4b90      	ldr	r3, [pc, #576]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	68ba      	ldr	r2, [r7, #8]
 801782a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 801782e:	4b8e      	ldr	r3, [pc, #568]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 8017838:	4b8b      	ldr	r3, [pc, #556]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	683a      	ldr	r2, [r7, #0]
 801783e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8017842:	4b89      	ldr	r3, [pc, #548]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017848:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801784c:	4b86      	ldr	r3, [pc, #536]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017852:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8017856:	4b84      	ldr	r3, [pc, #528]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801785c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8017860:	4b81      	ldr	r3, [pc, #516]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017866:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801786a:	4b7f      	ldr	r3, [pc, #508]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	2202      	movs	r2, #2
 8017870:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8017874:	4b7c      	ldr	r3, [pc, #496]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801787a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801787e:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8017882:	2100      	movs	r1, #0
 8017884:	2000      	movs	r0, #0
 8017886:	f7fc fb49 	bl	8013f1c <_ux_utility_memory_allocate>
 801788a:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 801788c:	6a3b      	ldr	r3, [r7, #32]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d101      	bne.n	8017896 <_ux_device_stack_initialize+0x92>
        return(UX_MEMORY_INSUFFICIENT);
 8017892:	2312      	movs	r3, #18
 8017894:	e15e      	b.n	8017b54 <_ux_device_stack_initialize+0x350>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8017896:	4b74      	ldr	r3, [pc, #464]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	6a3a      	ldr	r2, [r7, #32]
 801789c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80178a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178a2:	3338      	adds	r3, #56	@ 0x38
 80178a4:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 80178a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80178aa:	2101      	movs	r1, #1
 80178ac:	2000      	movs	r0, #0
 80178ae:	f7fc fb35 	bl	8013f1c <_ux_utility_memory_allocate>
 80178b2:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80178b4:	69fb      	ldr	r3, [r7, #28]
 80178b6:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80178b8:	69fb      	ldr	r3, [r7, #28]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d102      	bne.n	80178c6 <_ux_device_stack_initialize+0xc2>
        status = UX_MEMORY_INSUFFICIENT;
 80178c0:	2312      	movs	r3, #18
 80178c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80178c4:	e001      	b.n	80178ca <_ux_device_stack_initialize+0xc6>
    else
        status = UX_SUCCESS;
 80178c6:	2300      	movs	r3, #0
 80178c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 80178ca:	2300      	movs	r3, #0
 80178cc:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 80178ce:	2300      	movs	r3, #0
 80178d0:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 80178d2:	2300      	movs	r3, #0
 80178d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 80178d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80178d8:	2b00      	cmp	r3, #0
 80178da:	f040 8090 	bne.w	80179fe <_ux_device_stack_initialize+0x1fa>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80178de:	4b62      	ldr	r3, [pc, #392]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80178e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80178e8:	4b5f      	ldr	r3, [pc, #380]	@ (8017a68 <_ux_device_stack_initialize+0x264>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80178f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 80178f2:	2300      	movs	r3, #0
 80178f4:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 80178f6:	2300      	movs	r3, #0
 80178f8:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 80178fa:	2300      	movs	r3, #0
 80178fc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80178fe:	e054      	b.n	80179aa <_ux_device_stack_initialize+0x1a6>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8017900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 8017906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017908:	785b      	ldrb	r3, [r3, #1]
 801790a:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 801790c:	7dfb      	ldrb	r3, [r7, #23]
 801790e:	2b02      	cmp	r3, #2
 8017910:	d029      	beq.n	8017966 <_ux_device_stack_initialize+0x162>
 8017912:	2b04      	cmp	r3, #4
 8017914:	d13e      	bne.n	8017994 <_ux_device_stack_initialize+0x190>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 8017916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017918:	3303      	adds	r3, #3
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d10b      	bne.n	8017938 <_ux_device_stack_initialize+0x134>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 8017920:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017924:	4413      	add	r3, r2
 8017926:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8017928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801792a:	3304      	adds	r3, #4
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 8017930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017932:	3301      	adds	r3, #1
 8017934:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017936:	e00a      	b.n	801794e <_ux_device_stack_initialize+0x14a>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8017938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801793a:	3304      	adds	r3, #4
 801793c:	781b      	ldrb	r3, [r3, #0]
 801793e:	461a      	mov	r2, r3
 8017940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017942:	4293      	cmp	r3, r2
 8017944:	d203      	bcs.n	801794e <_ux_device_stack_initialize+0x14a>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8017946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017948:	3304      	adds	r3, #4
 801794a:	781b      	ldrb	r3, [r3, #0]
 801794c:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 801794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017950:	3302      	adds	r3, #2
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	461a      	mov	r2, r3
 8017956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017958:	4293      	cmp	r3, r2
 801795a:	d21d      	bcs.n	8017998 <_ux_device_stack_initialize+0x194>
                    max_interface_number = *(device_framework + 2);
 801795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801795e:	3302      	adds	r3, #2
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 8017964:	e018      	b.n	8017998 <_ux_device_stack_initialize+0x194>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 8017966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801796a:	429a      	cmp	r2, r3
 801796c:	d901      	bls.n	8017972 <_ux_device_stack_initialize+0x16e>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 801796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017970:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 8017972:	2300      	movs	r3, #0
 8017974:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 8017976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801797a:	4413      	add	r3, r2
 801797c:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 801797e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017982:	429a      	cmp	r2, r3
 8017984:	d901      	bls.n	801798a <_ux_device_stack_initialize+0x186>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 8017986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017988:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 801798a:	2300      	movs	r3, #0
 801798c:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 801798e:	2300      	movs	r3, #0
 8017990:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 8017992:	e002      	b.n	801799a <_ux_device_stack_initialize+0x196>

            default:
                break;
 8017994:	bf00      	nop
 8017996:	e000      	b.n	801799a <_ux_device_stack_initialize+0x196>
                break;
 8017998:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801799a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801799c:	69bb      	ldr	r3, [r7, #24]
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80179a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80179a4:	69bb      	ldr	r3, [r7, #24]
 80179a6:	4413      	add	r3, r2
 80179a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 80179aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d1a7      	bne.n	8017900 <_ux_device_stack_initialize+0xfc>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 80179b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80179b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179b4:	4413      	add	r3, r2
 80179b6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 80179b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80179ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80179bc:	429a      	cmp	r2, r3
 80179be:	d901      	bls.n	80179c4 <_ux_device_stack_initialize+0x1c0>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 80179c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179c2:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 80179c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80179c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d901      	bls.n	80179d0 <_ux_device_stack_initialize+0x1cc>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 80179cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179ce:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80179d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d106      	bne.n	80179e4 <_ux_device_stack_initialize+0x1e0>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 80179d6:	2242      	movs	r2, #66	@ 0x42
 80179d8:	2103      	movs	r1, #3
 80179da:	2002      	movs	r0, #2
 80179dc:	f7fc f8b6 	bl	8013b4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 80179e0:	2342      	movs	r3, #66	@ 0x42
 80179e2:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 80179e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d109      	bne.n	80179fe <_ux_device_stack_initialize+0x1fa>
 80179ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179ec:	2b0f      	cmp	r3, #15
 80179ee:	d906      	bls.n	80179fe <_ux_device_stack_initialize+0x1fa>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 80179f0:	2212      	movs	r2, #18
 80179f2:	2103      	movs	r1, #3
 80179f4:	2002      	movs	r0, #2
 80179f6:	f7fc f8a9 	bl	8013b4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 80179fa:	2312      	movs	r3, #18
 80179fc:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 80179fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d118      	bne.n	8017a36 <_ux_device_stack_initialize+0x232>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8017a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017a08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8017a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017a10:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8017a14:	2320      	movs	r3, #32
 8017a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017a18:	2100      	movs	r1, #0
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	f7fc fb72 	bl	8014104 <_ux_utility_memory_allocate_mulc_safe>
 8017a20:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d102      	bne.n	8017a2e <_ux_device_stack_initialize+0x22a>
            status = UX_MEMORY_INSUFFICIENT;
 8017a28:	2312      	movs	r3, #18
 8017a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017a2c:	e003      	b.n	8017a36 <_ux_device_stack_initialize+0x232>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8017a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a30:	693a      	ldr	r2, [r7, #16]
 8017a32:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8017a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d043      	beq.n	8017ac4 <_ux_device_stack_initialize+0x2c0>
 8017a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d140      	bne.n	8017ac4 <_ux_device_stack_initialize+0x2c0>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 8017a42:	2380      	movs	r3, #128	@ 0x80
 8017a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017a46:	2100      	movs	r1, #0
 8017a48:	2000      	movs	r0, #0
 8017a4a:	f7fc fb5b 	bl	8014104 <_ux_utility_memory_allocate_mulc_safe>
 8017a4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 8017a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d102      	bne.n	8017a5c <_ux_device_stack_initialize+0x258>
            status = UX_MEMORY_INSUFFICIENT;
 8017a56:	2312      	movs	r3, #18
 8017a58:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 8017a5a:	e035      	b.n	8017ac8 <_ux_device_stack_initialize+0x2c4>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 8017a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017a60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8017a64:	e023      	b.n	8017aae <_ux_device_stack_initialize+0x2aa>
 8017a66:	bf00      	nop
 8017a68:	24001dac 	.word	0x24001dac

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 8017a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a70:	2101      	movs	r1, #1
 8017a72:	2000      	movs	r0, #0
 8017a74:	f7fc fa52 	bl	8013f1c <_ux_utility_memory_allocate>
 8017a78:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8017a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 8017a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d102      	bne.n	8017a8c <_ux_device_stack_initialize+0x288>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 8017a86:	2312      	movs	r3, #18
 8017a88:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 8017a8a:	e01a      	b.n	8017ac2 <_ux_device_stack_initialize+0x2be>
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 8017a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a8e:	3350      	adds	r3, #80	@ 0x50
 8017a90:	2200      	movs	r2, #0
 8017a92:	4932      	ldr	r1, [pc, #200]	@ (8017b5c <_ux_device_stack_initialize+0x358>)
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7fc fd4b 	bl	8014530 <_ux_utility_semaphore_create>
 8017a9a:	64b8      	str	r0, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 8017a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d002      	beq.n	8017aa8 <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_SEMAPHORE_ERROR;
 8017aa2:	2315      	movs	r3, #21
 8017aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 8017aa6:	e00c      	b.n	8017ac2 <_ux_device_stack_initialize+0x2be>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8017aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017aaa:	3380      	adds	r3, #128	@ 0x80
 8017aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8017aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8017ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ab6:	01db      	lsls	r3, r3, #7
 8017ab8:	4413      	add	r3, r2
 8017aba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d3d5      	bcc.n	8017a6c <_ux_device_stack_initialize+0x268>
        if (endpoints_pool == UX_NULL)
 8017ac0:	e002      	b.n	8017ac8 <_ux_device_stack_initialize+0x2c4>
 8017ac2:	e001      	b.n	8017ac8 <_ux_device_stack_initialize+0x2c4>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 8017ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d101      	bne.n	8017ad2 <_ux_device_stack_initialize+0x2ce>
        return(UX_SUCCESS);
 8017ace:	2300      	movs	r3, #0
 8017ad0:	e040      	b.n	8017b54 <_ux_device_stack_initialize+0x350>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8017ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d021      	beq.n	8017b1c <_ux_device_stack_initialize+0x318>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8017ad8:	e014      	b.n	8017b04 <_ux_device_stack_initialize+0x300>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8017ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d004      	beq.n	8017aec <_ux_device_stack_initialize+0x2e8>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8017ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ae4:	3350      	adds	r3, #80	@ 0x50
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fc fd3c 	bl	8014564 <_ux_utility_semaphore_delete>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8017aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d004      	beq.n	8017afe <_ux_device_stack_initialize+0x2fa>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8017af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fc fc33 	bl	8014364 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 8017afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b00:	3b80      	subs	r3, #128	@ 0x80
 8017b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8017b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d2e4      	bcs.n	8017ada <_ux_device_stack_initialize+0x2d6>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 8017b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7fc fc24 	bl	8014364 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8017b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d005      	beq.n	8017b32 <_ux_device_stack_initialize+0x32e>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 8017b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fc fc19 	bl	8014364 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8017b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d004      	beq.n	8017b44 <_ux_device_stack_initialize+0x340>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8017b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7fc fc10 	bl	8014364 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 8017b44:	4b06      	ldr	r3, [pc, #24]	@ (8017b60 <_ux_device_stack_initialize+0x35c>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7fc fc09 	bl	8014364 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8017b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8017b54:	4618      	mov	r0, r3
 8017b56:	3750      	adds	r7, #80	@ 0x50
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	08018c34 	.word	0x08018c34
 8017b60:	24001dac 	.word	0x24001dac

08017b64 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b086      	sub	sp, #24
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017b6c:	4b20      	ldr	r3, [pc, #128]	@ (8017bf0 <_ux_device_stack_interface_delete+0x8c>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	3320      	adds	r3, #32
 8017b72:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	69db      	ldr	r3, [r3, #28]
 8017b78:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8017b7a:	e01c      	b.n	8017bb6 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	695b      	ldr	r3, [r3, #20]
 8017b84:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8017b86:	4b1a      	ldr	r3, [pc, #104]	@ (8017bf0 <_ux_device_stack_interface_delete+0x8c>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8017b8c:	68bb      	ldr	r3, [r7, #8]
 8017b8e:	699b      	ldr	r3, [r3, #24]
 8017b90:	68fa      	ldr	r2, [r7, #12]
 8017b92:	210f      	movs	r1, #15
 8017b94:	68b8      	ldr	r0, [r7, #8]
 8017b96:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	2200      	movs	r2, #0
 8017bae:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d1df      	bne.n	8017b7c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	699a      	ldr	r2, [r3, #24]
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	2200      	movs	r2, #0
 8017bd0:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2200      	movs	r2, #0
 8017bdc:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2200      	movs	r2, #0
 8017be2:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 8017be4:	2300      	movs	r3, #0
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	3718      	adds	r7, #24
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	24001dac 	.word	0x24001dac

08017bf4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b092      	sub	sp, #72	@ 0x48
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	60b9      	str	r1, [r7, #8]
 8017bfe:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017c00:	4b82      	ldr	r3, [pc, #520]	@ (8017e0c <_ux_device_stack_interface_set+0x218>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017c06:	4b81      	ldr	r3, [pc, #516]	@ (8017e0c <_ux_device_stack_interface_set+0x218>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	3320      	adds	r3, #32
 8017c0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 8017c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017c14:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 8017c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 8017c1e:	e009      	b.n	8017c34 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 8017c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d009      	beq.n	8017c3c <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 8017c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c2a:	3320      	adds	r3, #32
 8017c2c:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 8017c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c30:	3b01      	subs	r3, #1
 8017c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 8017c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d1f2      	bne.n	8017c20 <_ux_device_stack_interface_set+0x2c>
 8017c3a:	e000      	b.n	8017c3e <_ux_device_stack_interface_set+0x4a>
            break;
 8017c3c:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 8017c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d101      	bne.n	8017c48 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 8017c44:	2312      	movs	r3, #18
 8017c46:	e0dd      	b.n	8017e04 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 8017c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 8017c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c50:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 8017c52:	2209      	movs	r2, #9
 8017c54:	496e      	ldr	r1, [pc, #440]	@ (8017e10 <_ux_device_stack_interface_set+0x21c>)
 8017c56:	68f8      	ldr	r0, [r7, #12]
 8017c58:	f7fc f872 	bl	8013d40 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8017c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d104      	bne.n	8017c70 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 8017c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017c6a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8017c6e:	e00e      	b.n	8017c8e <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8017c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017c76:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8017c78:	e002      	b.n	8017c80 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8017c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c7c:	699b      	ldr	r3, [r3, #24]
 8017c7e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8017c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c82:	699b      	ldr	r3, [r3, #24]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1f8      	bne.n	8017c7a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8017c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017c8c:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	1a9b      	subs	r3, r3, r2
 8017c98:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	461a      	mov	r2, r3
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4413      	add	r3, r2
 8017ca4:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8017ca6:	e0a4      	b.n	8017df2 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	781b      	ldrb	r3, [r3, #0]
 8017cac:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	785b      	ldrb	r3, [r3, #1]
 8017cb2:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8017cb4:	7efb      	ldrb	r3, [r7, #27]
 8017cb6:	2b05      	cmp	r3, #5
 8017cb8:	d009      	beq.n	8017cce <_ux_device_stack_interface_set+0xda>
 8017cba:	2b05      	cmp	r3, #5
 8017cbc:	f300 8090 	bgt.w	8017de0 <_ux_device_stack_interface_set+0x1ec>
 8017cc0:	2b02      	cmp	r3, #2
 8017cc2:	f000 8087 	beq.w	8017dd4 <_ux_device_stack_interface_set+0x1e0>
 8017cc6:	2b04      	cmp	r3, #4
 8017cc8:	f000 8084 	beq.w	8017dd4 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 8017ccc:	e088      	b.n	8017de0 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8017cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8017cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017cdc:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 8017cde:	e00d      	b.n	8017cfc <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8017ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d103      	bne.n	8017cf0 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8017ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cea:	2201      	movs	r2, #1
 8017cec:	601a      	str	r2, [r3, #0]
                    break;
 8017cee:	e008      	b.n	8017d02 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cf2:	3380      	adds	r3, #128	@ 0x80
 8017cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 8017cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cf8:	3b01      	subs	r3, #1
 8017cfa:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d1ee      	bne.n	8017ce0 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 8017d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d101      	bne.n	8017d0c <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 8017d08:	2312      	movs	r3, #18
 8017d0a:	e07b      	b.n	8017e04 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8017d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d0e:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 8017d10:	2206      	movs	r2, #6
 8017d12:	4940      	ldr	r1, [pc, #256]	@ (8017e14 <_ux_device_stack_interface_set+0x220>)
 8017d14:	68f8      	ldr	r0, [r7, #12]
 8017d16:	f7fc f813 	bl	8013d40 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d1c:	3320      	adds	r3, #32
 8017d1e:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8017d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d22:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 8017d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8017d2a:	4b38      	ldr	r3, [pc, #224]	@ (8017e0c <_ux_device_stack_interface_set+0x218>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8017d32:	2b02      	cmp	r3, #2
 8017d34:	d118      	bne.n	8017d68 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8017d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d38:	7bdb      	ldrb	r3, [r3, #15]
 8017d3a:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d012      	beq.n	8017d68 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8017d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d44:	8a1b      	ldrh	r3, [r3, #16]
 8017d46:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8017d4a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 8017d4c:	693b      	ldr	r3, [r7, #16]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d00a      	beq.n	8017d68 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	0adb      	lsrs	r3, r3, #11
 8017d56:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 8017d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d60:	693a      	ldr	r2, [r7, #16]
 8017d62:	fb02 f303 	mul.w	r3, r2, r3
 8017d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d6c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017d72:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	f04f 32ff 	mov.w	r2, #4294967295
 8017d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8017d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017d80:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 8017d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d86:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8017d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d8a:	699b      	ldr	r3, [r3, #24]
 8017d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017d8e:	210e      	movs	r1, #14
 8017d90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017d92:	4798      	blx	r3
 8017d94:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 8017d96:	6a3b      	ldr	r3, [r7, #32]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d004      	beq.n	8017da6 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8017d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d9e:	2200      	movs	r2, #0
 8017da0:	601a      	str	r2, [r3, #0]
                return(status);
 8017da2:	6a3b      	ldr	r3, [r7, #32]
 8017da4:	e02e      	b.n	8017e04 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8017da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017da8:	69db      	ldr	r3, [r3, #28]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d103      	bne.n	8017db6 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8017dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017db2:	61da      	str	r2, [r3, #28]
            break;
 8017db4:	e015      	b.n	8017de2 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 8017db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017db8:	69db      	ldr	r3, [r3, #28]
 8017dba:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8017dbc:	e002      	b.n	8017dc4 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8017dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dc0:	695b      	ldr	r3, [r3, #20]
 8017dc2:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8017dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dc6:	695b      	ldr	r3, [r3, #20]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d1f8      	bne.n	8017dbe <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8017dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017dd0:	615a      	str	r2, [r3, #20]
            break;
 8017dd2:	e006      	b.n	8017de2 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 8017dd4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017dd6:	f000 f81f 	bl	8017e18 <_ux_device_stack_interface_start>
 8017dda:	6238      	str	r0, [r7, #32]
            return(status);
 8017ddc:	6a3b      	ldr	r3, [r7, #32]
 8017dde:	e011      	b.n	8017e04 <_ux_device_stack_interface_set+0x210>
            break;
 8017de0:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8017de2:	68ba      	ldr	r2, [r7, #8]
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8017dea:	68fa      	ldr	r2, [r7, #12]
 8017dec:	69fb      	ldr	r3, [r7, #28]
 8017dee:	4413      	add	r3, r2
 8017df0:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	f47f af57 	bne.w	8017ca8 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 8017dfa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017dfc:	f000 f80c 	bl	8017e18 <_ux_device_stack_interface_start>
 8017e00:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 8017e02:	6a3b      	ldr	r3, [r7, #32]
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3748      	adds	r7, #72	@ 0x48
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}
 8017e0c:	24001dac 	.word	0x24001dac
 8017e10:	240000a0 	.word	0x240000a0
 8017e14:	24000080 	.word	0x24000080

08017e18 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b090      	sub	sp, #64	@ 0x40
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8017e20:	4b24      	ldr	r3, [pc, #144]	@ (8017eb4 <_ux_device_stack_interface_start+0x9c>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	687a      	ldr	r2, [r7, #4]
 8017e26:	7b92      	ldrb	r2, [r2, #14]
 8017e28:	3246      	adds	r2, #70	@ 0x46
 8017e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 8017e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d101      	bne.n	8017e3a <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8017e36:	2357      	movs	r3, #87	@ 0x57
 8017e38:	e038      	b.n	8017eac <_ux_device_stack_interface_start+0x94>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8017eb4 <_ux_device_stack_interface_start+0x9c>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	3320      	adds	r3, #32
 8017e40:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8017e42:	2301      	movs	r3, #1
 8017e44:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	7c5b      	ldrb	r3, [r3, #17]
 8017e4e:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	7c9b      	ldrb	r3, [r3, #18]
 8017e54:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	7cdb      	ldrb	r3, [r3, #19]
 8017e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8017e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e5e:	899b      	ldrh	r3, [r3, #12]
 8017e60:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8017e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e64:	89db      	ldrh	r3, [r3, #14]
 8017e66:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8017e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e6a:	687a      	ldr	r2, [r7, #4]
 8017e6c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8017e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e74:	f107 0208 	add.w	r2, r7, #8
 8017e78:	4610      	mov	r0, r2
 8017e7a:	4798      	blx	r3
 8017e7c:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8017e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d112      	bne.n	8017eaa <_ux_device_stack_interface_start+0x92>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8017e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e86:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8017e88:	2302      	movs	r3, #2
 8017e8a:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8017e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e90:	f107 0208 	add.w	r2, r7, #8
 8017e94:	4610      	mov	r0, r2
 8017e96:	4798      	blx	r3
 8017e98:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8017e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d102      	bne.n	8017ea6 <_ux_device_stack_interface_start+0x8e>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017ea4:	605a      	str	r2, [r3, #4]

        return(status); 
 8017ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ea8:	e000      	b.n	8017eac <_ux_device_stack_interface_start+0x94>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8017eaa:	2357      	movs	r3, #87	@ 0x57
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3740      	adds	r7, #64	@ 0x40
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	24001dac 	.word	0x24001dac

08017eb8 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b08a      	sub	sp, #40	@ 0x28
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	60f8      	str	r0, [r7, #12]
 8017ec0:	60b9      	str	r1, [r7, #8]
 8017ec2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017ec4:	4b29      	ldr	r3, [pc, #164]	@ (8017f6c <_ux_device_stack_set_feature+0xb4>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017eca:	4b28      	ldr	r3, [pc, #160]	@ (8017f6c <_ux_device_stack_set_feature+0xb4>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	3320      	adds	r3, #32
 8017ed0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017ed2:	69bb      	ldr	r3, [r7, #24]
 8017ed4:	3318      	adds	r3, #24
 8017ed6:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	f003 0303 	and.w	r3, r3, #3
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d002      	beq.n	8017ee8 <_ux_device_stack_set_feature+0x30>
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	d014      	beq.n	8017f10 <_ux_device_stack_set_feature+0x58>
 8017ee6:	e036      	b.n	8017f56 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	d10e      	bne.n	8017f0c <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8017eee:	4b1f      	ldr	r3, [pc, #124]	@ (8017f6c <_ux_device_stack_set_feature+0xb4>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d006      	beq.n	8017f08 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8017efa:	4b1c      	ldr	r3, [pc, #112]	@ (8017f6c <_ux_device_stack_set_feature+0xb4>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2201      	movs	r2, #1
 8017f00:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

                /* OK. */
                return (UX_SUCCESS);
 8017f04:	2300      	movs	r3, #0
 8017f06:	e02d      	b.n	8017f64 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8017f08:	2354      	movs	r3, #84	@ 0x54
 8017f0a:	e02b      	b.n	8017f64 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8017f0c:	2354      	movs	r3, #84	@ 0x54
 8017f0e:	e029      	b.n	8017f64 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8017f10:	69bb      	ldr	r3, [r7, #24]
 8017f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017f16:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 8017f18:	e01a      	b.n	8017f50 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8017f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f1c:	69db      	ldr	r3, [r3, #28]
 8017f1e:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8017f20:	e010      	b.n	8017f44 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8017f22:	6a3b      	ldr	r3, [r7, #32]
 8017f24:	7b9b      	ldrb	r3, [r3, #14]
 8017f26:	461a      	mov	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d107      	bne.n	8017f3e <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8017f2e:	69fb      	ldr	r3, [r7, #28]
 8017f30:	699b      	ldr	r3, [r3, #24]
 8017f32:	6a3a      	ldr	r2, [r7, #32]
 8017f34:	2114      	movs	r1, #20
 8017f36:	69f8      	ldr	r0, [r7, #28]
 8017f38:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	e012      	b.n	8017f64 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	695b      	ldr	r3, [r3, #20]
 8017f42:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8017f44:	6a3b      	ldr	r3, [r7, #32]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d1eb      	bne.n	8017f22 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8017f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f4c:	699b      	ldr	r3, [r3, #24]
 8017f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 8017f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d1e1      	bne.n	8017f1a <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	699b      	ldr	r3, [r3, #24]
 8017f5a:	697a      	ldr	r2, [r7, #20]
 8017f5c:	2114      	movs	r1, #20
 8017f5e:	69f8      	ldr	r0, [r7, #28]
 8017f60:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8017f62:	2300      	movs	r3, #0
    }
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3728      	adds	r7, #40	@ 0x28
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	24001dac 	.word	0x24001dac

08017f70 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b088      	sub	sp, #32
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
 8017f78:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017f7a:	4b19      	ldr	r3, [pc, #100]	@ (8017fe0 <_ux_device_stack_transfer_abort+0x70>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	683a      	ldr	r2, [r7, #0]
 8017f84:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017f86:	f3ef 8310 	mrs	r3, PRIMASK
 8017f8a:	617b      	str	r3, [r7, #20]
    return(posture);
 8017f8c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8017f8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017f90:	b672      	cpsid	i
    return(int_posture);
 8017f92:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8017f94:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2b01      	cmp	r3, #1
 8017f9c:	d114      	bne.n	8017fc8 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8017f9e:	69fb      	ldr	r3, [r7, #28]
 8017fa0:	699b      	ldr	r3, [r3, #24]
 8017fa2:	687a      	ldr	r2, [r7, #4]
 8017fa4:	210d      	movs	r1, #13
 8017fa6:	69f8      	ldr	r0, [r7, #28]
 8017fa8:	4798      	blx	r3
 8017faa:	69bb      	ldr	r3, [r7, #24]
 8017fac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	f383 8810 	msr	PRIMASK, r3
}
 8017fb4:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	2204      	movs	r2, #4
 8017fba:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	3330      	adds	r3, #48	@ 0x30
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7fc fb15 	bl	80145f0 <_ux_utility_semaphore_put>
 8017fc6:	e005      	b.n	8017fd4 <_ux_device_stack_transfer_abort+0x64>
 8017fc8:	69bb      	ldr	r3, [r7, #24]
 8017fca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	f383 8810 	msr	PRIMASK, r3
}
 8017fd2:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8017fd4:	2300      	movs	r3, #0
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3720      	adds	r7, #32
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	24001dac 	.word	0x24001dac

08017fe4 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	3320      	adds	r3, #32
 8017ff2:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8017ff4:	6839      	ldr	r1, [r7, #0]
 8017ff6:	68f8      	ldr	r0, [r7, #12]
 8017ff8:	f7ff ffba 	bl	8017f70 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8017ffc:	2300      	movs	r3, #0
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	3710      	adds	r7, #16
 8018002:	46bd      	mov	sp, r7
 8018004:	bd80      	pop	{r7, pc}
	...

08018008 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b08e      	sub	sp, #56	@ 0x38
 801800c:	af00      	add	r7, sp, #0
 801800e:	60f8      	str	r0, [r7, #12]
 8018010:	60b9      	str	r1, [r7, #8]
 8018012:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018018:	2b01      	cmp	r3, #1
 801801a:	d101      	bne.n	8018020 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 801801c:	2300      	movs	r3, #0
 801801e:	e077      	b.n	8018110 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018020:	f3ef 8310 	mrs	r3, PRIMASK
 8018024:	623b      	str	r3, [r7, #32]
    return(posture);
 8018026:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8018028:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801802a:	b672      	cpsid	i
    return(int_posture);
 801802c:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 801802e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8018030:	4b39      	ldr	r3, [pc, #228]	@ (8018118 <_ux_device_stack_transfer_request+0x110>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	6a1b      	ldr	r3, [r3, #32]
 8018036:	633b      	str	r3, [r7, #48]	@ 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8018038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801803a:	2b01      	cmp	r3, #1
 801803c:	d005      	beq.n	801804a <_ux_device_stack_transfer_request+0x42>
 801803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018040:	2b02      	cmp	r3, #2
 8018042:	d002      	beq.n	801804a <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 8018044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018046:	2b03      	cmp	r3, #3
 8018048:	d115      	bne.n	8018076 <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	2201      	movs	r2, #1
 801804e:	601a      	str	r2, [r3, #0]
 8018050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018052:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018054:	69bb      	ldr	r3, [r7, #24]
 8018056:	f383 8810 	msr	PRIMASK, r3
}
 801805a:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801805c:	4b2e      	ldr	r3, [pc, #184]	@ (8018118 <_ux_device_stack_transfer_request+0x110>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	689b      	ldr	r3, [r3, #8]
 8018066:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8018068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801806a:	7bdb      	ldrb	r3, [r3, #15]
 801806c:	f003 0303 	and.w	r3, r3, #3
 8018070:	2b00      	cmp	r3, #0
 8018072:	d10b      	bne.n	801808c <_ux_device_stack_transfer_request+0x84>
 8018074:	e01a      	b.n	80180ac <_ux_device_stack_transfer_request+0xa4>
 8018076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018078:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	f383 8810 	msr	PRIMASK, r3
}
 8018080:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 8018082:	2325      	movs	r3, #37	@ 0x25
 8018084:	e044      	b.n	8018110 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8018086:	2064      	movs	r0, #100	@ 0x64
 8018088:	f7fb fe40 	bl	8013d0c <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 801808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	2b02      	cmp	r3, #2
 8018092:	d0f8      	beq.n	8018086 <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8018094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018096:	7b9b      	ldrb	r3, [r3, #14]
 8018098:	b25b      	sxtb	r3, r3
 801809a:	2b00      	cmp	r3, #0
 801809c:	da03      	bge.n	80180a6 <_ux_device_stack_transfer_request+0x9e>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2203      	movs	r2, #3
 80180a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80180a4:	e002      	b.n	80180ac <_ux_device_stack_transfer_request+0xa4>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	2202      	movs	r2, #2
 80180aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180b0:	2b03      	cmp	r3, #3
 80180b2:	d115      	bne.n	80180e0 <_ux_device_stack_transfer_request+0xd8>
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d012      	beq.n	80180e0 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d00e      	beq.n	80180e0 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 80180c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180c4:	8a1b      	ldrh	r3, [r3, #16]
 80180c6:	461a      	mov	r2, r3
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80180ce:	fb01 f202 	mul.w	r2, r1, r2
 80180d2:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d103      	bne.n	80180e0 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	2201      	movs	r2, #1
 80180dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80180de:	e002      	b.n	80180e6 <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	2200      	movs	r2, #0
 80180e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2200      	movs	r2, #0
 80180ea:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	68ba      	ldr	r2, [r7, #8]
 80180f0:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	68ba      	ldr	r2, [r7, #8]
 80180f6:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8018100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018102:	699b      	ldr	r3, [r3, #24]
 8018104:	68fa      	ldr	r2, [r7, #12]
 8018106:	210c      	movs	r1, #12
 8018108:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801810a:	4798      	blx	r3
 801810c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* And return the status.  */
    return(status);
 801810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

#endif
}
 8018110:	4618      	mov	r0, r3
 8018112:	3738      	adds	r7, #56	@ 0x38
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	24001dac 	.word	0x24001dac

0801811c <std>:
 801811c:	2300      	movs	r3, #0
 801811e:	b510      	push	{r4, lr}
 8018120:	4604      	mov	r4, r0
 8018122:	e9c0 3300 	strd	r3, r3, [r0]
 8018126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801812a:	6083      	str	r3, [r0, #8]
 801812c:	8181      	strh	r1, [r0, #12]
 801812e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018130:	81c2      	strh	r2, [r0, #14]
 8018132:	6183      	str	r3, [r0, #24]
 8018134:	4619      	mov	r1, r3
 8018136:	2208      	movs	r2, #8
 8018138:	305c      	adds	r0, #92	@ 0x5c
 801813a:	f000 f9e7 	bl	801850c <memset>
 801813e:	4b0d      	ldr	r3, [pc, #52]	@ (8018174 <std+0x58>)
 8018140:	6263      	str	r3, [r4, #36]	@ 0x24
 8018142:	4b0d      	ldr	r3, [pc, #52]	@ (8018178 <std+0x5c>)
 8018144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018146:	4b0d      	ldr	r3, [pc, #52]	@ (801817c <std+0x60>)
 8018148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801814a:	4b0d      	ldr	r3, [pc, #52]	@ (8018180 <std+0x64>)
 801814c:	6323      	str	r3, [r4, #48]	@ 0x30
 801814e:	4b0d      	ldr	r3, [pc, #52]	@ (8018184 <std+0x68>)
 8018150:	6224      	str	r4, [r4, #32]
 8018152:	429c      	cmp	r4, r3
 8018154:	d006      	beq.n	8018164 <std+0x48>
 8018156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801815a:	4294      	cmp	r4, r2
 801815c:	d002      	beq.n	8018164 <std+0x48>
 801815e:	33d0      	adds	r3, #208	@ 0xd0
 8018160:	429c      	cmp	r4, r3
 8018162:	d105      	bne.n	8018170 <std+0x54>
 8018164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801816c:	f000 ba46 	b.w	80185fc <__retarget_lock_init_recursive>
 8018170:	bd10      	pop	{r4, pc}
 8018172:	bf00      	nop
 8018174:	0801835d 	.word	0x0801835d
 8018178:	0801837f 	.word	0x0801837f
 801817c:	080183b7 	.word	0x080183b7
 8018180:	080183db 	.word	0x080183db
 8018184:	24001db0 	.word	0x24001db0

08018188 <stdio_exit_handler>:
 8018188:	4a02      	ldr	r2, [pc, #8]	@ (8018194 <stdio_exit_handler+0xc>)
 801818a:	4903      	ldr	r1, [pc, #12]	@ (8018198 <stdio_exit_handler+0x10>)
 801818c:	4803      	ldr	r0, [pc, #12]	@ (801819c <stdio_exit_handler+0x14>)
 801818e:	f000 b869 	b.w	8018264 <_fwalk_sglue>
 8018192:	bf00      	nop
 8018194:	240000dc 	.word	0x240000dc
 8018198:	080188fd 	.word	0x080188fd
 801819c:	240000ec 	.word	0x240000ec

080181a0 <cleanup_stdio>:
 80181a0:	6841      	ldr	r1, [r0, #4]
 80181a2:	4b0c      	ldr	r3, [pc, #48]	@ (80181d4 <cleanup_stdio+0x34>)
 80181a4:	4299      	cmp	r1, r3
 80181a6:	b510      	push	{r4, lr}
 80181a8:	4604      	mov	r4, r0
 80181aa:	d001      	beq.n	80181b0 <cleanup_stdio+0x10>
 80181ac:	f000 fba6 	bl	80188fc <_fflush_r>
 80181b0:	68a1      	ldr	r1, [r4, #8]
 80181b2:	4b09      	ldr	r3, [pc, #36]	@ (80181d8 <cleanup_stdio+0x38>)
 80181b4:	4299      	cmp	r1, r3
 80181b6:	d002      	beq.n	80181be <cleanup_stdio+0x1e>
 80181b8:	4620      	mov	r0, r4
 80181ba:	f000 fb9f 	bl	80188fc <_fflush_r>
 80181be:	68e1      	ldr	r1, [r4, #12]
 80181c0:	4b06      	ldr	r3, [pc, #24]	@ (80181dc <cleanup_stdio+0x3c>)
 80181c2:	4299      	cmp	r1, r3
 80181c4:	d004      	beq.n	80181d0 <cleanup_stdio+0x30>
 80181c6:	4620      	mov	r0, r4
 80181c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181cc:	f000 bb96 	b.w	80188fc <_fflush_r>
 80181d0:	bd10      	pop	{r4, pc}
 80181d2:	bf00      	nop
 80181d4:	24001db0 	.word	0x24001db0
 80181d8:	24001e18 	.word	0x24001e18
 80181dc:	24001e80 	.word	0x24001e80

080181e0 <global_stdio_init.part.0>:
 80181e0:	b510      	push	{r4, lr}
 80181e2:	4b0b      	ldr	r3, [pc, #44]	@ (8018210 <global_stdio_init.part.0+0x30>)
 80181e4:	4c0b      	ldr	r4, [pc, #44]	@ (8018214 <global_stdio_init.part.0+0x34>)
 80181e6:	4a0c      	ldr	r2, [pc, #48]	@ (8018218 <global_stdio_init.part.0+0x38>)
 80181e8:	601a      	str	r2, [r3, #0]
 80181ea:	4620      	mov	r0, r4
 80181ec:	2200      	movs	r2, #0
 80181ee:	2104      	movs	r1, #4
 80181f0:	f7ff ff94 	bl	801811c <std>
 80181f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80181f8:	2201      	movs	r2, #1
 80181fa:	2109      	movs	r1, #9
 80181fc:	f7ff ff8e 	bl	801811c <std>
 8018200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018204:	2202      	movs	r2, #2
 8018206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801820a:	2112      	movs	r1, #18
 801820c:	f7ff bf86 	b.w	801811c <std>
 8018210:	24001ee8 	.word	0x24001ee8
 8018214:	24001db0 	.word	0x24001db0
 8018218:	08018189 	.word	0x08018189

0801821c <__sfp_lock_acquire>:
 801821c:	4801      	ldr	r0, [pc, #4]	@ (8018224 <__sfp_lock_acquire+0x8>)
 801821e:	f000 b9ee 	b.w	80185fe <__retarget_lock_acquire_recursive>
 8018222:	bf00      	nop
 8018224:	24001ef1 	.word	0x24001ef1

08018228 <__sfp_lock_release>:
 8018228:	4801      	ldr	r0, [pc, #4]	@ (8018230 <__sfp_lock_release+0x8>)
 801822a:	f000 b9e9 	b.w	8018600 <__retarget_lock_release_recursive>
 801822e:	bf00      	nop
 8018230:	24001ef1 	.word	0x24001ef1

08018234 <__sinit>:
 8018234:	b510      	push	{r4, lr}
 8018236:	4604      	mov	r4, r0
 8018238:	f7ff fff0 	bl	801821c <__sfp_lock_acquire>
 801823c:	6a23      	ldr	r3, [r4, #32]
 801823e:	b11b      	cbz	r3, 8018248 <__sinit+0x14>
 8018240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018244:	f7ff bff0 	b.w	8018228 <__sfp_lock_release>
 8018248:	4b04      	ldr	r3, [pc, #16]	@ (801825c <__sinit+0x28>)
 801824a:	6223      	str	r3, [r4, #32]
 801824c:	4b04      	ldr	r3, [pc, #16]	@ (8018260 <__sinit+0x2c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d1f5      	bne.n	8018240 <__sinit+0xc>
 8018254:	f7ff ffc4 	bl	80181e0 <global_stdio_init.part.0>
 8018258:	e7f2      	b.n	8018240 <__sinit+0xc>
 801825a:	bf00      	nop
 801825c:	080181a1 	.word	0x080181a1
 8018260:	24001ee8 	.word	0x24001ee8

08018264 <_fwalk_sglue>:
 8018264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018268:	4607      	mov	r7, r0
 801826a:	4688      	mov	r8, r1
 801826c:	4614      	mov	r4, r2
 801826e:	2600      	movs	r6, #0
 8018270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018274:	f1b9 0901 	subs.w	r9, r9, #1
 8018278:	d505      	bpl.n	8018286 <_fwalk_sglue+0x22>
 801827a:	6824      	ldr	r4, [r4, #0]
 801827c:	2c00      	cmp	r4, #0
 801827e:	d1f7      	bne.n	8018270 <_fwalk_sglue+0xc>
 8018280:	4630      	mov	r0, r6
 8018282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018286:	89ab      	ldrh	r3, [r5, #12]
 8018288:	2b01      	cmp	r3, #1
 801828a:	d907      	bls.n	801829c <_fwalk_sglue+0x38>
 801828c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018290:	3301      	adds	r3, #1
 8018292:	d003      	beq.n	801829c <_fwalk_sglue+0x38>
 8018294:	4629      	mov	r1, r5
 8018296:	4638      	mov	r0, r7
 8018298:	47c0      	blx	r8
 801829a:	4306      	orrs	r6, r0
 801829c:	3568      	adds	r5, #104	@ 0x68
 801829e:	e7e9      	b.n	8018274 <_fwalk_sglue+0x10>

080182a0 <_puts_r>:
 80182a0:	6a03      	ldr	r3, [r0, #32]
 80182a2:	b570      	push	{r4, r5, r6, lr}
 80182a4:	6884      	ldr	r4, [r0, #8]
 80182a6:	4605      	mov	r5, r0
 80182a8:	460e      	mov	r6, r1
 80182aa:	b90b      	cbnz	r3, 80182b0 <_puts_r+0x10>
 80182ac:	f7ff ffc2 	bl	8018234 <__sinit>
 80182b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182b2:	07db      	lsls	r3, r3, #31
 80182b4:	d405      	bmi.n	80182c2 <_puts_r+0x22>
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	0598      	lsls	r0, r3, #22
 80182ba:	d402      	bmi.n	80182c2 <_puts_r+0x22>
 80182bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182be:	f000 f99e 	bl	80185fe <__retarget_lock_acquire_recursive>
 80182c2:	89a3      	ldrh	r3, [r4, #12]
 80182c4:	0719      	lsls	r1, r3, #28
 80182c6:	d502      	bpl.n	80182ce <_puts_r+0x2e>
 80182c8:	6923      	ldr	r3, [r4, #16]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d135      	bne.n	801833a <_puts_r+0x9a>
 80182ce:	4621      	mov	r1, r4
 80182d0:	4628      	mov	r0, r5
 80182d2:	f000 f8c5 	bl	8018460 <__swsetup_r>
 80182d6:	b380      	cbz	r0, 801833a <_puts_r+0x9a>
 80182d8:	f04f 35ff 	mov.w	r5, #4294967295
 80182dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182de:	07da      	lsls	r2, r3, #31
 80182e0:	d405      	bmi.n	80182ee <_puts_r+0x4e>
 80182e2:	89a3      	ldrh	r3, [r4, #12]
 80182e4:	059b      	lsls	r3, r3, #22
 80182e6:	d402      	bmi.n	80182ee <_puts_r+0x4e>
 80182e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182ea:	f000 f989 	bl	8018600 <__retarget_lock_release_recursive>
 80182ee:	4628      	mov	r0, r5
 80182f0:	bd70      	pop	{r4, r5, r6, pc}
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	da04      	bge.n	8018300 <_puts_r+0x60>
 80182f6:	69a2      	ldr	r2, [r4, #24]
 80182f8:	429a      	cmp	r2, r3
 80182fa:	dc17      	bgt.n	801832c <_puts_r+0x8c>
 80182fc:	290a      	cmp	r1, #10
 80182fe:	d015      	beq.n	801832c <_puts_r+0x8c>
 8018300:	6823      	ldr	r3, [r4, #0]
 8018302:	1c5a      	adds	r2, r3, #1
 8018304:	6022      	str	r2, [r4, #0]
 8018306:	7019      	strb	r1, [r3, #0]
 8018308:	68a3      	ldr	r3, [r4, #8]
 801830a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801830e:	3b01      	subs	r3, #1
 8018310:	60a3      	str	r3, [r4, #8]
 8018312:	2900      	cmp	r1, #0
 8018314:	d1ed      	bne.n	80182f2 <_puts_r+0x52>
 8018316:	2b00      	cmp	r3, #0
 8018318:	da11      	bge.n	801833e <_puts_r+0x9e>
 801831a:	4622      	mov	r2, r4
 801831c:	210a      	movs	r1, #10
 801831e:	4628      	mov	r0, r5
 8018320:	f000 f85f 	bl	80183e2 <__swbuf_r>
 8018324:	3001      	adds	r0, #1
 8018326:	d0d7      	beq.n	80182d8 <_puts_r+0x38>
 8018328:	250a      	movs	r5, #10
 801832a:	e7d7      	b.n	80182dc <_puts_r+0x3c>
 801832c:	4622      	mov	r2, r4
 801832e:	4628      	mov	r0, r5
 8018330:	f000 f857 	bl	80183e2 <__swbuf_r>
 8018334:	3001      	adds	r0, #1
 8018336:	d1e7      	bne.n	8018308 <_puts_r+0x68>
 8018338:	e7ce      	b.n	80182d8 <_puts_r+0x38>
 801833a:	3e01      	subs	r6, #1
 801833c:	e7e4      	b.n	8018308 <_puts_r+0x68>
 801833e:	6823      	ldr	r3, [r4, #0]
 8018340:	1c5a      	adds	r2, r3, #1
 8018342:	6022      	str	r2, [r4, #0]
 8018344:	220a      	movs	r2, #10
 8018346:	701a      	strb	r2, [r3, #0]
 8018348:	e7ee      	b.n	8018328 <_puts_r+0x88>
	...

0801834c <puts>:
 801834c:	4b02      	ldr	r3, [pc, #8]	@ (8018358 <puts+0xc>)
 801834e:	4601      	mov	r1, r0
 8018350:	6818      	ldr	r0, [r3, #0]
 8018352:	f7ff bfa5 	b.w	80182a0 <_puts_r>
 8018356:	bf00      	nop
 8018358:	240000e8 	.word	0x240000e8

0801835c <__sread>:
 801835c:	b510      	push	{r4, lr}
 801835e:	460c      	mov	r4, r1
 8018360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018364:	f000 f8fc 	bl	8018560 <_read_r>
 8018368:	2800      	cmp	r0, #0
 801836a:	bfab      	itete	ge
 801836c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801836e:	89a3      	ldrhlt	r3, [r4, #12]
 8018370:	181b      	addge	r3, r3, r0
 8018372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018376:	bfac      	ite	ge
 8018378:	6563      	strge	r3, [r4, #84]	@ 0x54
 801837a:	81a3      	strhlt	r3, [r4, #12]
 801837c:	bd10      	pop	{r4, pc}

0801837e <__swrite>:
 801837e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018382:	461f      	mov	r7, r3
 8018384:	898b      	ldrh	r3, [r1, #12]
 8018386:	05db      	lsls	r3, r3, #23
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	4616      	mov	r6, r2
 801838e:	d505      	bpl.n	801839c <__swrite+0x1e>
 8018390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018394:	2302      	movs	r3, #2
 8018396:	2200      	movs	r2, #0
 8018398:	f000 f8d0 	bl	801853c <_lseek_r>
 801839c:	89a3      	ldrh	r3, [r4, #12]
 801839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80183a6:	81a3      	strh	r3, [r4, #12]
 80183a8:	4632      	mov	r2, r6
 80183aa:	463b      	mov	r3, r7
 80183ac:	4628      	mov	r0, r5
 80183ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183b2:	f000 b8e7 	b.w	8018584 <_write_r>

080183b6 <__sseek>:
 80183b6:	b510      	push	{r4, lr}
 80183b8:	460c      	mov	r4, r1
 80183ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183be:	f000 f8bd 	bl	801853c <_lseek_r>
 80183c2:	1c43      	adds	r3, r0, #1
 80183c4:	89a3      	ldrh	r3, [r4, #12]
 80183c6:	bf15      	itete	ne
 80183c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80183ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80183ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80183d2:	81a3      	strheq	r3, [r4, #12]
 80183d4:	bf18      	it	ne
 80183d6:	81a3      	strhne	r3, [r4, #12]
 80183d8:	bd10      	pop	{r4, pc}

080183da <__sclose>:
 80183da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183de:	f000 b89d 	b.w	801851c <_close_r>

080183e2 <__swbuf_r>:
 80183e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183e4:	460e      	mov	r6, r1
 80183e6:	4614      	mov	r4, r2
 80183e8:	4605      	mov	r5, r0
 80183ea:	b118      	cbz	r0, 80183f4 <__swbuf_r+0x12>
 80183ec:	6a03      	ldr	r3, [r0, #32]
 80183ee:	b90b      	cbnz	r3, 80183f4 <__swbuf_r+0x12>
 80183f0:	f7ff ff20 	bl	8018234 <__sinit>
 80183f4:	69a3      	ldr	r3, [r4, #24]
 80183f6:	60a3      	str	r3, [r4, #8]
 80183f8:	89a3      	ldrh	r3, [r4, #12]
 80183fa:	071a      	lsls	r2, r3, #28
 80183fc:	d501      	bpl.n	8018402 <__swbuf_r+0x20>
 80183fe:	6923      	ldr	r3, [r4, #16]
 8018400:	b943      	cbnz	r3, 8018414 <__swbuf_r+0x32>
 8018402:	4621      	mov	r1, r4
 8018404:	4628      	mov	r0, r5
 8018406:	f000 f82b 	bl	8018460 <__swsetup_r>
 801840a:	b118      	cbz	r0, 8018414 <__swbuf_r+0x32>
 801840c:	f04f 37ff 	mov.w	r7, #4294967295
 8018410:	4638      	mov	r0, r7
 8018412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018414:	6823      	ldr	r3, [r4, #0]
 8018416:	6922      	ldr	r2, [r4, #16]
 8018418:	1a98      	subs	r0, r3, r2
 801841a:	6963      	ldr	r3, [r4, #20]
 801841c:	b2f6      	uxtb	r6, r6
 801841e:	4283      	cmp	r3, r0
 8018420:	4637      	mov	r7, r6
 8018422:	dc05      	bgt.n	8018430 <__swbuf_r+0x4e>
 8018424:	4621      	mov	r1, r4
 8018426:	4628      	mov	r0, r5
 8018428:	f000 fa68 	bl	80188fc <_fflush_r>
 801842c:	2800      	cmp	r0, #0
 801842e:	d1ed      	bne.n	801840c <__swbuf_r+0x2a>
 8018430:	68a3      	ldr	r3, [r4, #8]
 8018432:	3b01      	subs	r3, #1
 8018434:	60a3      	str	r3, [r4, #8]
 8018436:	6823      	ldr	r3, [r4, #0]
 8018438:	1c5a      	adds	r2, r3, #1
 801843a:	6022      	str	r2, [r4, #0]
 801843c:	701e      	strb	r6, [r3, #0]
 801843e:	6962      	ldr	r2, [r4, #20]
 8018440:	1c43      	adds	r3, r0, #1
 8018442:	429a      	cmp	r2, r3
 8018444:	d004      	beq.n	8018450 <__swbuf_r+0x6e>
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	07db      	lsls	r3, r3, #31
 801844a:	d5e1      	bpl.n	8018410 <__swbuf_r+0x2e>
 801844c:	2e0a      	cmp	r6, #10
 801844e:	d1df      	bne.n	8018410 <__swbuf_r+0x2e>
 8018450:	4621      	mov	r1, r4
 8018452:	4628      	mov	r0, r5
 8018454:	f000 fa52 	bl	80188fc <_fflush_r>
 8018458:	2800      	cmp	r0, #0
 801845a:	d0d9      	beq.n	8018410 <__swbuf_r+0x2e>
 801845c:	e7d6      	b.n	801840c <__swbuf_r+0x2a>
	...

08018460 <__swsetup_r>:
 8018460:	b538      	push	{r3, r4, r5, lr}
 8018462:	4b29      	ldr	r3, [pc, #164]	@ (8018508 <__swsetup_r+0xa8>)
 8018464:	4605      	mov	r5, r0
 8018466:	6818      	ldr	r0, [r3, #0]
 8018468:	460c      	mov	r4, r1
 801846a:	b118      	cbz	r0, 8018474 <__swsetup_r+0x14>
 801846c:	6a03      	ldr	r3, [r0, #32]
 801846e:	b90b      	cbnz	r3, 8018474 <__swsetup_r+0x14>
 8018470:	f7ff fee0 	bl	8018234 <__sinit>
 8018474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018478:	0719      	lsls	r1, r3, #28
 801847a:	d422      	bmi.n	80184c2 <__swsetup_r+0x62>
 801847c:	06da      	lsls	r2, r3, #27
 801847e:	d407      	bmi.n	8018490 <__swsetup_r+0x30>
 8018480:	2209      	movs	r2, #9
 8018482:	602a      	str	r2, [r5, #0]
 8018484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018488:	81a3      	strh	r3, [r4, #12]
 801848a:	f04f 30ff 	mov.w	r0, #4294967295
 801848e:	e033      	b.n	80184f8 <__swsetup_r+0x98>
 8018490:	0758      	lsls	r0, r3, #29
 8018492:	d512      	bpl.n	80184ba <__swsetup_r+0x5a>
 8018494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018496:	b141      	cbz	r1, 80184aa <__swsetup_r+0x4a>
 8018498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801849c:	4299      	cmp	r1, r3
 801849e:	d002      	beq.n	80184a6 <__swsetup_r+0x46>
 80184a0:	4628      	mov	r0, r5
 80184a2:	f000 f8af 	bl	8018604 <_free_r>
 80184a6:	2300      	movs	r3, #0
 80184a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80184aa:	89a3      	ldrh	r3, [r4, #12]
 80184ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80184b0:	81a3      	strh	r3, [r4, #12]
 80184b2:	2300      	movs	r3, #0
 80184b4:	6063      	str	r3, [r4, #4]
 80184b6:	6923      	ldr	r3, [r4, #16]
 80184b8:	6023      	str	r3, [r4, #0]
 80184ba:	89a3      	ldrh	r3, [r4, #12]
 80184bc:	f043 0308 	orr.w	r3, r3, #8
 80184c0:	81a3      	strh	r3, [r4, #12]
 80184c2:	6923      	ldr	r3, [r4, #16]
 80184c4:	b94b      	cbnz	r3, 80184da <__swsetup_r+0x7a>
 80184c6:	89a3      	ldrh	r3, [r4, #12]
 80184c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80184cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80184d0:	d003      	beq.n	80184da <__swsetup_r+0x7a>
 80184d2:	4621      	mov	r1, r4
 80184d4:	4628      	mov	r0, r5
 80184d6:	f000 fa5f 	bl	8018998 <__smakebuf_r>
 80184da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184de:	f013 0201 	ands.w	r2, r3, #1
 80184e2:	d00a      	beq.n	80184fa <__swsetup_r+0x9a>
 80184e4:	2200      	movs	r2, #0
 80184e6:	60a2      	str	r2, [r4, #8]
 80184e8:	6962      	ldr	r2, [r4, #20]
 80184ea:	4252      	negs	r2, r2
 80184ec:	61a2      	str	r2, [r4, #24]
 80184ee:	6922      	ldr	r2, [r4, #16]
 80184f0:	b942      	cbnz	r2, 8018504 <__swsetup_r+0xa4>
 80184f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80184f6:	d1c5      	bne.n	8018484 <__swsetup_r+0x24>
 80184f8:	bd38      	pop	{r3, r4, r5, pc}
 80184fa:	0799      	lsls	r1, r3, #30
 80184fc:	bf58      	it	pl
 80184fe:	6962      	ldrpl	r2, [r4, #20]
 8018500:	60a2      	str	r2, [r4, #8]
 8018502:	e7f4      	b.n	80184ee <__swsetup_r+0x8e>
 8018504:	2000      	movs	r0, #0
 8018506:	e7f7      	b.n	80184f8 <__swsetup_r+0x98>
 8018508:	240000e8 	.word	0x240000e8

0801850c <memset>:
 801850c:	4402      	add	r2, r0
 801850e:	4603      	mov	r3, r0
 8018510:	4293      	cmp	r3, r2
 8018512:	d100      	bne.n	8018516 <memset+0xa>
 8018514:	4770      	bx	lr
 8018516:	f803 1b01 	strb.w	r1, [r3], #1
 801851a:	e7f9      	b.n	8018510 <memset+0x4>

0801851c <_close_r>:
 801851c:	b538      	push	{r3, r4, r5, lr}
 801851e:	4d06      	ldr	r5, [pc, #24]	@ (8018538 <_close_r+0x1c>)
 8018520:	2300      	movs	r3, #0
 8018522:	4604      	mov	r4, r0
 8018524:	4608      	mov	r0, r1
 8018526:	602b      	str	r3, [r5, #0]
 8018528:	f7e8 fd7f 	bl	800102a <_close>
 801852c:	1c43      	adds	r3, r0, #1
 801852e:	d102      	bne.n	8018536 <_close_r+0x1a>
 8018530:	682b      	ldr	r3, [r5, #0]
 8018532:	b103      	cbz	r3, 8018536 <_close_r+0x1a>
 8018534:	6023      	str	r3, [r4, #0]
 8018536:	bd38      	pop	{r3, r4, r5, pc}
 8018538:	24001eec 	.word	0x24001eec

0801853c <_lseek_r>:
 801853c:	b538      	push	{r3, r4, r5, lr}
 801853e:	4d07      	ldr	r5, [pc, #28]	@ (801855c <_lseek_r+0x20>)
 8018540:	4604      	mov	r4, r0
 8018542:	4608      	mov	r0, r1
 8018544:	4611      	mov	r1, r2
 8018546:	2200      	movs	r2, #0
 8018548:	602a      	str	r2, [r5, #0]
 801854a:	461a      	mov	r2, r3
 801854c:	f7e8 fd94 	bl	8001078 <_lseek>
 8018550:	1c43      	adds	r3, r0, #1
 8018552:	d102      	bne.n	801855a <_lseek_r+0x1e>
 8018554:	682b      	ldr	r3, [r5, #0]
 8018556:	b103      	cbz	r3, 801855a <_lseek_r+0x1e>
 8018558:	6023      	str	r3, [r4, #0]
 801855a:	bd38      	pop	{r3, r4, r5, pc}
 801855c:	24001eec 	.word	0x24001eec

08018560 <_read_r>:
 8018560:	b538      	push	{r3, r4, r5, lr}
 8018562:	4d07      	ldr	r5, [pc, #28]	@ (8018580 <_read_r+0x20>)
 8018564:	4604      	mov	r4, r0
 8018566:	4608      	mov	r0, r1
 8018568:	4611      	mov	r1, r2
 801856a:	2200      	movs	r2, #0
 801856c:	602a      	str	r2, [r5, #0]
 801856e:	461a      	mov	r2, r3
 8018570:	f7e8 fd22 	bl	8000fb8 <_read>
 8018574:	1c43      	adds	r3, r0, #1
 8018576:	d102      	bne.n	801857e <_read_r+0x1e>
 8018578:	682b      	ldr	r3, [r5, #0]
 801857a:	b103      	cbz	r3, 801857e <_read_r+0x1e>
 801857c:	6023      	str	r3, [r4, #0]
 801857e:	bd38      	pop	{r3, r4, r5, pc}
 8018580:	24001eec 	.word	0x24001eec

08018584 <_write_r>:
 8018584:	b538      	push	{r3, r4, r5, lr}
 8018586:	4d07      	ldr	r5, [pc, #28]	@ (80185a4 <_write_r+0x20>)
 8018588:	4604      	mov	r4, r0
 801858a:	4608      	mov	r0, r1
 801858c:	4611      	mov	r1, r2
 801858e:	2200      	movs	r2, #0
 8018590:	602a      	str	r2, [r5, #0]
 8018592:	461a      	mov	r2, r3
 8018594:	f7e8 fd2d 	bl	8000ff2 <_write>
 8018598:	1c43      	adds	r3, r0, #1
 801859a:	d102      	bne.n	80185a2 <_write_r+0x1e>
 801859c:	682b      	ldr	r3, [r5, #0]
 801859e:	b103      	cbz	r3, 80185a2 <_write_r+0x1e>
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	bd38      	pop	{r3, r4, r5, pc}
 80185a4:	24001eec 	.word	0x24001eec

080185a8 <__errno>:
 80185a8:	4b01      	ldr	r3, [pc, #4]	@ (80185b0 <__errno+0x8>)
 80185aa:	6818      	ldr	r0, [r3, #0]
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	240000e8 	.word	0x240000e8

080185b4 <__libc_init_array>:
 80185b4:	b570      	push	{r4, r5, r6, lr}
 80185b6:	4d0d      	ldr	r5, [pc, #52]	@ (80185ec <__libc_init_array+0x38>)
 80185b8:	4c0d      	ldr	r4, [pc, #52]	@ (80185f0 <__libc_init_array+0x3c>)
 80185ba:	1b64      	subs	r4, r4, r5
 80185bc:	10a4      	asrs	r4, r4, #2
 80185be:	2600      	movs	r6, #0
 80185c0:	42a6      	cmp	r6, r4
 80185c2:	d109      	bne.n	80185d8 <__libc_init_array+0x24>
 80185c4:	4d0b      	ldr	r5, [pc, #44]	@ (80185f4 <__libc_init_array+0x40>)
 80185c6:	4c0c      	ldr	r4, [pc, #48]	@ (80185f8 <__libc_init_array+0x44>)
 80185c8:	f000 fa54 	bl	8018a74 <_init>
 80185cc:	1b64      	subs	r4, r4, r5
 80185ce:	10a4      	asrs	r4, r4, #2
 80185d0:	2600      	movs	r6, #0
 80185d2:	42a6      	cmp	r6, r4
 80185d4:	d105      	bne.n	80185e2 <__libc_init_array+0x2e>
 80185d6:	bd70      	pop	{r4, r5, r6, pc}
 80185d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80185dc:	4798      	blx	r3
 80185de:	3601      	adds	r6, #1
 80185e0:	e7ee      	b.n	80185c0 <__libc_init_array+0xc>
 80185e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80185e6:	4798      	blx	r3
 80185e8:	3601      	adds	r6, #1
 80185ea:	e7f2      	b.n	80185d2 <__libc_init_array+0x1e>
 80185ec:	08018c9c 	.word	0x08018c9c
 80185f0:	08018c9c 	.word	0x08018c9c
 80185f4:	08018c9c 	.word	0x08018c9c
 80185f8:	08018ca0 	.word	0x08018ca0

080185fc <__retarget_lock_init_recursive>:
 80185fc:	4770      	bx	lr

080185fe <__retarget_lock_acquire_recursive>:
 80185fe:	4770      	bx	lr

08018600 <__retarget_lock_release_recursive>:
 8018600:	4770      	bx	lr
	...

08018604 <_free_r>:
 8018604:	b538      	push	{r3, r4, r5, lr}
 8018606:	4605      	mov	r5, r0
 8018608:	2900      	cmp	r1, #0
 801860a:	d041      	beq.n	8018690 <_free_r+0x8c>
 801860c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018610:	1f0c      	subs	r4, r1, #4
 8018612:	2b00      	cmp	r3, #0
 8018614:	bfb8      	it	lt
 8018616:	18e4      	addlt	r4, r4, r3
 8018618:	f000 f8e0 	bl	80187dc <__malloc_lock>
 801861c:	4a1d      	ldr	r2, [pc, #116]	@ (8018694 <_free_r+0x90>)
 801861e:	6813      	ldr	r3, [r2, #0]
 8018620:	b933      	cbnz	r3, 8018630 <_free_r+0x2c>
 8018622:	6063      	str	r3, [r4, #4]
 8018624:	6014      	str	r4, [r2, #0]
 8018626:	4628      	mov	r0, r5
 8018628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801862c:	f000 b8dc 	b.w	80187e8 <__malloc_unlock>
 8018630:	42a3      	cmp	r3, r4
 8018632:	d908      	bls.n	8018646 <_free_r+0x42>
 8018634:	6820      	ldr	r0, [r4, #0]
 8018636:	1821      	adds	r1, r4, r0
 8018638:	428b      	cmp	r3, r1
 801863a:	bf01      	itttt	eq
 801863c:	6819      	ldreq	r1, [r3, #0]
 801863e:	685b      	ldreq	r3, [r3, #4]
 8018640:	1809      	addeq	r1, r1, r0
 8018642:	6021      	streq	r1, [r4, #0]
 8018644:	e7ed      	b.n	8018622 <_free_r+0x1e>
 8018646:	461a      	mov	r2, r3
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	b10b      	cbz	r3, 8018650 <_free_r+0x4c>
 801864c:	42a3      	cmp	r3, r4
 801864e:	d9fa      	bls.n	8018646 <_free_r+0x42>
 8018650:	6811      	ldr	r1, [r2, #0]
 8018652:	1850      	adds	r0, r2, r1
 8018654:	42a0      	cmp	r0, r4
 8018656:	d10b      	bne.n	8018670 <_free_r+0x6c>
 8018658:	6820      	ldr	r0, [r4, #0]
 801865a:	4401      	add	r1, r0
 801865c:	1850      	adds	r0, r2, r1
 801865e:	4283      	cmp	r3, r0
 8018660:	6011      	str	r1, [r2, #0]
 8018662:	d1e0      	bne.n	8018626 <_free_r+0x22>
 8018664:	6818      	ldr	r0, [r3, #0]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	6053      	str	r3, [r2, #4]
 801866a:	4408      	add	r0, r1
 801866c:	6010      	str	r0, [r2, #0]
 801866e:	e7da      	b.n	8018626 <_free_r+0x22>
 8018670:	d902      	bls.n	8018678 <_free_r+0x74>
 8018672:	230c      	movs	r3, #12
 8018674:	602b      	str	r3, [r5, #0]
 8018676:	e7d6      	b.n	8018626 <_free_r+0x22>
 8018678:	6820      	ldr	r0, [r4, #0]
 801867a:	1821      	adds	r1, r4, r0
 801867c:	428b      	cmp	r3, r1
 801867e:	bf04      	itt	eq
 8018680:	6819      	ldreq	r1, [r3, #0]
 8018682:	685b      	ldreq	r3, [r3, #4]
 8018684:	6063      	str	r3, [r4, #4]
 8018686:	bf04      	itt	eq
 8018688:	1809      	addeq	r1, r1, r0
 801868a:	6021      	streq	r1, [r4, #0]
 801868c:	6054      	str	r4, [r2, #4]
 801868e:	e7ca      	b.n	8018626 <_free_r+0x22>
 8018690:	bd38      	pop	{r3, r4, r5, pc}
 8018692:	bf00      	nop
 8018694:	24001ef8 	.word	0x24001ef8

08018698 <sbrk_aligned>:
 8018698:	b570      	push	{r4, r5, r6, lr}
 801869a:	4e0f      	ldr	r6, [pc, #60]	@ (80186d8 <sbrk_aligned+0x40>)
 801869c:	460c      	mov	r4, r1
 801869e:	6831      	ldr	r1, [r6, #0]
 80186a0:	4605      	mov	r5, r0
 80186a2:	b911      	cbnz	r1, 80186aa <sbrk_aligned+0x12>
 80186a4:	f000 f9d6 	bl	8018a54 <_sbrk_r>
 80186a8:	6030      	str	r0, [r6, #0]
 80186aa:	4621      	mov	r1, r4
 80186ac:	4628      	mov	r0, r5
 80186ae:	f000 f9d1 	bl	8018a54 <_sbrk_r>
 80186b2:	1c43      	adds	r3, r0, #1
 80186b4:	d103      	bne.n	80186be <sbrk_aligned+0x26>
 80186b6:	f04f 34ff 	mov.w	r4, #4294967295
 80186ba:	4620      	mov	r0, r4
 80186bc:	bd70      	pop	{r4, r5, r6, pc}
 80186be:	1cc4      	adds	r4, r0, #3
 80186c0:	f024 0403 	bic.w	r4, r4, #3
 80186c4:	42a0      	cmp	r0, r4
 80186c6:	d0f8      	beq.n	80186ba <sbrk_aligned+0x22>
 80186c8:	1a21      	subs	r1, r4, r0
 80186ca:	4628      	mov	r0, r5
 80186cc:	f000 f9c2 	bl	8018a54 <_sbrk_r>
 80186d0:	3001      	adds	r0, #1
 80186d2:	d1f2      	bne.n	80186ba <sbrk_aligned+0x22>
 80186d4:	e7ef      	b.n	80186b6 <sbrk_aligned+0x1e>
 80186d6:	bf00      	nop
 80186d8:	24001ef4 	.word	0x24001ef4

080186dc <_malloc_r>:
 80186dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186e0:	1ccd      	adds	r5, r1, #3
 80186e2:	f025 0503 	bic.w	r5, r5, #3
 80186e6:	3508      	adds	r5, #8
 80186e8:	2d0c      	cmp	r5, #12
 80186ea:	bf38      	it	cc
 80186ec:	250c      	movcc	r5, #12
 80186ee:	2d00      	cmp	r5, #0
 80186f0:	4606      	mov	r6, r0
 80186f2:	db01      	blt.n	80186f8 <_malloc_r+0x1c>
 80186f4:	42a9      	cmp	r1, r5
 80186f6:	d904      	bls.n	8018702 <_malloc_r+0x26>
 80186f8:	230c      	movs	r3, #12
 80186fa:	6033      	str	r3, [r6, #0]
 80186fc:	2000      	movs	r0, #0
 80186fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80187d8 <_malloc_r+0xfc>
 8018706:	f000 f869 	bl	80187dc <__malloc_lock>
 801870a:	f8d8 3000 	ldr.w	r3, [r8]
 801870e:	461c      	mov	r4, r3
 8018710:	bb44      	cbnz	r4, 8018764 <_malloc_r+0x88>
 8018712:	4629      	mov	r1, r5
 8018714:	4630      	mov	r0, r6
 8018716:	f7ff ffbf 	bl	8018698 <sbrk_aligned>
 801871a:	1c43      	adds	r3, r0, #1
 801871c:	4604      	mov	r4, r0
 801871e:	d158      	bne.n	80187d2 <_malloc_r+0xf6>
 8018720:	f8d8 4000 	ldr.w	r4, [r8]
 8018724:	4627      	mov	r7, r4
 8018726:	2f00      	cmp	r7, #0
 8018728:	d143      	bne.n	80187b2 <_malloc_r+0xd6>
 801872a:	2c00      	cmp	r4, #0
 801872c:	d04b      	beq.n	80187c6 <_malloc_r+0xea>
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	4639      	mov	r1, r7
 8018732:	4630      	mov	r0, r6
 8018734:	eb04 0903 	add.w	r9, r4, r3
 8018738:	f000 f98c 	bl	8018a54 <_sbrk_r>
 801873c:	4581      	cmp	r9, r0
 801873e:	d142      	bne.n	80187c6 <_malloc_r+0xea>
 8018740:	6821      	ldr	r1, [r4, #0]
 8018742:	1a6d      	subs	r5, r5, r1
 8018744:	4629      	mov	r1, r5
 8018746:	4630      	mov	r0, r6
 8018748:	f7ff ffa6 	bl	8018698 <sbrk_aligned>
 801874c:	3001      	adds	r0, #1
 801874e:	d03a      	beq.n	80187c6 <_malloc_r+0xea>
 8018750:	6823      	ldr	r3, [r4, #0]
 8018752:	442b      	add	r3, r5
 8018754:	6023      	str	r3, [r4, #0]
 8018756:	f8d8 3000 	ldr.w	r3, [r8]
 801875a:	685a      	ldr	r2, [r3, #4]
 801875c:	bb62      	cbnz	r2, 80187b8 <_malloc_r+0xdc>
 801875e:	f8c8 7000 	str.w	r7, [r8]
 8018762:	e00f      	b.n	8018784 <_malloc_r+0xa8>
 8018764:	6822      	ldr	r2, [r4, #0]
 8018766:	1b52      	subs	r2, r2, r5
 8018768:	d420      	bmi.n	80187ac <_malloc_r+0xd0>
 801876a:	2a0b      	cmp	r2, #11
 801876c:	d917      	bls.n	801879e <_malloc_r+0xc2>
 801876e:	1961      	adds	r1, r4, r5
 8018770:	42a3      	cmp	r3, r4
 8018772:	6025      	str	r5, [r4, #0]
 8018774:	bf18      	it	ne
 8018776:	6059      	strne	r1, [r3, #4]
 8018778:	6863      	ldr	r3, [r4, #4]
 801877a:	bf08      	it	eq
 801877c:	f8c8 1000 	streq.w	r1, [r8]
 8018780:	5162      	str	r2, [r4, r5]
 8018782:	604b      	str	r3, [r1, #4]
 8018784:	4630      	mov	r0, r6
 8018786:	f000 f82f 	bl	80187e8 <__malloc_unlock>
 801878a:	f104 000b 	add.w	r0, r4, #11
 801878e:	1d23      	adds	r3, r4, #4
 8018790:	f020 0007 	bic.w	r0, r0, #7
 8018794:	1ac2      	subs	r2, r0, r3
 8018796:	bf1c      	itt	ne
 8018798:	1a1b      	subne	r3, r3, r0
 801879a:	50a3      	strne	r3, [r4, r2]
 801879c:	e7af      	b.n	80186fe <_malloc_r+0x22>
 801879e:	6862      	ldr	r2, [r4, #4]
 80187a0:	42a3      	cmp	r3, r4
 80187a2:	bf0c      	ite	eq
 80187a4:	f8c8 2000 	streq.w	r2, [r8]
 80187a8:	605a      	strne	r2, [r3, #4]
 80187aa:	e7eb      	b.n	8018784 <_malloc_r+0xa8>
 80187ac:	4623      	mov	r3, r4
 80187ae:	6864      	ldr	r4, [r4, #4]
 80187b0:	e7ae      	b.n	8018710 <_malloc_r+0x34>
 80187b2:	463c      	mov	r4, r7
 80187b4:	687f      	ldr	r7, [r7, #4]
 80187b6:	e7b6      	b.n	8018726 <_malloc_r+0x4a>
 80187b8:	461a      	mov	r2, r3
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	42a3      	cmp	r3, r4
 80187be:	d1fb      	bne.n	80187b8 <_malloc_r+0xdc>
 80187c0:	2300      	movs	r3, #0
 80187c2:	6053      	str	r3, [r2, #4]
 80187c4:	e7de      	b.n	8018784 <_malloc_r+0xa8>
 80187c6:	230c      	movs	r3, #12
 80187c8:	6033      	str	r3, [r6, #0]
 80187ca:	4630      	mov	r0, r6
 80187cc:	f000 f80c 	bl	80187e8 <__malloc_unlock>
 80187d0:	e794      	b.n	80186fc <_malloc_r+0x20>
 80187d2:	6005      	str	r5, [r0, #0]
 80187d4:	e7d6      	b.n	8018784 <_malloc_r+0xa8>
 80187d6:	bf00      	nop
 80187d8:	24001ef8 	.word	0x24001ef8

080187dc <__malloc_lock>:
 80187dc:	4801      	ldr	r0, [pc, #4]	@ (80187e4 <__malloc_lock+0x8>)
 80187de:	f7ff bf0e 	b.w	80185fe <__retarget_lock_acquire_recursive>
 80187e2:	bf00      	nop
 80187e4:	24001ef0 	.word	0x24001ef0

080187e8 <__malloc_unlock>:
 80187e8:	4801      	ldr	r0, [pc, #4]	@ (80187f0 <__malloc_unlock+0x8>)
 80187ea:	f7ff bf09 	b.w	8018600 <__retarget_lock_release_recursive>
 80187ee:	bf00      	nop
 80187f0:	24001ef0 	.word	0x24001ef0

080187f4 <__sflush_r>:
 80187f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80187f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187fc:	0716      	lsls	r6, r2, #28
 80187fe:	4605      	mov	r5, r0
 8018800:	460c      	mov	r4, r1
 8018802:	d454      	bmi.n	80188ae <__sflush_r+0xba>
 8018804:	684b      	ldr	r3, [r1, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	dc02      	bgt.n	8018810 <__sflush_r+0x1c>
 801880a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801880c:	2b00      	cmp	r3, #0
 801880e:	dd48      	ble.n	80188a2 <__sflush_r+0xae>
 8018810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018812:	2e00      	cmp	r6, #0
 8018814:	d045      	beq.n	80188a2 <__sflush_r+0xae>
 8018816:	2300      	movs	r3, #0
 8018818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801881c:	682f      	ldr	r7, [r5, #0]
 801881e:	6a21      	ldr	r1, [r4, #32]
 8018820:	602b      	str	r3, [r5, #0]
 8018822:	d030      	beq.n	8018886 <__sflush_r+0x92>
 8018824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018826:	89a3      	ldrh	r3, [r4, #12]
 8018828:	0759      	lsls	r1, r3, #29
 801882a:	d505      	bpl.n	8018838 <__sflush_r+0x44>
 801882c:	6863      	ldr	r3, [r4, #4]
 801882e:	1ad2      	subs	r2, r2, r3
 8018830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018832:	b10b      	cbz	r3, 8018838 <__sflush_r+0x44>
 8018834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018836:	1ad2      	subs	r2, r2, r3
 8018838:	2300      	movs	r3, #0
 801883a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801883c:	6a21      	ldr	r1, [r4, #32]
 801883e:	4628      	mov	r0, r5
 8018840:	47b0      	blx	r6
 8018842:	1c43      	adds	r3, r0, #1
 8018844:	89a3      	ldrh	r3, [r4, #12]
 8018846:	d106      	bne.n	8018856 <__sflush_r+0x62>
 8018848:	6829      	ldr	r1, [r5, #0]
 801884a:	291d      	cmp	r1, #29
 801884c:	d82b      	bhi.n	80188a6 <__sflush_r+0xb2>
 801884e:	4a2a      	ldr	r2, [pc, #168]	@ (80188f8 <__sflush_r+0x104>)
 8018850:	40ca      	lsrs	r2, r1
 8018852:	07d6      	lsls	r6, r2, #31
 8018854:	d527      	bpl.n	80188a6 <__sflush_r+0xb2>
 8018856:	2200      	movs	r2, #0
 8018858:	6062      	str	r2, [r4, #4]
 801885a:	04d9      	lsls	r1, r3, #19
 801885c:	6922      	ldr	r2, [r4, #16]
 801885e:	6022      	str	r2, [r4, #0]
 8018860:	d504      	bpl.n	801886c <__sflush_r+0x78>
 8018862:	1c42      	adds	r2, r0, #1
 8018864:	d101      	bne.n	801886a <__sflush_r+0x76>
 8018866:	682b      	ldr	r3, [r5, #0]
 8018868:	b903      	cbnz	r3, 801886c <__sflush_r+0x78>
 801886a:	6560      	str	r0, [r4, #84]	@ 0x54
 801886c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801886e:	602f      	str	r7, [r5, #0]
 8018870:	b1b9      	cbz	r1, 80188a2 <__sflush_r+0xae>
 8018872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018876:	4299      	cmp	r1, r3
 8018878:	d002      	beq.n	8018880 <__sflush_r+0x8c>
 801887a:	4628      	mov	r0, r5
 801887c:	f7ff fec2 	bl	8018604 <_free_r>
 8018880:	2300      	movs	r3, #0
 8018882:	6363      	str	r3, [r4, #52]	@ 0x34
 8018884:	e00d      	b.n	80188a2 <__sflush_r+0xae>
 8018886:	2301      	movs	r3, #1
 8018888:	4628      	mov	r0, r5
 801888a:	47b0      	blx	r6
 801888c:	4602      	mov	r2, r0
 801888e:	1c50      	adds	r0, r2, #1
 8018890:	d1c9      	bne.n	8018826 <__sflush_r+0x32>
 8018892:	682b      	ldr	r3, [r5, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d0c6      	beq.n	8018826 <__sflush_r+0x32>
 8018898:	2b1d      	cmp	r3, #29
 801889a:	d001      	beq.n	80188a0 <__sflush_r+0xac>
 801889c:	2b16      	cmp	r3, #22
 801889e:	d11e      	bne.n	80188de <__sflush_r+0xea>
 80188a0:	602f      	str	r7, [r5, #0]
 80188a2:	2000      	movs	r0, #0
 80188a4:	e022      	b.n	80188ec <__sflush_r+0xf8>
 80188a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188aa:	b21b      	sxth	r3, r3
 80188ac:	e01b      	b.n	80188e6 <__sflush_r+0xf2>
 80188ae:	690f      	ldr	r7, [r1, #16]
 80188b0:	2f00      	cmp	r7, #0
 80188b2:	d0f6      	beq.n	80188a2 <__sflush_r+0xae>
 80188b4:	0793      	lsls	r3, r2, #30
 80188b6:	680e      	ldr	r6, [r1, #0]
 80188b8:	bf08      	it	eq
 80188ba:	694b      	ldreq	r3, [r1, #20]
 80188bc:	600f      	str	r7, [r1, #0]
 80188be:	bf18      	it	ne
 80188c0:	2300      	movne	r3, #0
 80188c2:	eba6 0807 	sub.w	r8, r6, r7
 80188c6:	608b      	str	r3, [r1, #8]
 80188c8:	f1b8 0f00 	cmp.w	r8, #0
 80188cc:	dde9      	ble.n	80188a2 <__sflush_r+0xae>
 80188ce:	6a21      	ldr	r1, [r4, #32]
 80188d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80188d2:	4643      	mov	r3, r8
 80188d4:	463a      	mov	r2, r7
 80188d6:	4628      	mov	r0, r5
 80188d8:	47b0      	blx	r6
 80188da:	2800      	cmp	r0, #0
 80188dc:	dc08      	bgt.n	80188f0 <__sflush_r+0xfc>
 80188de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188e6:	81a3      	strh	r3, [r4, #12]
 80188e8:	f04f 30ff 	mov.w	r0, #4294967295
 80188ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188f0:	4407      	add	r7, r0
 80188f2:	eba8 0800 	sub.w	r8, r8, r0
 80188f6:	e7e7      	b.n	80188c8 <__sflush_r+0xd4>
 80188f8:	20400001 	.word	0x20400001

080188fc <_fflush_r>:
 80188fc:	b538      	push	{r3, r4, r5, lr}
 80188fe:	690b      	ldr	r3, [r1, #16]
 8018900:	4605      	mov	r5, r0
 8018902:	460c      	mov	r4, r1
 8018904:	b913      	cbnz	r3, 801890c <_fflush_r+0x10>
 8018906:	2500      	movs	r5, #0
 8018908:	4628      	mov	r0, r5
 801890a:	bd38      	pop	{r3, r4, r5, pc}
 801890c:	b118      	cbz	r0, 8018916 <_fflush_r+0x1a>
 801890e:	6a03      	ldr	r3, [r0, #32]
 8018910:	b90b      	cbnz	r3, 8018916 <_fflush_r+0x1a>
 8018912:	f7ff fc8f 	bl	8018234 <__sinit>
 8018916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d0f3      	beq.n	8018906 <_fflush_r+0xa>
 801891e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018920:	07d0      	lsls	r0, r2, #31
 8018922:	d404      	bmi.n	801892e <_fflush_r+0x32>
 8018924:	0599      	lsls	r1, r3, #22
 8018926:	d402      	bmi.n	801892e <_fflush_r+0x32>
 8018928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801892a:	f7ff fe68 	bl	80185fe <__retarget_lock_acquire_recursive>
 801892e:	4628      	mov	r0, r5
 8018930:	4621      	mov	r1, r4
 8018932:	f7ff ff5f 	bl	80187f4 <__sflush_r>
 8018936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018938:	07da      	lsls	r2, r3, #31
 801893a:	4605      	mov	r5, r0
 801893c:	d4e4      	bmi.n	8018908 <_fflush_r+0xc>
 801893e:	89a3      	ldrh	r3, [r4, #12]
 8018940:	059b      	lsls	r3, r3, #22
 8018942:	d4e1      	bmi.n	8018908 <_fflush_r+0xc>
 8018944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018946:	f7ff fe5b 	bl	8018600 <__retarget_lock_release_recursive>
 801894a:	e7dd      	b.n	8018908 <_fflush_r+0xc>

0801894c <__swhatbuf_r>:
 801894c:	b570      	push	{r4, r5, r6, lr}
 801894e:	460c      	mov	r4, r1
 8018950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018954:	2900      	cmp	r1, #0
 8018956:	b096      	sub	sp, #88	@ 0x58
 8018958:	4615      	mov	r5, r2
 801895a:	461e      	mov	r6, r3
 801895c:	da0d      	bge.n	801897a <__swhatbuf_r+0x2e>
 801895e:	89a3      	ldrh	r3, [r4, #12]
 8018960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018964:	f04f 0100 	mov.w	r1, #0
 8018968:	bf14      	ite	ne
 801896a:	2340      	movne	r3, #64	@ 0x40
 801896c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018970:	2000      	movs	r0, #0
 8018972:	6031      	str	r1, [r6, #0]
 8018974:	602b      	str	r3, [r5, #0]
 8018976:	b016      	add	sp, #88	@ 0x58
 8018978:	bd70      	pop	{r4, r5, r6, pc}
 801897a:	466a      	mov	r2, sp
 801897c:	f000 f848 	bl	8018a10 <_fstat_r>
 8018980:	2800      	cmp	r0, #0
 8018982:	dbec      	blt.n	801895e <__swhatbuf_r+0x12>
 8018984:	9901      	ldr	r1, [sp, #4]
 8018986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801898a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801898e:	4259      	negs	r1, r3
 8018990:	4159      	adcs	r1, r3
 8018992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018996:	e7eb      	b.n	8018970 <__swhatbuf_r+0x24>

08018998 <__smakebuf_r>:
 8018998:	898b      	ldrh	r3, [r1, #12]
 801899a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801899c:	079d      	lsls	r5, r3, #30
 801899e:	4606      	mov	r6, r0
 80189a0:	460c      	mov	r4, r1
 80189a2:	d507      	bpl.n	80189b4 <__smakebuf_r+0x1c>
 80189a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80189a8:	6023      	str	r3, [r4, #0]
 80189aa:	6123      	str	r3, [r4, #16]
 80189ac:	2301      	movs	r3, #1
 80189ae:	6163      	str	r3, [r4, #20]
 80189b0:	b003      	add	sp, #12
 80189b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189b4:	ab01      	add	r3, sp, #4
 80189b6:	466a      	mov	r2, sp
 80189b8:	f7ff ffc8 	bl	801894c <__swhatbuf_r>
 80189bc:	9f00      	ldr	r7, [sp, #0]
 80189be:	4605      	mov	r5, r0
 80189c0:	4639      	mov	r1, r7
 80189c2:	4630      	mov	r0, r6
 80189c4:	f7ff fe8a 	bl	80186dc <_malloc_r>
 80189c8:	b948      	cbnz	r0, 80189de <__smakebuf_r+0x46>
 80189ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189ce:	059a      	lsls	r2, r3, #22
 80189d0:	d4ee      	bmi.n	80189b0 <__smakebuf_r+0x18>
 80189d2:	f023 0303 	bic.w	r3, r3, #3
 80189d6:	f043 0302 	orr.w	r3, r3, #2
 80189da:	81a3      	strh	r3, [r4, #12]
 80189dc:	e7e2      	b.n	80189a4 <__smakebuf_r+0xc>
 80189de:	89a3      	ldrh	r3, [r4, #12]
 80189e0:	6020      	str	r0, [r4, #0]
 80189e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189e6:	81a3      	strh	r3, [r4, #12]
 80189e8:	9b01      	ldr	r3, [sp, #4]
 80189ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80189ee:	b15b      	cbz	r3, 8018a08 <__smakebuf_r+0x70>
 80189f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189f4:	4630      	mov	r0, r6
 80189f6:	f000 f81d 	bl	8018a34 <_isatty_r>
 80189fa:	b128      	cbz	r0, 8018a08 <__smakebuf_r+0x70>
 80189fc:	89a3      	ldrh	r3, [r4, #12]
 80189fe:	f023 0303 	bic.w	r3, r3, #3
 8018a02:	f043 0301 	orr.w	r3, r3, #1
 8018a06:	81a3      	strh	r3, [r4, #12]
 8018a08:	89a3      	ldrh	r3, [r4, #12]
 8018a0a:	431d      	orrs	r5, r3
 8018a0c:	81a5      	strh	r5, [r4, #12]
 8018a0e:	e7cf      	b.n	80189b0 <__smakebuf_r+0x18>

08018a10 <_fstat_r>:
 8018a10:	b538      	push	{r3, r4, r5, lr}
 8018a12:	4d07      	ldr	r5, [pc, #28]	@ (8018a30 <_fstat_r+0x20>)
 8018a14:	2300      	movs	r3, #0
 8018a16:	4604      	mov	r4, r0
 8018a18:	4608      	mov	r0, r1
 8018a1a:	4611      	mov	r1, r2
 8018a1c:	602b      	str	r3, [r5, #0]
 8018a1e:	f7e8 fb10 	bl	8001042 <_fstat>
 8018a22:	1c43      	adds	r3, r0, #1
 8018a24:	d102      	bne.n	8018a2c <_fstat_r+0x1c>
 8018a26:	682b      	ldr	r3, [r5, #0]
 8018a28:	b103      	cbz	r3, 8018a2c <_fstat_r+0x1c>
 8018a2a:	6023      	str	r3, [r4, #0]
 8018a2c:	bd38      	pop	{r3, r4, r5, pc}
 8018a2e:	bf00      	nop
 8018a30:	24001eec 	.word	0x24001eec

08018a34 <_isatty_r>:
 8018a34:	b538      	push	{r3, r4, r5, lr}
 8018a36:	4d06      	ldr	r5, [pc, #24]	@ (8018a50 <_isatty_r+0x1c>)
 8018a38:	2300      	movs	r3, #0
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	4608      	mov	r0, r1
 8018a3e:	602b      	str	r3, [r5, #0]
 8018a40:	f7e8 fb0f 	bl	8001062 <_isatty>
 8018a44:	1c43      	adds	r3, r0, #1
 8018a46:	d102      	bne.n	8018a4e <_isatty_r+0x1a>
 8018a48:	682b      	ldr	r3, [r5, #0]
 8018a4a:	b103      	cbz	r3, 8018a4e <_isatty_r+0x1a>
 8018a4c:	6023      	str	r3, [r4, #0]
 8018a4e:	bd38      	pop	{r3, r4, r5, pc}
 8018a50:	24001eec 	.word	0x24001eec

08018a54 <_sbrk_r>:
 8018a54:	b538      	push	{r3, r4, r5, lr}
 8018a56:	4d06      	ldr	r5, [pc, #24]	@ (8018a70 <_sbrk_r+0x1c>)
 8018a58:	2300      	movs	r3, #0
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	4608      	mov	r0, r1
 8018a5e:	602b      	str	r3, [r5, #0]
 8018a60:	f7e8 fb18 	bl	8001094 <_sbrk>
 8018a64:	1c43      	adds	r3, r0, #1
 8018a66:	d102      	bne.n	8018a6e <_sbrk_r+0x1a>
 8018a68:	682b      	ldr	r3, [r5, #0]
 8018a6a:	b103      	cbz	r3, 8018a6e <_sbrk_r+0x1a>
 8018a6c:	6023      	str	r3, [r4, #0]
 8018a6e:	bd38      	pop	{r3, r4, r5, pc}
 8018a70:	24001eec 	.word	0x24001eec

08018a74 <_init>:
 8018a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a76:	bf00      	nop
 8018a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a7a:	bc08      	pop	{r3}
 8018a7c:	469e      	mov	lr, r3
 8018a7e:	4770      	bx	lr

08018a80 <_fini>:
 8018a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a82:	bf00      	nop
 8018a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a86:	bc08      	pop	{r3}
 8018a88:	469e      	mov	lr, r3
 8018a8a:	4770      	bx	lr
