/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    app_threadx.c
  * @author  MCD Application Team
  * @brief   ThreadX applicative file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2020-2021 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "app_threadx.h"
#include "app_azure_rtos_config" //TX_APP_MEM_POOL_SIZE

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "main.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define THREAD_STACK_SIZE   1024
#define LED_THREAD_PRIORITY 15
#define LOAD1_THREAD_PRIORITY 16
#define LOAD2_THREAD_PRIORITY 17
#define TRACEX_BUFFER_SIZE 64000
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t led_thread_stack[THREAD_STACK_SIZE];
TX_THREAD led_thread;
uint8_t load1_thread_stack[THREAD_STACK_SIZE];
TX_THREAD load1_thread;
uint8_t load2_thread_stack[THREAD_STACK_SIZE];
TX_THREAD load2_thread;
uint8_t tracex_buffer[TRACEX_BUFFER_SIZE];


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
VOID led_thread_entry(ULONG initial_input);

VOID load1_thread_entry(ULONG initial_input);
VOID load2_thread_entry(ULONG initial_input);
/* USER CODE END PFP */

/**
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
  UINT ret = TX_SUCCESS;
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL *) memory_ptr;
  CHAR *memory_pointer;
  CHAR *pool_name
  ULONG available, fragments;

  // Ex.2: 2) Allocate stack from the byte pool
    ret = tx_byte_allocate(byte_pool,
  						(VOID **)&memory_pointer,
						THREAD_STACK_SIZE,
  						TX_NO_WAIT);

    if (ret != TX_SUCCESS) {
  	  // Allocation failed: indicate error
  	  HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, GPIO_PIN_SET);
  	  printf("Error when allocating memory for the LED thread");
  	  return ret;
    }

    // Ex.2: 3) Create the threadâ€”stack pointer & size come from the byte pool allocation
    ret = tx_thread_create(&led_thread,
  							"LED1_dynamic_stack",
  							led_thread_entry,
  							0UL,                       // entry arg
  							memory_pointer,
							THREAD_STACK_SIZE,
  							LED_THREAD_PRIORITY,
  							LED_THREAD_PRIORITY,       // preemption-threshold = priority
  							TX_NO_TIME_SLICE,
  							TX_AUTO_START);
    if (ret != TX_SUCCESS) {
  	  // Clean up if creation failed
  	  (void)tx_byte_release(memory_pointer);
  	  // led_thread_stack = NULL;
  	  HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, GPIO_PIN_SET);
  	  printf("Error when creating LED thread");
  	  return ret;
    }

    ret = tx_byte_pool_info_get(byte_pool, &pool_name, &available, &fragments, TX_NULL, TX_NULL, TX_NULL);
    printf("Byte pool: %s\n", memory_pointer);
    printf("Available bytes: %lu\n", available);
    printf("Overhead bytes: %lu\n", TX_APP_MEM_POOL_SIZE - available);


  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_trace_enable(&tracex_buffer, 64000, 30);
  tx_thread_create(&led_thread, "LED thread", led_thread_entry, 0x1234, memory_pointer, THREAD_STACK_SIZE,
  		  LED_THREAD_PRIORITY, LED_THREAD_PRIORITY, 0, TX_AUTO_START);

  tx_thread_create(&load1_thread, "Load 1 thread", load1_thread_entry, 0x1234, load1_thread_stack, THREAD_STACK_SIZE,
  		  LOAD1_THREAD_PRIORITY, LOAD1_THREAD_PRIORITY, 0, TX_AUTO_START);

  tx_thread_create(&load2_thread, "Load 2 thread", load2_thread_entry, 0x1234, load2_thread_stack, THREAD_STACK_SIZE,
		  LOAD2_THREAD_PRIORITY, LOAD2_THREAD_PRIORITY, 0, TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
}

  /**
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}

/* USER CODE BEGIN 1 */
VOID led_thread_entry(ULONG initial_input)
{
	while(1)
	{
		tx_trace_user_event_insert(4096, 1, 2, 3, 4);

		printf("Hello from LED thread. Initial input is: 0x%04X\n", (unsigned int) initial_input);
		HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
		tx_thread_sleep(100); // 100 ticks == 1s
	}
}

VOID load1_thread_entry(ULONG initial_input)
{
	while(1)
	{
		HAL_Delay(300);
		tx_thread_sleep(100); // 100 ticks == 1s
	}
}

VOID load2_thread_entry(ULONG initial_input)
{
	while(1)
	{
		HAL_Delay(1000);
		tx_thread_sleep(100); // 100 ticks == 1s
	}
}
/* USER CODE END 1 */
